/*
 *	autogen/server/zone/managers/planet/PlanetManager.h generated by engine3 IDL compiler 0.70
 */

#ifndef PLANETMANAGER_H_
#define PLANETMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class Zone;

class ZonePOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServer;

class ZoneProcessServerPOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace region {

class Region;

class RegionPOD;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegion;

class CityRegionPOD;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace managers {
namespace weather {

class WeatherManager;

class WeatherManagerPOD;

} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather;

namespace server {
namespace zone {
namespace managers {
namespace gcw {

class GCWManager;

class GCWManagerPOD;

} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class CloseObjectsVector;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/managers/planet/RegionMap.h"

#include "terrain/manager/TerrainManager.h"

#include "server/zone/managers/planet/MissionTargetMap.h"

#include "templates/snapshot/WorldSnapshotNode.h"

#include "templates/snapshot/WorldSnapshotIff.h"

#include "server/zone/managers/planet/PlanetTravelPointList.h"

#include "server/zone/managers/planet/PlanetTravelPoint.h"

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/building/ShuttleMap.h"

#include "server/zone/managers/planet/ClientPoiDataTable.h"

#include "server/zone/managers/planet/TravelFare.h"

#include "engine/util/u3d/Vector3.h"

#include "server/zone/managers/collision/IntersectionResults.h"

#include "server/zone/objects/pathfinding/NavArea.h"

#include "engine/core/ManagedService.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

#include "system/util/SynchronizedVectorMap.h"

#include "system/util/SynchronizedSortedVector.h"

#include "system/thread/Mutex.h"

namespace server {
namespace zone {
namespace managers {
namespace planet {

class PlanetManager : public ManagedService {
public:
	static const int SHUTTLEPORT = 0;

	static const int STARPORT = 1;

	PlanetManager(Zone* planet, ZoneProcessServer* srv);

	void loadRegions();

	void readRegionObject(LuaObject& luaObject);

	void addNavArea(const String& name, NavArea* area);

	NavArea* getNavArea(const String& name);

	void dropNavArea(const String& name);

	void initializeTransientMembers();

	void initialize();

	void buildCityNavMeshes();

	void loadClientPoiData();

	void start();

	/**
	 * Returns the closest PlanetTravelPoint within the given range.
	 * @param object The object to use as reference.
	 * @param range The maximum range to search within.
	 * @return Returns a PlanetTravelPoint or NULL if not found in range
	 */
	PlanetTravelPoint* getNearestPlanetTravelPoint(SceneObject* object, float range = 16000.0);

	PlanetTravelPoint* getRandomStarport();

	/**
	 * Returns the closest PlanetTravelPoint within the given range.
	 * @param position The position to use as reference.
	 * @param range The maximum range to search within.
	 * @return Returns a PlanetTravelPoint or NULL if not found in range
	 */
	PlanetTravelPoint* getNearestPlanetTravelPoint(const Vector3& position, float range = 16000.0);

	/**
	 * Get a random spawn point on the planet.
	 * The spawn point will be checked to be a valid spawn point through no spawn areas, water, buildings etc.
	 * @return Returns a valid spawn point.
	 */
	Vector3 getRandomSpawnPoint();

	/**
	 * Get a spawn point that is "in sight" for the supplied creature.
	 * The spawn point will be randomly generated in an arc in front of the creature. The creature heading direction willl be the center of the arc.
	 * The spawn point will be checked to be unobstructed by any buildings and to be a valid spawn point. 10 tries will be made with the minimum distance + 20 m.
	 * If no suitable spawn point has been foun the minimum distance will be increased with 10 m and 10 new tries will be made. This will continue until the
	 * maximum distance is reached. If no suitable spawn point has been found after all tries the creature position will be returned.
	 * @param creature the creature that the spaawn point should be in sight for.
	 * @param minDistance the minimum spawn point distance from thee creature.
	 * @param maxDistance the maximum spawn point distance from thee creature.
	 * @param angle the half angle of the spawn arc.
	 * @return a spawn position.
	 */
	Vector3 getInSightSpawnPoint(CreatureObject* creature, float minDistance, float maxDistance, float angle);

	bool isSpawningPermittedAt(float x, float y, float margin, bool isWorldSpawnArea = false);

	bool isBuildingPermittedAt(float x, float y, SceneObject* objectTryingToBuild = NULL, float margin = 0, bool checkFootprint = true);

	bool isCampingPermittedAt(float x, float y, float margin);

	Reference<SceneObject* > findObjectTooCloseToDecoration(float x, float y, float margin);

	bool isInRangeWithPoi(float x, float y, float range);

	Reference<SceneObject* > findObjectInNoBuildZone(float x, float y, float extraMargin, bool checkFootprint = true);

	bool isInObjectsNoBuildZone(float x, float y, float extraMargin, bool checkFootprint = true);

	/**
	 * Gets the cost to travel via shuttleport/starport to the destination planet.
	 * If the value is 0, then travel to the planet from this planet is disabled.
	 * @param destinationPlanet The planet that to which is being travelled. Can be the same planet.
	 * @return The cost to travel to the destination planet.
	 */
	int getTravelFare(const String& departurePlanet, const String& arrivalPlanet);

	void sendPlanetTravelPointListResponse(CreatureObject* player);

	/**
	 * Creates a travel ticket from the departure point on this planet to the arrival point on the arrival planet.
	 * @param departurePoint The point on this planet from which the ticket is set to depart.
	 * @param arrivalPlanet The planet to which the ticket is set to arrive.
	 * @param departurePoint The point on the arrival planet to which the ticket is set to arrive.
	 * @return Returns a travel ticket for the route specified, or NULL if it could not be created.
	 */
	Reference<SceneObject* > createTicket(const String& departurePoint, const String& arrivalPlanet, const String& arrivalPoint);

	bool validateRegionName(const String& name);

	bool validateClientCityInRange(CreatureObject* creatureObject, float x, float y);

	WeatherManager* getWeatherManager();

	GCWManager* getGCWManager();

	TerrainManager* getTerrainManager();

	int getCityRegionCount();

	int getNumberOfCities();

	void increaseNumberOfCities();

	CityRegion* getCityRegion(int index);

	CityRegion* getCityRegion(const String& region);

	CityRegion* getCityRegionAt(float x, float y);

	Region* getRegion(int index);

	Region* getRegion(const String& region);

	Region* getRegionAt(float x, float y);

	void addCityRegion(CityRegion* region);

	void addRegion(Region* region);

	void dropCityRegion(const String& region);

	void dropRegion(const String& region);

	bool hasCityRegion(const String& name);

	bool hasRegion(const String& name);

	void addPerformanceLocation(SceneObject* obj);

	void removePerformanceLocation(SceneObject* obj);

	MissionTargetMap* getPerformanceLocations();

	/**
	 * Checks to see if the point is an existing planet travel point.
	 * @param pointName The name of the point to check for.
	 * @return Returns true if the point exists.
	 */
	bool isExistingPlanetTravelPoint(const String& pointName);

	/**
	 * Checks to see if interplanetary travel is allowed to the specified point.
	 * @param pointName The point name representing a travel point belonging to this planet.
	 * @return Returns true if interplanetary travel is allowed.
	 */
	bool isInterplanetaryTravelAllowed(const String& pointName);

	/**
	 * Checks to see if incoming travel is allowed to the specified point.
	 * @param pointName The point name representing a travel point belonging to this planet.
	 * @return Returns true if incoming travel is allowed.
	 */
	bool isIncomingTravelAllowed(const String& pointName);

	/**
	 * Gets the PlanetTravelPoint that corresponds to the point name. If the point doesn't exist
	 * then it will return NULL.
	 * @param pointName The planet travel point's name.
	 * @return PlanetTravelPoint for the given point name.
	 */
	PlanetTravelPoint* getPlanetTravelPoint(const String& pointName);

	/**
	 * Checks to see the travel between the points is allowed based on their settings.
	 * @param destinationPoint The point from which is being traveled.
	 * @param arrivalPlanet The planet to which is being traveled.
	 * @param arrivalPoint The point to which is being traveled.
	 * @return Returns true if travel is permitted between the two points.
	 */
	bool isTravelToLocationPermitted(const String& destinationPoint, const String& arrivalPlanet, const String& arrivalPoint);

	void scheduleShuttle(CreatureObject* shuttle, int shuttleType);

	void removeShuttle(CreatureObject* shuttle);

	bool checkShuttleStatus(CreatureObject* creature, CreatureObject* shuttle);

	bool isInWater(float x, float y);

	float findClosestWorldFloor(float x, float y, float z, float swimHeight, IntersectionResults* intersections = NULL, CloseObjectsVector* closeObjects = NULL);

	void addPlayerCityTravelPoint(PlanetTravelPoint* ptp);

	void removePlayerCityTravelPoint(const String& cityName);

	void addEventObject(unsigned long long objectID);

	void addEventStructure(unsigned long long objectID);

	int destroyEventObject(unsigned long long objectID);

	int destroyAllEventObjects();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlanetManager(DummyConstructorParameter* param);

	virtual ~PlanetManager();

	friend class PlanetManagerHelper;
};

} // namespace planet
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::planet;

namespace server {
namespace zone {
namespace managers {
namespace planet {

class PlanetManagerImplementation : public ManagedServiceImplementation, public Logger {
protected:
	ManagedReference<Zone* > zone;

	RegionMap regionMap;

	ShuttleMap shuttleMap;

	TravelFare travelFares;

	Reference<PlanetTravelPointList* > planetTravelPointList;

	int shuttleportAwayTime;

	int shuttleportLandedTime;

	int shuttleportLandingTime;

	int starportAwayTime;

	int starportLandedTime;

	int starportLandingTime;

public:
	static const int SHUTTLEPORT = 0;

	static const int STARPORT = 1;

protected:
	ManagedReference<WeatherManager* > weatherManager;

	ManagedReference<GCWManager* > gcwManager;

	int numberOfCities;

	ManagedReference<ZoneProcessServer* > server;

	Reference<TerrainManager* > terrainManager;

	Reference<MissionTargetMap* > performanceLocations;

	static ClientPoiDataTable clientPoiDataTable;

	static Mutex poiMutex;

	SynchronizedVectorMap<String, ManagedReference<NavArea* > > navMeshAreas;

	SynchronizedSortedVector<unsigned long long> spawnedEventObjects;

	SynchronizedSortedVector<unsigned long long> spawnedEventStructures;

public:
	PlanetManagerImplementation(Zone* planet, ZoneProcessServer* srv);

	PlanetManagerImplementation(DummyConstructorParameter* param);

private:
	Reference<SceneObject* > loadSnapshotObject(WorldSnapshotNode* node, WorldSnapshotIff* wsiff, int& totalObjects);

	void loadSnapshotObjects();

	void loadTravelFares();

	void loadPlanetObjects(LuaObject* lua);

public:
	void loadRegions();

	void readRegionObject(LuaObject& luaObject);

private:
	void loadBadgeAreas(LuaObject* lua);

	void buildRegionNavAreas();

public:
	void addNavArea(const String& name, NavArea* area);

	NavArea* getNavArea(const String& name);

	void dropNavArea(const String& name);

private:
	void loadLuaConfig();

public:
	void initializeTransientMembers();

	void finalize();

	virtual void initialize();

	void buildCityNavMeshes();

	void loadClientPoiData();

	void start();

	/**
	 * Returns the closest PlanetTravelPoint within the given range.
	 * @param object The object to use as reference.
	 * @param range The maximum range to search within.
	 * @return Returns a PlanetTravelPoint or NULL if not found in range
	 */
	PlanetTravelPoint* getNearestPlanetTravelPoint(SceneObject* object, float range = 16000.0);

	PlanetTravelPoint* getRandomStarport();

	/**
	 * Returns the closest PlanetTravelPoint within the given range.
	 * @param position The position to use as reference.
	 * @param range The maximum range to search within.
	 * @return Returns a PlanetTravelPoint or NULL if not found in range
	 */
	PlanetTravelPoint* getNearestPlanetTravelPoint(const Vector3& position, float range = 16000.0);

	/**
	 * Get a random spawn point on the planet.
	 * The spawn point will be checked to be a valid spawn point through no spawn areas, water, buildings etc.
	 * @return Returns a valid spawn point.
	 */
	Vector3 getRandomSpawnPoint();

	/**
	 * Get a spawn point that is "in sight" for the supplied creature.
	 * The spawn point will be randomly generated in an arc in front of the creature. The creature heading direction willl be the center of the arc.
	 * The spawn point will be checked to be unobstructed by any buildings and to be a valid spawn point. 10 tries will be made with the minimum distance + 20 m.
	 * If no suitable spawn point has been foun the minimum distance will be increased with 10 m and 10 new tries will be made. This will continue until the
	 * maximum distance is reached. If no suitable spawn point has been found after all tries the creature position will be returned.
	 * @param creature the creature that the spaawn point should be in sight for.
	 * @param minDistance the minimum spawn point distance from thee creature.
	 * @param maxDistance the maximum spawn point distance from thee creature.
	 * @param angle the half angle of the spawn arc.
	 * @return a spawn position.
	 */
	Vector3 getInSightSpawnPoint(CreatureObject* creature, float minDistance, float maxDistance, float angle);

private:
	bool noInterferingObjects(CreatureObject* creature, const Vector3& position);

public:
	bool isSpawningPermittedAt(float x, float y, float margin, bool isWorldSpawnArea = false);

	bool isBuildingPermittedAt(float x, float y, SceneObject* objectTryingToBuild = NULL, float margin = 0, bool checkFootprint = true);

	bool isCampingPermittedAt(float x, float y, float margin);

	Reference<SceneObject* > findObjectTooCloseToDecoration(float x, float y, float margin);

	bool isInRangeWithPoi(float x, float y, float range);

	Reference<SceneObject* > findObjectInNoBuildZone(float x, float y, float extraMargin, bool checkFootprint = true);

	bool isInObjectsNoBuildZone(float x, float y, float extraMargin, bool checkFootprint = true);

	/**
	 * Gets the cost to travel via shuttleport/starport to the destination planet.
	 * If the value is 0, then travel to the planet from this planet is disabled.
	 * @param destinationPlanet The planet that to which is being travelled. Can be the same planet.
	 * @return The cost to travel to the destination planet.
	 */
	int getTravelFare(const String& departurePlanet, const String& arrivalPlanet);

	void sendPlanetTravelPointListResponse(CreatureObject* player);

	/**
	 * Creates a travel ticket from the departure point on this planet to the arrival point on the arrival planet.
	 * @param departurePoint The point on this planet from which the ticket is set to depart.
	 * @param arrivalPlanet The planet to which the ticket is set to arrive.
	 * @param departurePoint The point on the arrival planet to which the ticket is set to arrive.
	 * @return Returns a travel ticket for the route specified, or NULL if it could not be created.
	 */
	Reference<SceneObject* > createTicket(const String& departurePoint, const String& arrivalPlanet, const String& arrivalPoint);

	bool validateRegionName(const String& name);

	bool validateClientCityInRange(CreatureObject* creatureObject, float x, float y);

	WeatherManager* getWeatherManager();

	GCWManager* getGCWManager();

	TerrainManager* getTerrainManager();

	int getCityRegionCount();

	int getNumberOfCities();

	void increaseNumberOfCities();

	CityRegion* getCityRegion(int index);

	CityRegion* getCityRegion(const String& region);

	CityRegion* getCityRegionAt(float x, float y);

	Region* getRegion(int index);

	Region* getRegion(const String& region);

	Region* getRegionAt(float x, float y);

	void addCityRegion(CityRegion* region);

	void addRegion(Region* region);

	void dropCityRegion(const String& region);

	void dropRegion(const String& region);

	bool hasCityRegion(const String& name);

	bool hasRegion(const String& name);

	void addPerformanceLocation(SceneObject* obj);

	void removePerformanceLocation(SceneObject* obj);

	MissionTargetMap* getPerformanceLocations();

	/**
	 * Checks to see if the point is an existing planet travel point.
	 * @param pointName The name of the point to check for.
	 * @return Returns true if the point exists.
	 */
	bool isExistingPlanetTravelPoint(const String& pointName);

	/**
	 * Checks to see if interplanetary travel is allowed to the specified point.
	 * @param pointName The point name representing a travel point belonging to this planet.
	 * @return Returns true if interplanetary travel is allowed.
	 */
	bool isInterplanetaryTravelAllowed(const String& pointName);

	/**
	 * Checks to see if incoming travel is allowed to the specified point.
	 * @param pointName The point name representing a travel point belonging to this planet.
	 * @return Returns true if incoming travel is allowed.
	 */
	bool isIncomingTravelAllowed(const String& pointName);

	/**
	 * Gets the PlanetTravelPoint that corresponds to the point name. If the point doesn't exist
	 * then it will return NULL.
	 * @param pointName The planet travel point's name.
	 * @return PlanetTravelPoint for the given point name.
	 */
	PlanetTravelPoint* getPlanetTravelPoint(const String& pointName);

	/**
	 * Checks to see the travel between the points is allowed based on their settings.
	 * @param destinationPoint The point from which is being traveled.
	 * @param arrivalPlanet The planet to which is being traveled.
	 * @param arrivalPoint The point to which is being traveled.
	 * @return Returns true if travel is permitted between the two points.
	 */
	bool isTravelToLocationPermitted(const String& destinationPoint, const String& arrivalPlanet, const String& arrivalPoint);

	void scheduleShuttle(CreatureObject* shuttle, int shuttleType);

	void removeShuttle(CreatureObject* shuttle);

	bool checkShuttleStatus(CreatureObject* creature, CreatureObject* shuttle);

	bool isInWater(float x, float y);

	float findClosestWorldFloor(float x, float y, float z, float swimHeight, IntersectionResults* intersections = NULL, CloseObjectsVector* closeObjects = NULL);

	void addPlayerCityTravelPoint(PlanetTravelPoint* ptp);

	void removePlayerCityTravelPoint(const String& cityName);

	void addEventObject(unsigned long long objectID);

	void addEventStructure(unsigned long long objectID);

	int destroyEventObject(unsigned long long objectID);

	int destroyAllEventObjects();

	WeakReference<PlanetManager*> _this;

	operator const PlanetManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlanetManagerImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlanetManager;
};

class PlanetManagerAdapter : public ManagedServiceAdapter {
public:
	PlanetManagerAdapter(PlanetManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addNavArea(const String& name, NavArea* area);

	NavArea* getNavArea(const String& name);

	void dropNavArea(const String& name);

	void initializeTransientMembers();

	void finalize();

	void initialize();

	void loadClientPoiData();

	void start();

	bool isSpawningPermittedAt(float x, float y, float margin, bool isWorldSpawnArea);

	bool isBuildingPermittedAt(float x, float y, SceneObject* objectTryingToBuild, float margin, bool checkFootprint);

	bool isCampingPermittedAt(float x, float y, float margin);

	Reference<SceneObject* > findObjectTooCloseToDecoration(float x, float y, float margin);

	bool isInRangeWithPoi(float x, float y, float range);

	Reference<SceneObject* > findObjectInNoBuildZone(float x, float y, float extraMargin, bool checkFootprint);

	bool isInObjectsNoBuildZone(float x, float y, float extraMargin, bool checkFootprint);

	int getTravelFare(const String& departurePlanet, const String& arrivalPlanet);

	void sendPlanetTravelPointListResponse(CreatureObject* player);

	Reference<SceneObject* > createTicket(const String& departurePoint, const String& arrivalPlanet, const String& arrivalPoint);

	bool validateRegionName(const String& name);

	bool validateClientCityInRange(CreatureObject* creatureObject, float x, float y);

	WeatherManager* getWeatherManager();

	GCWManager* getGCWManager();

	int getCityRegionCount();

	int getNumberOfCities();

	void increaseNumberOfCities();

	CityRegion* getCityRegion(int index);

	CityRegion* getCityRegion(const String& region);

	CityRegion* getCityRegionAt(float x, float y);

	Region* getRegion(int index);

	Region* getRegion(const String& region);

	Region* getRegionAt(float x, float y);

	void addCityRegion(CityRegion* region);

	void addRegion(Region* region);

	void dropCityRegion(const String& region);

	void dropRegion(const String& region);

	bool hasCityRegion(const String& name);

	bool hasRegion(const String& name);

	void addPerformanceLocation(SceneObject* obj);

	void removePerformanceLocation(SceneObject* obj);

	bool isExistingPlanetTravelPoint(const String& pointName);

	bool isInterplanetaryTravelAllowed(const String& pointName);

	bool isIncomingTravelAllowed(const String& pointName);

	bool isTravelToLocationPermitted(const String& destinationPoint, const String& arrivalPlanet, const String& arrivalPoint);

	void scheduleShuttle(CreatureObject* shuttle, int shuttleType);

	void removeShuttle(CreatureObject* shuttle);

	bool checkShuttleStatus(CreatureObject* creature, CreatureObject* shuttle);

	bool isInWater(float x, float y);

	void removePlayerCityTravelPoint(const String& cityName);

	void addEventObject(unsigned long long objectID);

	void addEventStructure(unsigned long long objectID);

	int destroyEventObject(unsigned long long objectID);

	int destroyAllEventObjects();

};

class PlanetManagerHelper : public DistributedObjectClassHelper, public Singleton<PlanetManagerHelper> {
	static PlanetManagerHelper* staticInitializer;

public:
	PlanetManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlanetManagerHelper>;
};

} // namespace planet
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::planet;

namespace server {
namespace zone {
namespace managers {
namespace planet {

class PlanetManagerPOD : public ManagedServicePOD {
public:
	Optional<ManagedReference<ZonePOD* >> zone;

	Optional<RegionMap> regionMap;

	Optional<TravelFare> travelFares;

	Optional<Reference<PlanetTravelPointList* >> planetTravelPointList;

	Optional<int> shuttleportAwayTime;

	Optional<int> shuttleportLandedTime;

	Optional<int> shuttleportLandingTime;

	Optional<int> starportAwayTime;

	Optional<int> starportLandedTime;

	Optional<int> starportLandingTime;

	Optional<int> numberOfCities;

	String _className;
	PlanetManagerPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~PlanetManagerPOD();

};

} // namespace planet
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::planet;

#endif /*PLANETMANAGERPOD_H_*/
