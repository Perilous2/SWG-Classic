/*
 *	autogen/server/zone/managers/creature/CreatureManager.h generated by engine3 IDL compiler 0.70
 */

#ifndef CREATUREMANAGER_H_
#define CREATUREMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class Zone;

class ZonePOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

class TangibleObjectPOD;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

class AiAgentPOD;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class Creature;

class CreaturePOD;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class CreatureTemplateManager;

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class DnaManager;

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace objects {
namespace region {

class SpawnArea;

class SpawnAreaPOD;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "server/zone/managers/creature/SpawnAreaMap.h"

#include "server/zone/managers/creature/AiSpeciesData.h"

#include "server/zone/managers/ZoneManager.h"

#include "system/util/Vector.h"

#include "system/util/SynchronizedVector.h"

#include "system/thread/Mutex.h"

namespace server {
namespace zone {
namespace managers {
namespace creature {

class CreatureManager : public ZoneManager {
public:
	static const short NOTMILKED = 0x00;

	static const short BEINGMILKED = 0x01;

	static const short ALREADYMILKED = 0x02;

	static const short HASDNA = 0x00;

	static const short DNASAMPLED = 0x01;

	static const short DNADEATH = 0x03;

	CreatureManager(Zone* planet);

	void initialize();

	void stop();

	SceneObject* spawn(unsigned int lairTemplate, int difficultyLevel, int difficulty, float x, float z, float y, float size);

	SceneObject* spawnLair(unsigned int lairTemplate, int difficultyLevel, int difficulty, float x, float z, float y, float size = 20);

	SceneObject* spawnTheater(unsigned int lairTemplate, int difficulty, float x, float z, float y, float size = 10);

	SceneObject* spawnDynamicSpawn(unsigned int lairTemplate, int difficulty, float x, float z, float y, float size = 10);

	/**
	 * Spawns the specified creature into zone
	 * @pre { this unlocked }
	 * @post { creature is in zone }
	 * @param templateCRC template string crc of the creature to spawn
	 * @param x position x
	 * @param y position y
	 * @param parentID cell object id (optional)
	 * @return returns creature object that has been spawned, NULL on error
	 */
	CreatureObject* spawnCreatureWithAi(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID = 0, bool persistent = false);

	CreatureObject* spawnCreatureWithLevel(unsigned int mobileTemplateCRC, int level, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreatureAsBaby(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreatureAsEventMob(unsigned int templateCRC, int level, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID = 0, bool persistent = false, float direction = 0);

	CreatureObject* createCreature(unsigned int templateCRC, bool persistent = false, unsigned int mobileTemplate = 0);

	void placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID, float direction = 0);

	String getTemplateToSpawn(unsigned int templateCRC);

	bool checkSpawnAsBaby(float tamingChance, int babiesSpawned, int chance);

	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	int notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition, bool isCombatAction);

	void unloadSpawnAreas();

	void harvest(Creature* creature, CreatureObject* player, int selectedID);

	void droidHarvest(Creature* creature, CreatureObject* droid, int selectedID, int bonus);

	void tame(Creature* creature, CreatureObject* player, bool force = false, bool adult = false);

	void milk(Creature* creature, CreatureObject* player);

	/** Gather a DNA sample from the given creature*/
	void sample(Creature* creature, CreatureObject* player);

	SpawnArea* getWorldSpawnArea();

	void addSpawnAreaToMap(unsigned int nameHash, SpawnArea* area);

	void addNoSpawnArea(SpawnArea* area);

	AiSpeciesData* getAiSpeciesData(unsigned int speciesID);

	SpawnArea* getSpawnArea(const String& areaname);

	bool addWearableItem(CreatureObject* creature, TangibleObject* clothing);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CreatureManager(DummyConstructorParameter* param);

	virtual ~CreatureManager();

	friend class CreatureManagerHelper;
};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class CreatureManagerImplementation : public ZoneManagerImplementation {
protected:
	ManagedReference<Zone* > zone;

	SpawnAreaMap spawnAreaMap;

	Reference<CreatureTemplateManager* > creatureTemplateManager;

	Reference<DnaManager* > dnaManager;

	static Mutex loadMutex;

public:
	static const short NOTMILKED = 0x00;

	static const short BEINGMILKED = 0x01;

	static const short ALREADYMILKED = 0x02;

	static const short HASDNA = 0x00;

	static const short DNASAMPLED = 0x01;

	static const short DNADEATH = 0x03;

	CreatureManagerImplementation(Zone* planet);

	CreatureManagerImplementation(DummyConstructorParameter* param);

	void initialize();

	void stop();

	SceneObject* spawn(unsigned int lairTemplate, int difficultyLevel, int difficulty, float x, float z, float y, float size);

	SceneObject* spawnLair(unsigned int lairTemplate, int difficultyLevel, int difficulty, float x, float z, float y, float size = 20);

	SceneObject* spawnTheater(unsigned int lairTemplate, int difficulty, float x, float z, float y, float size = 10);

	SceneObject* spawnDynamicSpawn(unsigned int lairTemplate, int difficulty, float x, float z, float y, float size = 10);

	/**
	 * Spawns the specified creature into zone
	 * @pre { this unlocked }
	 * @post { creature is in zone }
	 * @param templateCRC template string crc of the creature to spawn
	 * @param x position x
	 * @param y position y
	 * @param parentID cell object id (optional)
	 * @return returns creature object that has been spawned, NULL on error
	 */
	CreatureObject* spawnCreatureWithAi(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID = 0, bool persistent = false);

	CreatureObject* spawnCreatureWithLevel(unsigned int mobileTemplateCRC, int level, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreatureAsBaby(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreatureAsEventMob(unsigned int templateCRC, int level, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID = 0);

	CreatureObject* spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID = 0, bool persistent = false, float direction = 0);

	CreatureObject* createCreature(unsigned int templateCRC, bool persistent = false, unsigned int mobileTemplate = 0);

	void placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID, float direction = 0);

	String getTemplateToSpawn(unsigned int templateCRC);

	bool checkSpawnAsBaby(float tamingChance, int babiesSpawned, int chance);

	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	int notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition, bool isCombatAction);

	void unloadSpawnAreas();

private:
	bool createCreatureChildrenObjects(CreatureObject* creature, unsigned int templateCRC, bool persistent = false, unsigned int mobileTemplateCRC = 0);

	void setCreatureTemplateManager();

public:
	void harvest(Creature* creature, CreatureObject* player, int selectedID);

	void droidHarvest(Creature* creature, CreatureObject* droid, int selectedID, int bonus);

	void tame(Creature* creature, CreatureObject* player, bool force = false, bool adult = false);

	void milk(Creature* creature, CreatureObject* player);

	/** Gather a DNA sample from the given creature*/
	void sample(Creature* creature, CreatureObject* player);

	SpawnArea* getWorldSpawnArea();

	void addSpawnAreaToMap(unsigned int nameHash, SpawnArea* area);

	void addNoSpawnArea(SpawnArea* area);

	AiSpeciesData* getAiSpeciesData(unsigned int speciesID);

	SpawnArea* getSpawnArea(const String& areaname);

	bool addWearableItem(CreatureObject* creature, TangibleObject* clothing);

	WeakReference<CreatureManager*> _this;

	operator const CreatureManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CreatureManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CreatureManager;
};

class CreatureManagerAdapter : public ZoneManagerAdapter {
public:
	CreatureManagerAdapter(CreatureManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

	void stop();

	SceneObject* spawn(unsigned int lairTemplate, int difficultyLevel, int difficulty, float x, float z, float y, float size);

	SceneObject* spawnLair(unsigned int lairTemplate, int difficultyLevel, int difficulty, float x, float z, float y, float size);

	SceneObject* spawnTheater(unsigned int lairTemplate, int difficulty, float x, float z, float y, float size);

	SceneObject* spawnDynamicSpawn(unsigned int lairTemplate, int difficulty, float x, float z, float y, float size);

	CreatureObject* spawnCreatureWithAi(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID, bool persistent);

	CreatureObject* spawnCreatureWithLevel(unsigned int mobileTemplateCRC, int level, float x, float z, float y, unsigned long long parentID);

	CreatureObject* spawnCreatureAsBaby(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID);

	CreatureObject* spawnCreatureAsEventMob(unsigned int templateCRC, int level, float x, float z, float y, unsigned long long parentID);

	CreatureObject* spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID);

	CreatureObject* spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID, bool persistent, float direction);

	CreatureObject* createCreature(unsigned int templateCRC, bool persistent, unsigned int mobileTemplate);

	void placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID, float direction);

	String getTemplateToSpawn(unsigned int templateCRC);

	bool checkSpawnAsBaby(float tamingChance, int babiesSpawned, int chance);

	void unloadSpawnAreas();

	void harvest(Creature* creature, CreatureObject* player, int selectedID);

	void droidHarvest(Creature* creature, CreatureObject* droid, int selectedID, int bonus);

	void tame(Creature* creature, CreatureObject* player, bool force, bool adult);

	void milk(Creature* creature, CreatureObject* player);

	void sample(Creature* creature, CreatureObject* player);

	void addSpawnAreaToMap(unsigned int nameHash, SpawnArea* area);

	void addNoSpawnArea(SpawnArea* area);

	SpawnArea* getSpawnArea(const String& areaname);

	bool addWearableItem(CreatureObject* creature, TangibleObject* clothing);

};

class CreatureManagerHelper : public DistributedObjectClassHelper, public Singleton<CreatureManagerHelper> {
	static CreatureManagerHelper* staticInitializer;

public:
	CreatureManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CreatureManagerHelper>;
};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class CreatureManagerPOD : public ZoneManagerPOD {
public:
	Optional<ManagedReference<ZonePOD* >> zone;

	Optional<SpawnAreaMap> spawnAreaMap;

	String _className;
	CreatureManagerPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~CreatureManagerPOD();

};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

#endif /*CREATUREMANAGERPOD_H_*/
