/*
 *	autogen/server/zone/managers/gcw/observers/SquadObserver.cpp generated by engine3 IDL compiler 0.70
 */

#include "SquadObserver.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

/*
 *	SquadObserverStub
 */

SquadObserver::SquadObserver() : Observer(DummyConstructorParameter::instance()) {
	SquadObserverImplementation* _implementation = new SquadObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SquadObserver");
}

SquadObserver::SquadObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("SquadObserver");
}

SquadObserver::~SquadObserver() {
}



void SquadObserver::addMember(AiAgent* member) {
	SquadObserverImplementation* _implementation = static_cast<SquadObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->addMember(member);
	}
}

int SquadObserver::size() {
	SquadObserverImplementation* _implementation = static_cast<SquadObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->size();
	}
}

AiAgent* SquadObserver::getMember(unsigned int teamMemberIndex) {
	SquadObserverImplementation* _implementation = static_cast<SquadObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getMember(teamMemberIndex);
	}
}

void SquadObserver::removeMember(unsigned int teamMemberIndex) {
	SquadObserverImplementation* _implementation = static_cast<SquadObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->removeMember(teamMemberIndex);
	}
}

void SquadObserver::despawnSquad() {
	SquadObserverImplementation* _implementation = static_cast<SquadObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->despawnSquad();
	}
}

bool SquadObserver::despawnMembersCloseToLambdaShuttle(const Vector3& landingPosition, bool forcedCleanup) {
	SquadObserverImplementation* _implementation = static_cast<SquadObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->despawnMembersCloseToLambdaShuttle(landingPosition, forcedCleanup);
	}
}

DistributedObjectServant* SquadObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SquadObserver::_getImplementationForRead() const {
	return _impl;
}

void SquadObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SquadObserverImplementation
 */

SquadObserverImplementation::SquadObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


SquadObserverImplementation::~SquadObserverImplementation() {
}


void SquadObserverImplementation::finalize() {
}

void SquadObserverImplementation::_initializeImplementation() {
	_setClassHelper(SquadObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SquadObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SquadObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* SquadObserverImplementation::_getStub() {
	return _this.get();
}

SquadObserverImplementation::operator const SquadObserver*() {
	return _this.get();
}

void SquadObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SquadObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SquadObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SquadObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SquadObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SquadObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SquadObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SquadObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("SquadObserver");

}

void SquadObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SquadObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SquadObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xec5bc103: //SquadObserver.teamMembers
		TypeInfo<Vector<ManagedReference<AiAgent* > > >::parseFromBinaryStream(&teamMembers, stream);
		return true;

	}

	return false;
}

void SquadObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SquadObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SquadObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xec5bc103; //SquadObserver.teamMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<AiAgent* > > >::toBinaryStream(&teamMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

SquadObserverImplementation::SquadObserverImplementation() : ObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/gcw/observers/SquadObserver.idl():  		Logger.setLoggingName("SquadObserver");
	Logger::setLoggingName("SquadObserver");
}

/*
 *	SquadObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SquadObserverAdapter::SquadObserverAdapter(SquadObserver* obj) : ObserverAdapter(obj) {
}

void SquadObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

/*
 *	SquadObserverHelper
 */

SquadObserverHelper* SquadObserverHelper::staticInitializer = SquadObserverHelper::instance();

SquadObserverHelper::SquadObserverHelper() {
	className = "SquadObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void SquadObserverHelper::finalizeHelper() {
	SquadObserverHelper::finalize();
}

DistributedObject* SquadObserverHelper::instantiateObject() {
	return new SquadObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* SquadObserverHelper::instantiateServant() {
	return new SquadObserverImplementation();
}

DistributedObjectPOD* SquadObserverHelper::instantiatePOD() {
	return new SquadObserverPOD();
}

DistributedObjectAdapter* SquadObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SquadObserverAdapter(static_cast<SquadObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SquadObserverPOD
 */

SquadObserverPOD::~SquadObserverPOD() {
}

SquadObserverPOD::SquadObserverPOD(void) {
	_className = "SquadObserver";
}


void SquadObserverPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SquadObserverPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SquadObserverPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (teamMembers) {
	_nameHashCode = 0xec5bc103; //SquadObserver.teamMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<AiAgentPOD* > > >::toBinaryStream(&teamMembers.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool SquadObserverPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xec5bc103: //SquadObserver.teamMembers
		{
			Vector<ManagedReference<AiAgentPOD* > > _mnteamMembers;
			TypeInfo<Vector<ManagedReference<AiAgentPOD* > > >::parseFromBinaryStream(&_mnteamMembers, stream);
			teamMembers = std::move(_mnteamMembers);
		}
		return true;

	}

	return false;
}

void SquadObserverPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SquadObserverPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void SquadObserverPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);

	TypeInfo<Vector<ManagedReference<AiAgentPOD* > > >::toBinaryStream(&teamMembers.value(), stream);


}

