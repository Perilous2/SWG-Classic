/*
 *	autogen/server/zone/managers/gcw/observers/ProbotObserver.cpp generated by engine3 IDL compiler 0.70
 */

#include "ProbotObserver.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

/*
 *	ProbotObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 1440679449,RPC_ISPROBOTOBSERVER__,RPC_SETPROBOT__AIAGENT_};

ProbotObserver::ProbotObserver() : Observer(DummyConstructorParameter::instance()) {
	ProbotObserverImplementation* _implementation = new ProbotObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ProbotObserver");
}

ProbotObserver::ProbotObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("ProbotObserver");
}

ProbotObserver::~ProbotObserver() {
}



int ProbotObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	ProbotObserverImplementation* _implementation = static_cast<ProbotObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

bool ProbotObserver::isProbotObserver() {
	ProbotObserverImplementation* _implementation = static_cast<ProbotObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPROBOTOBSERVER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isProbotObserver();
	}
}

void ProbotObserver::setProbot(AiAgent* probotDroid) {
	ProbotObserverImplementation* _implementation = static_cast<ProbotObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPROBOT__AIAGENT_);
		method.addObjectParameter(probotDroid);

		method.executeWithVoidReturn();
	} else {
		_implementation->setProbot(probotDroid);
	}
}

DistributedObjectServant* ProbotObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ProbotObserver::_getImplementationForRead() const {
	return _impl;
}

void ProbotObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ProbotObserverImplementation
 */

ProbotObserverImplementation::ProbotObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


ProbotObserverImplementation::~ProbotObserverImplementation() {
}


void ProbotObserverImplementation::finalize() {
}

void ProbotObserverImplementation::_initializeImplementation() {
	_setClassHelper(ProbotObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ProbotObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ProbotObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* ProbotObserverImplementation::_getStub() {
	return _this.get();
}

ProbotObserverImplementation::operator const ProbotObserver*() {
	return _this.get();
}

void ProbotObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ProbotObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ProbotObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ProbotObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ProbotObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ProbotObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ProbotObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ProbotObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("ProbotObserver");

}

void ProbotObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ProbotObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ProbotObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf8210736: //ProbotObserver.probot
		TypeInfo<ManagedReference<AiAgent* > >::parseFromBinaryStream(&probot, stream);
		return true;

	}

	return false;
}

void ProbotObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ProbotObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ProbotObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xf8210736; //ProbotObserver.probot
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<AiAgent* > >::toBinaryStream(&probot, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

ProbotObserverImplementation::ProbotObserverImplementation() : ObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/gcw/observers/ProbotObserver.idl():  		Logger.setLoggingName("ProbotObserver");
	Logger::setLoggingName("ProbotObserver");
	// server/zone/managers/gcw/observers/ProbotObserver.idl():  		probot = null;
	probot = NULL;
}

bool ProbotObserverImplementation::isProbotObserver() {
	// server/zone/managers/gcw/observers/ProbotObserver.idl():  		return true;
	return true;
}

void ProbotObserverImplementation::setProbot(AiAgent* probotDroid) {
	// server/zone/managers/gcw/observers/ProbotObserver.idl():  		probot = probotDroid;
	probot = probotDroid;
}

/*
 *	ProbotObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ProbotObserverAdapter::ProbotObserverAdapter(ProbotObserver* obj) : ObserverAdapter(obj) {
}

void ProbotObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISPROBOTOBSERVER__:
		{
			
			bool _m_res = isProbotObserver();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETPROBOT__AIAGENT_:
		{
			AiAgent* probotDroid = static_cast<AiAgent*>(inv->getObjectParameter());
			
			setProbot(probotDroid);
			
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int ProbotObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<ProbotObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

bool ProbotObserverAdapter::isProbotObserver() {
	return (static_cast<ProbotObserver*>(stub))->isProbotObserver();
}

void ProbotObserverAdapter::setProbot(AiAgent* probotDroid) {
	(static_cast<ProbotObserver*>(stub))->setProbot(probotDroid);
}

/*
 *	ProbotObserverHelper
 */

ProbotObserverHelper* ProbotObserverHelper::staticInitializer = ProbotObserverHelper::instance();

ProbotObserverHelper::ProbotObserverHelper() {
	className = "ProbotObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void ProbotObserverHelper::finalizeHelper() {
	ProbotObserverHelper::finalize();
}

DistributedObject* ProbotObserverHelper::instantiateObject() {
	return new ProbotObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* ProbotObserverHelper::instantiateServant() {
	return new ProbotObserverImplementation();
}

DistributedObjectPOD* ProbotObserverHelper::instantiatePOD() {
	return new ProbotObserverPOD();
}

DistributedObjectAdapter* ProbotObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ProbotObserverAdapter(static_cast<ProbotObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ProbotObserverPOD
 */

ProbotObserverPOD::~ProbotObserverPOD() {
}

ProbotObserverPOD::ProbotObserverPOD(void) {
	_className = "ProbotObserver";
}


void ProbotObserverPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ProbotObserverPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ProbotObserverPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (probot) {
	_nameHashCode = 0xf8210736; //ProbotObserver.probot
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<AiAgentPOD* > >::toBinaryStream(&probot.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool ProbotObserverPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf8210736: //ProbotObserver.probot
		{
			ManagedReference<AiAgentPOD* > _mnprobot;
			TypeInfo<ManagedReference<AiAgentPOD* > >::parseFromBinaryStream(&_mnprobot, stream);
			probot = std::move(_mnprobot);
		}
		return true;

	}

	return false;
}

void ProbotObserverPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ProbotObserverPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ProbotObserverPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);

	TypeInfo<ManagedReference<AiAgentPOD* > >::toBinaryStream(&probot.value(), stream);


}

