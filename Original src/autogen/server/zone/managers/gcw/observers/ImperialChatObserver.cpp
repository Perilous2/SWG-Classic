/*
 *	autogen/server/zone/managers/gcw/observers/ImperialChatObserver.cpp generated by engine3 IDL compiler 0.70
 */

#include "ImperialChatObserver.h"

/*
 *	ImperialChatObserverStub
 */

ImperialChatObserver::ImperialChatObserver() : Observer(DummyConstructorParameter::instance()) {
	ImperialChatObserverImplementation* _implementation = new ImperialChatObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ImperialChatObserver");
}

ImperialChatObserver::ImperialChatObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("ImperialChatObserver");
}

ImperialChatObserver::~ImperialChatObserver() {
}



int ImperialChatObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	ImperialChatObserverImplementation* _implementation = static_cast<ImperialChatObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

DistributedObjectServant* ImperialChatObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ImperialChatObserver::_getImplementationForRead() const {
	return _impl;
}

void ImperialChatObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ImperialChatObserverImplementation
 */

ImperialChatObserverImplementation::ImperialChatObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


ImperialChatObserverImplementation::~ImperialChatObserverImplementation() {
}


void ImperialChatObserverImplementation::finalize() {
}

void ImperialChatObserverImplementation::_initializeImplementation() {
	_setClassHelper(ImperialChatObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ImperialChatObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ImperialChatObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* ImperialChatObserverImplementation::_getStub() {
	return _this.get();
}

ImperialChatObserverImplementation::operator const ImperialChatObserver*() {
	return _this.get();
}

void ImperialChatObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ImperialChatObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ImperialChatObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ImperialChatObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ImperialChatObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ImperialChatObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ImperialChatObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ImperialChatObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("ImperialChatObserver");

}

void ImperialChatObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ImperialChatObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ImperialChatObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void ImperialChatObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ImperialChatObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ImperialChatObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count;
}

ImperialChatObserverImplementation::ImperialChatObserverImplementation() : ObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/gcw/observers/ImperialChatObserver.idl():  		Logger.setLoggingName("ImperialChatObserver");
	Logger::setLoggingName("ImperialChatObserver");
}

/*
 *	ImperialChatObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ImperialChatObserverAdapter::ImperialChatObserverAdapter(ImperialChatObserver* obj) : ObserverAdapter(obj) {
}

void ImperialChatObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

/*
 *	ImperialChatObserverHelper
 */

ImperialChatObserverHelper* ImperialChatObserverHelper::staticInitializer = ImperialChatObserverHelper::instance();

ImperialChatObserverHelper::ImperialChatObserverHelper() {
	className = "ImperialChatObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void ImperialChatObserverHelper::finalizeHelper() {
	ImperialChatObserverHelper::finalize();
}

DistributedObject* ImperialChatObserverHelper::instantiateObject() {
	return new ImperialChatObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* ImperialChatObserverHelper::instantiateServant() {
	return new ImperialChatObserverImplementation();
}

DistributedObjectPOD* ImperialChatObserverHelper::instantiatePOD() {
	return new ImperialChatObserverPOD();
}

DistributedObjectAdapter* ImperialChatObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ImperialChatObserverAdapter(static_cast<ImperialChatObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ImperialChatObserverPOD
 */

ImperialChatObserverPOD::~ImperialChatObserverPOD() {
}

ImperialChatObserverPOD::ImperialChatObserverPOD(void) {
	_className = "ImperialChatObserver";
}


void ImperialChatObserverPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ImperialChatObserverPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ImperialChatObserverPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count;
}

bool ImperialChatObserverPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void ImperialChatObserverPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ImperialChatObserverPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ImperialChatObserverPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);


}

