/*
 *	autogen/server/zone/managers/gcw/observers/ImperialChatObserver.h generated by engine3 IDL compiler 0.70
 */

#ifndef IMPERIALCHATOBSERVER_H_
#define IMPERIALCHATOBSERVER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedObject.h"

#include "engine/util/Observer.h"

#include "engine/util/Observable.h"

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace observers {

class ImperialChatObserver : public Observer {
public:
	ImperialChatObserver();

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ImperialChatObserver(DummyConstructorParameter* param);

	virtual ~ImperialChatObserver();

	friend class ImperialChatObserverHelper;
};

} // namespace observers
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::observers;

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace observers {

class ImperialChatObserverImplementation : public ObserverImplementation, public Logger {

public:
	ImperialChatObserverImplementation();

	ImperialChatObserverImplementation(DummyConstructorParameter* param);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	WeakReference<ImperialChatObserver*> _this;

	operator const ImperialChatObserver*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ImperialChatObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ImperialChatObserver;
};

class ImperialChatObserverAdapter : public ObserverAdapter {
public:
	ImperialChatObserverAdapter(ImperialChatObserver* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class ImperialChatObserverHelper : public DistributedObjectClassHelper, public Singleton<ImperialChatObserverHelper> {
	static ImperialChatObserverHelper* staticInitializer;

public:
	ImperialChatObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ImperialChatObserverHelper>;
};

} // namespace observers
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::observers;

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace observers {

class ImperialChatObserverPOD : public ObserverPOD {
public:

	ImperialChatObserverPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ImperialChatObserverPOD();

};

} // namespace observers
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::observers;

#endif /*IMPERIALCHATOBSERVERPOD_H_*/
