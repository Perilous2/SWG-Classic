/*
 *	autogen/server/zone/managers/gcw/sessions/WildContrabandScanSession.h generated by engine3 IDL compiler 0.70
 */

#ifndef WILDCONTRABANDSCANSESSION_H_
#define WILDCONTRABANDSCANSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class Zone;

class ZonePOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

class AiAgentPOD;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

#include "engine/util/u3d/Vector3.h"

#include "engine/util/Facade.h"

#include "engine/core/Task.h"

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace sessions {

class WildContrabandScanSession : public Facade {
public:
	WildContrabandScanSession(CreatureObject* player, int winningFactionDifficultyScaling);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void runWildContrabandScan();

	bool scanPrerequisitesMet(CreatureObject* player);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	WildContrabandScanSession(DummyConstructorParameter* param);

	virtual ~WildContrabandScanSession();

	friend class WildContrabandScanSessionHelper;
};

} // namespace sessions
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::sessions;

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace sessions {

class WildContrabandScanSessionImplementation : public FacadeImplementation {
	static const int CONTRABANDSCANCOOLDOWN = 90000;

	static const int TASKDELAY = 1000;

	static const int SCANTIME = 10;

	static const int LANDING = 0;

	static const int HEADTOPLAYER = 1;

	static const int CLOSINGIN = 2;

	static const int INITIATESCAN = 3;

	static const int SCANDELAY = 4;

	static const int INCOMBAT = 5;

	static const int TAKEOFF = 6;

	static const int TAKINGOFF = 7;

	static const int FINISHED = 8;

	int scanState;

	int timeLeft;

	int currentWinningFactionDifficultyScaling;

	ManagedWeakReference<CreatureObject* > weakPlayer;

	ManagedReference<AiAgent* > weakDroid;

	Reference<Task* > wildContrabandScanTask;

	Vector3 landingCoordinates;

public:
	WildContrabandScanSessionImplementation(CreatureObject* player, int winningFactionDifficultyScaling);

	WildContrabandScanSessionImplementation(DummyConstructorParameter* param);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void runWildContrabandScan();

	bool scanPrerequisitesMet(CreatureObject* player);

private:
	void landProbeDroid(Zone* zone, CreatureObject* player);

	Vector3 getLandingCoordinates(Zone* zone, CreatureObject* player, Vector3& playerPos);

	void sendSystemMessage(CreatureObject* player, const String& messageName);

	AiAgent* getDroid();

public:
	WeakReference<WildContrabandScanSession*> _this;

	operator const WildContrabandScanSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~WildContrabandScanSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class WildContrabandScanSession;
};

class WildContrabandScanSessionAdapter : public FacadeAdapter {
public:
	WildContrabandScanSessionAdapter(WildContrabandScanSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void runWildContrabandScan();

	bool scanPrerequisitesMet(CreatureObject* player);

};

class WildContrabandScanSessionHelper : public DistributedObjectClassHelper, public Singleton<WildContrabandScanSessionHelper> {
	static WildContrabandScanSessionHelper* staticInitializer;

public:
	WildContrabandScanSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WildContrabandScanSessionHelper>;
};

} // namespace sessions
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::sessions;

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace sessions {

class WildContrabandScanSessionPOD : public FacadePOD {
public:
	Optional<int> scanState;

	Optional<int> timeLeft;

	Optional<Vector3> landingCoordinates;

	String _className;
	WildContrabandScanSessionPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~WildContrabandScanSessionPOD();

};

} // namespace sessions
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::sessions;

#endif /*WILDCONTRABANDSCANSESSIONPOD_H_*/
