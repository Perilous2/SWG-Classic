/*
 *	autogen/server/zone/managers/gcw/sessions/ContrabandScanSession.h generated by engine3 IDL compiler 0.70
 */

#ifndef CONTRABANDSCANSESSION_H_
#define CONTRABANDSCANSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class Zone;

class ZonePOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

class AiAgentPOD;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

#include "engine/util/Facade.h"

#include "engine/core/Task.h"

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace sessions {

class ContrabandScanSession : public Facade {
public:
	ContrabandScanSession(AiAgent* scanner, CreatureObject* player, int winningFaction, int winningFactionDifficultyScaling, bool enforced);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void runContrabandScan();

	bool scanPrerequisitesMet(AiAgent* scanner, CreatureObject* player);

	void adjustReinforcementStrength(AiAgent* scanner);

	void setAcceptFineAnswer(bool acceptFine);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ContrabandScanSession(DummyConstructorParameter* param);

	virtual ~ContrabandScanSession();

	friend class ContrabandScanSessionHelper;
};

} // namespace sessions
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::sessions;

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace sessions {

class ContrabandScanSessionImplementation : public FacadeImplementation {
	static const int SCANINITIATECHANCE = 12;

	static const int TASKDELAY = 2000;

	static const int IMMEDIATELY = 1;

	static const int SCANTIME = 10;

	static const int TIMETORETURNFORSCAN = 10;

	static const int RECOGNIZEDFACTIONRANK = 9;

	static const int BASEFACTIONDETECTIONCHANCE = 10;

	static const int RANKDETECTIONCHANCEMODIFIER = 3;

	static const int JEDIMINDTRICKSUCCESSCHANCEBASE = 80;

	static const int WAITFORPAYFINEANSWERTIMEOUT = 60;

	static const int SMUGGLERAVOIDSCANCHANCE = 80;

	static const int JEDIAVOIDDETECTIONBASECHANCE = 80;

	static const int JEDIREINFORCEMENTDIFFICULTY = 2;

	static const int SCANCHANCE = 0;

	static const int INITIATESCAN = 1;

	static const int AVOIDINGSCAN = 2;

	static const int JEDIMINDTRICKPLAYERCHAT = 3;

	static const int JEDIMINDTRICKSCANNERTHINK = 4;

	static const int JEDIMINDTRICKSCANNERCHAT = 5;

	static const int JEDIDETECT = 6;

	static const int FACTIONRANKCHECK = 7;

	static const int SCANDELAY = 8;

	static const int WAITFORPAYFINEANSWER = 9;

	static const int FINISHED = 10;

	int scanState;

	int previousScanState;

	int timeLeft;

	int previousTimeLeft;

	int currentWinningFaction;

	int currentWinningFactionDifficultyScaling;

	bool enforcedScan;

	int scannerFaction;

	bool alreadyTriedToAvoidScan;

	bool acceptedFine;

	bool fineAnswerGiven;

	int fineToPay;

	bool smugglerAvoidedScan;

protected:
	ManagedWeakReference<CreatureObject* > weakPlayer;

	ManagedWeakReference<AiAgent* > weakScanner;

	Reference<Task* > contrabandScanTask;

public:
	ContrabandScanSessionImplementation(AiAgent* scanner, CreatureObject* player, int winningFaction, int winningFactionDifficultyScaling, bool enforced);

	ContrabandScanSessionImplementation(DummyConstructorParameter* param);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void runContrabandScan();

	bool scanPrerequisitesMet(AiAgent* scanner, CreatureObject* player);

	void adjustReinforcementStrength(AiAgent* scanner);

	void setAcceptFineAnswer(bool acceptFine);

private:
	String getFactionStringId(CreatureObject* player, const String& imperial, const String& rebel);

	void sendScannerChatMessage(Zone* zone, AiAgent* scanner, CreatureObject* player, const String& imperial, const String& rebel);

	void sendBarkChatMessage(AiAgent* scanner, CreatureObject* player);

	void sendStormtrooperMessage(AiAgent* scanner, const String& message);

	void sendPersonalizedScannerChatMessage(Zone* zone, AiAgent* scanner, CreatureObject* player, const String& imperial, const String& rebel);

	void sendSystemMessage(AiAgent* scanner, CreatureObject* player, const String& imperial, const String& rebel);

	String dependingOnJediSkills(CreatureObject* player, const String& novice, const String& lightSide, const String& darkSide);

	bool playerTriesToAvoidScan(AiAgent* scanner, CreatureObject* player);

	void scannerRequestsPlayerToReturn(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void checkIfPlayerShouldBeScanned(CreatureObject* player, AiAgent* scanner);

	void initiateScan(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void checkPlayerFactionRank(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void performJediMindTrick(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void reactOnJediMindTrick(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void jediMindTrickResult(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void jediDetect(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void performScan(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void checkIfPlayerHasReturned(Zone* zone, AiAgent* scanner, CreatureObject* player);

	bool isDarkJedi(CreatureObject* player);

	unsigned int jediMindTrickSuccessChance(CreatureObject* player);

	unsigned int jediAvoidDetectionSuccessChance(CreatureObject* player);

	void addCrackdownTef(CreatureObject* player);

	void sendContrabandFineSuiWindow(Zone* zone, AiAgent* scanner, CreatureObject* player, int numberOfContrabandItems);

	void waitForPayFineAnswer(Zone* zone, AiAgent* scanner, CreatureObject* player);

	void removeFineSuiWindow(CreatureObject* player);

	void calculateSmugglingSuccess(CreatureObject* player);

	int getSmugglerAvoidanceChance(CreatureObject* creature);

	void callInLambdaShuttle(AiAgent* scanner, CreatureObject* player, int difficulty, const String& landingMessage);

public:
	WeakReference<ContrabandScanSession*> _this;

	operator const ContrabandScanSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ContrabandScanSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ContrabandScanSession;
};

class ContrabandScanSessionAdapter : public FacadeAdapter {
public:
	ContrabandScanSessionAdapter(ContrabandScanSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void runContrabandScan();

	bool scanPrerequisitesMet(AiAgent* scanner, CreatureObject* player);

	void adjustReinforcementStrength(AiAgent* scanner);

	void setAcceptFineAnswer(bool acceptFine);

};

class ContrabandScanSessionHelper : public DistributedObjectClassHelper, public Singleton<ContrabandScanSessionHelper> {
	static ContrabandScanSessionHelper* staticInitializer;

public:
	ContrabandScanSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ContrabandScanSessionHelper>;
};

} // namespace sessions
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::sessions;

namespace server {
namespace zone {
namespace managers {
namespace gcw {
namespace sessions {

class ContrabandScanSessionPOD : public FacadePOD {
public:
	Optional<int> scanState;

	Optional<int> previousScanState;

	Optional<int> timeLeft;

	Optional<int> previousTimeLeft;

	Optional<bool> enforcedScan;

	Optional<bool> alreadyTriedToAvoidScan;

	Optional<bool> acceptedFine;

	Optional<bool> fineAnswerGiven;

	Optional<int> fineToPay;

	Optional<bool> smugglerAvoidedScan;

	String _className;
	ContrabandScanSessionPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ContrabandScanSessionPOD();

};

} // namespace sessions
} // namespace gcw
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::gcw::sessions;

#endif /*CONTRABANDSCANSESSIONPOD_H_*/
