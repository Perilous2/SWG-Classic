/*
 *	autogen/server/zone/managers/gcw/sessions/WildContrabandScanSession.cpp generated by engine3 IDL compiler 0.70
 */

#include "WildContrabandScanSession.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

/*
 *	WildContrabandScanSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 1375124193,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_RUNWILDCONTRABANDSCAN__,RPC_SCANPREREQUISITESMET__CREATUREOBJECT_,};

WildContrabandScanSession::WildContrabandScanSession(CreatureObject* player, int winningFactionDifficultyScaling) : Facade(DummyConstructorParameter::instance()) {
	WildContrabandScanSessionImplementation* _implementation = new WildContrabandScanSessionImplementation(player, winningFactionDifficultyScaling);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("WildContrabandScanSession");
}

WildContrabandScanSession::WildContrabandScanSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("WildContrabandScanSession");
}

WildContrabandScanSession::~WildContrabandScanSession() {
}



int WildContrabandScanSession::initializeSession() {
	WildContrabandScanSessionImplementation* _implementation = static_cast<WildContrabandScanSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->initializeSession();
	}
}

int WildContrabandScanSession::cancelSession() {
	WildContrabandScanSessionImplementation* _implementation = static_cast<WildContrabandScanSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->cancelSession();
	}
}

int WildContrabandScanSession::clearSession() {
	WildContrabandScanSessionImplementation* _implementation = static_cast<WildContrabandScanSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->clearSession();
	}
}

void WildContrabandScanSession::runWildContrabandScan() {
	WildContrabandScanSessionImplementation* _implementation = static_cast<WildContrabandScanSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RUNWILDCONTRABANDSCAN__);

		method.executeWithVoidReturn();
	} else {
		_implementation->runWildContrabandScan();
	}
}

bool WildContrabandScanSession::scanPrerequisitesMet(CreatureObject* player) {
	WildContrabandScanSessionImplementation* _implementation = static_cast<WildContrabandScanSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SCANPREREQUISITESMET__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->scanPrerequisitesMet(player);
	}
}

DistributedObjectServant* WildContrabandScanSession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* WildContrabandScanSession::_getImplementationForRead() const {
	return _impl;
}

void WildContrabandScanSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	WildContrabandScanSessionImplementation
 */

WildContrabandScanSessionImplementation::WildContrabandScanSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


WildContrabandScanSessionImplementation::~WildContrabandScanSessionImplementation() {
}


void WildContrabandScanSessionImplementation::finalize() {
}

void WildContrabandScanSessionImplementation::_initializeImplementation() {
	_setClassHelper(WildContrabandScanSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void WildContrabandScanSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<WildContrabandScanSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* WildContrabandScanSessionImplementation::_getStub() {
	return _this.get();
}

WildContrabandScanSessionImplementation::operator const WildContrabandScanSession*() {
	return _this.get();
}

void WildContrabandScanSessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void WildContrabandScanSessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void WildContrabandScanSessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void WildContrabandScanSessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void WildContrabandScanSessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void WildContrabandScanSessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void WildContrabandScanSessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void WildContrabandScanSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("WildContrabandScanSession");

}

void WildContrabandScanSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WildContrabandScanSessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool WildContrabandScanSessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x11f22ea4: //WildContrabandScanSession.scanState
		TypeInfo<int >::parseFromBinaryStream(&scanState, stream);
		return true;

	case 0x31d6efd3: //WildContrabandScanSession.timeLeft
		TypeInfo<int >::parseFromBinaryStream(&timeLeft, stream);
		return true;

	case 0x5709340f: //WildContrabandScanSession.landingCoordinates
		TypeInfo<Vector3 >::parseFromBinaryStream(&landingCoordinates, stream);
		return true;

	}

	return false;
}

void WildContrabandScanSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WildContrabandScanSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WildContrabandScanSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x11f22ea4; //WildContrabandScanSession.scanState
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&scanState, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x31d6efd3; //WildContrabandScanSession.timeLeft
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&timeLeft, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x5709340f; //WildContrabandScanSession.landingCoordinates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector3 >::toBinaryStream(&landingCoordinates, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

WildContrabandScanSessionImplementation::WildContrabandScanSessionImplementation(CreatureObject* player, int winningFactionDifficultyScaling) {
	_initializeImplementation();
	// server/zone/managers/gcw/sessions/WildContrabandScanSession.idl():  		Logger.setLoggingName("WildContrabandScanSession");
	Logger::setLoggingName("WildContrabandScanSession");
	// server/zone/managers/gcw/sessions/WildContrabandScanSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/gcw/sessions/WildContrabandScanSession.idl():  		weakPlayer = player;
	weakPlayer = player;
	// server/zone/managers/gcw/sessions/WildContrabandScanSession.idl():  		scanState = LANDING;
	scanState = LANDING;
	// server/zone/managers/gcw/sessions/WildContrabandScanSession.idl():  		timeLeft = 0;
	timeLeft = 0;
	// server/zone/managers/gcw/sessions/WildContrabandScanSession.idl():  		currentWinningFactionDifficultyScaling = winningFactionDifficultyScaling;
	currentWinningFactionDifficultyScaling = winningFactionDifficultyScaling;
}

/*
 *	WildContrabandScanSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


WildContrabandScanSessionAdapter::WildContrabandScanSessionAdapter(WildContrabandScanSession* obj) : FacadeAdapter(obj) {
}

void WildContrabandScanSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			
			int _m_res = initializeSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CANCELSESSION__:
		{
			
			int _m_res = cancelSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CLEARSESSION__:
		{
			
			int _m_res = clearSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_RUNWILDCONTRABANDSCAN__:
		{
			
			runWildContrabandScan();
			
		}
		break;
	case RPC_SCANPREREQUISITESMET__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = scanPrerequisitesMet(player);
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		FacadeAdapter::invokeMethod(methid, inv);
	}
}

int WildContrabandScanSessionAdapter::initializeSession() {
	return (static_cast<WildContrabandScanSession*>(stub))->initializeSession();
}

int WildContrabandScanSessionAdapter::cancelSession() {
	return (static_cast<WildContrabandScanSession*>(stub))->cancelSession();
}

int WildContrabandScanSessionAdapter::clearSession() {
	return (static_cast<WildContrabandScanSession*>(stub))->clearSession();
}

void WildContrabandScanSessionAdapter::runWildContrabandScan() {
	(static_cast<WildContrabandScanSession*>(stub))->runWildContrabandScan();
}

bool WildContrabandScanSessionAdapter::scanPrerequisitesMet(CreatureObject* player) {
	return (static_cast<WildContrabandScanSession*>(stub))->scanPrerequisitesMet(player);
}

/*
 *	WildContrabandScanSessionHelper
 */

WildContrabandScanSessionHelper* WildContrabandScanSessionHelper::staticInitializer = WildContrabandScanSessionHelper::instance();

WildContrabandScanSessionHelper::WildContrabandScanSessionHelper() {
	className = "WildContrabandScanSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void WildContrabandScanSessionHelper::finalizeHelper() {
	WildContrabandScanSessionHelper::finalize();
}

DistributedObject* WildContrabandScanSessionHelper::instantiateObject() {
	return new WildContrabandScanSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* WildContrabandScanSessionHelper::instantiateServant() {
	return new WildContrabandScanSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* WildContrabandScanSessionHelper::instantiatePOD() {
	return new WildContrabandScanSessionPOD();
}

DistributedObjectAdapter* WildContrabandScanSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WildContrabandScanSessionAdapter(static_cast<WildContrabandScanSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	WildContrabandScanSessionPOD
 */

WildContrabandScanSessionPOD::~WildContrabandScanSessionPOD() {
}

WildContrabandScanSessionPOD::WildContrabandScanSessionPOD(void) {
	_className = "WildContrabandScanSession";
}


void WildContrabandScanSessionPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WildContrabandScanSessionPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WildContrabandScanSessionPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadePOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (scanState) {
	_nameHashCode = 0x11f22ea4; //WildContrabandScanSession.scanState
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&scanState.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (timeLeft) {
	_nameHashCode = 0x31d6efd3; //WildContrabandScanSession.timeLeft
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&timeLeft.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (landingCoordinates) {
	_nameHashCode = 0x5709340f; //WildContrabandScanSession.landingCoordinates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector3 >::toBinaryStream(&landingCoordinates.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool WildContrabandScanSessionPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadePOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x11f22ea4: //WildContrabandScanSession.scanState
		{
			int _mnscanState;
			TypeInfo<int >::parseFromBinaryStream(&_mnscanState, stream);
			scanState = std::move(_mnscanState);
		}
		return true;

	case 0x31d6efd3: //WildContrabandScanSession.timeLeft
		{
			int _mntimeLeft;
			TypeInfo<int >::parseFromBinaryStream(&_mntimeLeft, stream);
			timeLeft = std::move(_mntimeLeft);
		}
		return true;

	case 0x5709340f: //WildContrabandScanSession.landingCoordinates
		{
			Vector3 _mnlandingCoordinates;
			TypeInfo<Vector3 >::parseFromBinaryStream(&_mnlandingCoordinates, stream);
			landingCoordinates = std::move(_mnlandingCoordinates);
		}
		return true;

	}

	return false;
}

void WildContrabandScanSessionPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WildContrabandScanSessionPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void WildContrabandScanSessionPOD::writeObjectCompact(ObjectOutputStream* stream) {
	FacadePOD::writeObjectCompact(stream);

	TypeInfo<int >::toBinaryStream(&scanState.value(), stream);

	TypeInfo<int >::toBinaryStream(&timeLeft.value(), stream);

	TypeInfo<Vector3 >::toBinaryStream(&landingCoordinates.value(), stream);


}

