/*
 *	autogen/server/zone/managers/minigames/FishingManager.cpp generated by engine3 IDL compiler 0.70
 */

#include "FishingManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/fishing/FishingPoleObject.h"

#include "server/zone/objects/tangible/fishing/FishingBaitObject.h"

#include "server/zone/managers/minigames/events/FishingEvent.h"

/*
 *	FishingManagerStub
 */

enum {RPC_INITIALIZE__ = 936445983,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_CHECKFISHINGONPOSITIONUPDATE__CREATUREOBJECT_,RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_SCENEOBJECT_,RPC_STARTFISHING__CREATUREOBJECT_,RPC_STOPFISHING__CREATUREOBJECT_INT_BOOL_,RPC_FISHINGSTEP__CREATUREOBJECT_,RPC_SUCCESS__CREATUREOBJECT_INT_SCENEOBJECT_INT_,RPC_GETTIME__,RPC_SENDREWARD__CREATUREOBJECT_SCENEOBJECT_SCENEOBJECT_,RPC_CREATEWINDOW__CREATUREOBJECT_INT_,RPC_CLOSEMENU__CREATUREOBJECT_INT_,RPC_VEGETATION__SCENEOBJECT_,RPC_DENSITY__SCENEOBJECT_,RPC_GETFISH__CREATUREOBJECT_SCENEOBJECT_,RPC_GETNEXTACTION__CREATUREOBJECT_,RPC_SETNEXTACTION__CREATUREOBJECT_INT_,RPC_GETPOLE__CREATUREOBJECT_,RPC_GETBAIT__CREATUREOBJECT_,RPC_GETFISHBOXID__CREATUREOBJECT_,RPC_SETFISHBOXID__CREATUREOBJECT_INT_,RPC_GETFISHINGSTATE__CREATUREOBJECT_,RPC_SETFISHINGSTATE__CREATUREOBJECT_INT_,RPC_GETFISHMARKER__CREATUREOBJECT_,RPC_SETFISHMARKER__CREATUREOBJECT_SCENEOBJECT_,RPC_FREEBAIT__CREATUREOBJECT_,RPC_FISHINGPROCEED__CREATUREOBJECT_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_,RPC_MISHAPEVENT__STRING_CREATUREOBJECT_SCENEOBJECT_INT_BOOL_STRING_,RPC_LOSEBAIT__CREATUREOBJECT_,RPC_ANIMATE__CREATUREOBJECT_INT_,RPC_CREATEMARKER__VECTOR3_ZONE_,RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_CREATUREOBJECT_,RPC_ISPLAYING__CREATUREOBJECT_,RPC_UPDATEMARKER__CREATUREOBJECT_SCENEOBJECT_INT_BOOL_,RPC_REMOVEMARKER__CREATUREOBJECT_SCENEOBJECT_,RPC_REMOVESPLASH__SCENEOBJECT_,RPC_CREATEFISHINGSPLASHEVENT__CREATUREOBJECT_SCENEOBJECT_,RPC_STOPFISHINGEVENT__CREATUREOBJECT_,RPC_GETPROPERTYSTRING__INT_};

FishingManager::FishingManager() : Observer(DummyConstructorParameter::instance()) {
	FishingManagerImplementation* _implementation = new FishingManagerImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FishingManager");
}

FishingManager::FishingManager(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("FishingManager");
}

FishingManager::~FishingManager() {
}



void FishingManager::initialize() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

int FishingManager::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

void FishingManager::checkFishingOnPositionUpdate(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKFISHINGONPOSITIONUPDATE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->checkFishingOnPositionUpdate(player);
	}
}

int FishingManager::notifyCloseContainer(CreatureObject* player, SceneObject* container) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(container);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyCloseContainer(player, container);
	}
}

int FishingManager::checkLocation(CreatureObject* player, int quality, Vector3& location) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->checkLocation(player, quality, location);
	}
}

int FishingManager::startFishing(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTFISHING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->startFishing(player);
	}
}

void FishingManager::stopFishing(CreatureObject* player, unsigned int boxID, bool rem) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPFISHING__CREATUREOBJECT_INT_BOOL_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(rem);

		method.executeWithVoidReturn();
	} else {
		_implementation->stopFishing(player, boxID, rem);
	}
}

void FishingManager::fishingStep(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FISHINGSTEP__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->fishingStep(player);
	}
}

void FishingManager::success(CreatureObject* player, int fish, SceneObject* marker, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUCCESS__CREATUREOBJECT_INT_SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(fish);
		method.addObjectParameter(marker);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else {
		_implementation->success(player, fish, marker, boxID);
	}
}

String FishingManager::getTime() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIME__);

		String _return_getTime;
		method.executeWithAsciiReturn(_return_getTime);
		return _return_getTime;
	} else {
		return _implementation->getTime();
	}
}

void FishingManager::sendReward(CreatureObject* player, SceneObject* marker, SceneObject* loot) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDREWARD__CREATUREOBJECT_SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addObjectParameter(loot);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendReward(player, marker, loot);
	}
}

unsigned int FishingManager::createWindow(CreatureObject* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEWINDOW__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->createWindow(player, boxID);
	}
}

void FishingManager::closeMenu(CreatureObject* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSEMENU__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else {
		_implementation->closeMenu(player, boxID);
	}
}

int FishingManager::vegetation(SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VEGETATION__SCENEOBJECT_);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->vegetation(marker);
	}
}

int FishingManager::density(SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DENSITY__SCENEOBJECT_);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->density(marker);
	}
}

int FishingManager::getFish(CreatureObject* player, SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISH__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFish(player, marker);
	}
}

int FishingManager::getNextAction(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTACTION__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getNextAction(player);
	}
}

void FishingManager::setNextAction(CreatureObject* player, int next) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNEXTACTION__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(next);

		method.executeWithVoidReturn();
	} else {
		_implementation->setNextAction(player, next);
	}
}

FishingPoleObject* FishingManager::getPole(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOLE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<FishingPoleObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPole(player);
	}
}

FishingBaitObject* FishingManager::getBait(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBAIT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<FishingBaitObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getBait(player);
	}
}

unsigned int FishingManager::getFishBoxID(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHBOXID__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getFishBoxID(player);
	}
}

void FishingManager::setFishBoxID(CreatureObject* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHBOXID__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFishBoxID(player, boxID);
	}
}

int FishingManager::getFishingState(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHINGSTATE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFishingState(player);
	}
}

void FishingManager::setFishingState(CreatureObject* player, int state) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHINGSTATE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFishingState(player, state);
	}
}

SceneObject* FishingManager::getFishMarker(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHMARKER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getFishMarker(player);
	}
}

void FishingManager::setFishMarker(CreatureObject* player, SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHMARKER__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFishMarker(player, marker);
	}
}

void FishingManager::freeBait(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FREEBAIT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->freeBait(player);
	}
}

void FishingManager::fishingProceed(CreatureObject* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient, String& moodString) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FISHINGPROCEED__CREATUREOBJECT_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(marker);
		method.addSignedIntParameter(fish);
		method.addUnsignedIntParameter(boxID);
		method.addSignedIntParameter(newstate);
		method.addBooleanParameter(notifyClient);
		method.addAsciiParameter(moodString);

		method.executeWithVoidReturn();
	} else {
		_implementation->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
	}
}

void FishingManager::mishapEvent(const String& text, CreatureObject* player, SceneObject* marker, unsigned int boxID, bool losebait, String& moodString) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MISHAPEVENT__STRING_CREATUREOBJECT_SCENEOBJECT_INT_BOOL_STRING_);
		method.addAsciiParameter(text);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(losebait);
		method.addAsciiParameter(moodString);

		method.executeWithVoidReturn();
	} else {
		_implementation->mishapEvent(text, player, marker, boxID, losebait, moodString);
	}
}

bool FishingManager::loseBait(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOSEBAIT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->loseBait(player);
	}
}

void FishingManager::animate(CreatureObject* player, int nextAction) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ANIMATE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);

		method.executeWithVoidReturn();
	} else {
		_implementation->animate(player, nextAction);
	}
}

SceneObject* FishingManager::createMarker(Vector3& location, Zone* zone) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEMARKER__VECTOR3_ZONE_);
		method.addDereferencedSerializableParameter(location);
		method.addObjectParameter(zone);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->createMarker(location, zone);
	}
}

void FishingManager::createSplash(float x, float y, float z, Zone* zone, CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_CREATUREOBJECT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->createSplash(x, y, z, zone, player);
	}
}

bool FishingManager::checkUpdateMarker(CreatureObject* player, Vector3& location) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->checkUpdateMarker(player, location);
	}
}

bool FishingManager::isPlaying(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlaying(player);
	}
}

SceneObject* FishingManager::updateMarker(CreatureObject* player, SceneObject* marker, unsigned int boxID, bool notifyPlayer) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEMARKER__CREATUREOBJECT_SCENEOBJECT_INT_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(notifyPlayer);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->updateMarker(player, marker, boxID, notifyPlayer);
	}
}

void FishingManager::removeMarker(CreatureObject* player, SceneObject* container) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMARKER__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeMarker(player, container);
	}
}

void FishingManager::removeSplash(SceneObject* splash) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPLASH__SCENEOBJECT_);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSplash(splash);
	}
}

void FishingManager::createFishingSplashEvent(CreatureObject* player, SceneObject* splash) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEFISHINGSPLASHEVENT__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else {
		_implementation->createFishingSplashEvent(player, splash);
	}
}

void FishingManager::createFishingSession(CreatureObject* player, FishingEvent* event, SceneObject* marker, int nextAction, int fish, unsigned int boxID, int fishingState, String& mood) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->createFishingSession(player, event, marker, nextAction, fish, boxID, fishingState, mood);
	}
}

FishingEvent* FishingManager::createFishingEvent(CreatureObject* player, int state) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->createFishingEvent(player, state);
	}
}

void FishingManager::stopFishingEvent(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPFISHINGEVENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->stopFishingEvent(player);
	}
}

FishingEvent* FishingManager::getFishingEvent(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getFishingEvent(player);
	}
}

String FishingManager::getPropertyString(int amount) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPROPERTYSTRING__INT_);
		method.addSignedIntParameter(amount);

		String _return_getPropertyString;
		method.executeWithAsciiReturn(_return_getPropertyString);
		return _return_getPropertyString;
	} else {
		return _implementation->getPropertyString(amount);
	}
}

DistributedObjectServant* FishingManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FishingManager::_getImplementationForRead() const {
	return _impl;
}

void FishingManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FishingManagerImplementation
 */

FishingManagerImplementation::FishingManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


FishingManagerImplementation::~FishingManagerImplementation() {
}


void FishingManagerImplementation::finalize() {
}

void FishingManagerImplementation::_initializeImplementation() {
	_setClassHelper(FishingManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FishingManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FishingManager*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* FishingManagerImplementation::_getStub() {
	return _this.get();
}

FishingManagerImplementation::operator const FishingManager*() {
	return _this.get();
}

void FishingManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FishingManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FishingManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FishingManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FishingManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FishingManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FishingManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FishingManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("FishingManager");

}

void FishingManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FishingManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FishingManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xfe7549e9: //FishingManager.fishingActions
		TypeInfo<Vector<String> >::parseFromBinaryStream(&fishingActions, stream);
		return true;

	case 0x2ade8411: //FishingManager.fishingStates
		TypeInfo<Vector<String> >::parseFromBinaryStream(&fishingStates, stream);
		return true;

	case 0x5efda278: //FishingManager.baitStatus
		TypeInfo<Vector<String> >::parseFromBinaryStream(&baitStatus, stream);
		return true;

	}

	return false;
}

void FishingManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FishingManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FishingManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xfe7549e9; //FishingManager.fishingActions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&fishingActions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x2ade8411; //FishingManager.fishingStates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&fishingStates, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x5efda278; //FishingManager.baitStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&baitStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

FishingManagerImplementation::FishingManagerImplementation() {
	_initializeImplementation();
	// server/zone/managers/minigames/FishingManager.idl():  		Logger.setLoggingName("FishingManager");
	Logger::setLoggingName("FishingManager");
	// server/zone/managers/minigames/FishingManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
}

int FishingManagerImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/managers/minigames/FishingManager.idl():  		return 
	if (eventType == ObserverEventType::POSITIONCHANGED){
	// server/zone/managers/minigames/FishingManager.idl():  			checkFishingOnPositionUpdate((CreatureObject) observable);
	checkFishingOnPositionUpdate(dynamic_cast<CreatureObject*>(observable));
	// server/zone/managers/minigames/FishingManager.idl():  			return 0;
	return 0;
}

	else 	// server/zone/managers/minigames/FishingManager.idl():  		return 
	if (eventType == ObserverEventType::CLOSECONTAINER){
	// server/zone/managers/minigames/FishingManager.idl():  			return notifyCloseContainer((CreatureObject)arg1, (SceneObject)observable);
	return notifyCloseContainer(dynamic_cast<CreatureObject*>(arg1), dynamic_cast<SceneObject*>(observable));
}
	// server/zone/managers/minigames/FishingManager.idl():  		return 0;
	return 0;
}

/*
 *	FishingManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FishingManagerAdapter::FishingManagerAdapter(FishingManager* obj) : ObserverAdapter(obj) {
}

void FishingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CHECKFISHINGONPOSITIONUPDATE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			checkFishingOnPositionUpdate(player);
			
		}
		break;
	case RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* container = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = notifyCloseContainer(player, container);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_STARTFISHING__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = startFishing(player);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_STOPFISHING__CREATUREOBJECT_INT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			bool rem = inv->getBooleanParameter();
			
			stopFishing(player, boxID, rem);
			
		}
		break;
	case RPC_FISHINGSTEP__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			fishingStep(player);
			
		}
		break;
	case RPC_SUCCESS__CREATUREOBJECT_INT_SCENEOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int fish = inv->getSignedIntParameter();
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			
			success(player, fish, marker, boxID);
			
		}
		break;
	case RPC_GETTIME__:
		{
			
			String _m_res = getTime();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SENDREWARD__CREATUREOBJECT_SCENEOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			SceneObject* loot = static_cast<SceneObject*>(inv->getObjectParameter());
			
			sendReward(player, marker, loot);
			
		}
		break;
	case RPC_CREATEWINDOW__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			
			unsigned int _m_res = createWindow(player, boxID);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_CLOSEMENU__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			
			closeMenu(player, boxID);
			
		}
		break;
	case RPC_VEGETATION__SCENEOBJECT_:
		{
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = vegetation(marker);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_DENSITY__SCENEOBJECT_:
		{
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = density(marker);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFISH__CREATUREOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			
			int _m_res = getFish(player, marker);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETNEXTACTION__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = getNextAction(player);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETNEXTACTION__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int next = inv->getSignedIntParameter();
			
			setNextAction(player, next);
			
		}
		break;
	case RPC_GETPOLE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = getPole(player);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETBAIT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = getBait(player);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETFISHBOXID__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			unsigned int _m_res = getFishBoxID(player);
			resp->insertInt(_m_res);
		}
		break;
	case RPC_SETFISHBOXID__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			
			setFishBoxID(player, boxID);
			
		}
		break;
	case RPC_GETFISHINGSTATE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = getFishingState(player);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETFISHINGSTATE__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int state = inv->getSignedIntParameter();
			
			setFishingState(player, state);
			
		}
		break;
	case RPC_GETFISHMARKER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = getFishMarker(player);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETFISHMARKER__CREATUREOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			
			setFishMarker(player, marker);
			
		}
		break;
	case RPC_FREEBAIT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			freeBait(player);
			
		}
		break;
	case RPC_FISHINGPROCEED__CREATUREOBJECT_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int nextAction = inv->getSignedIntParameter();
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			int fish = inv->getSignedIntParameter();
			unsigned int boxID = inv->getUnsignedIntParameter();
			int newstate = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			String moodString; inv->getAsciiParameter(moodString);
			
			fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
			
		}
		break;
	case RPC_MISHAPEVENT__STRING_CREATUREOBJECT_SCENEOBJECT_INT_BOOL_STRING_:
		{
			 String text; inv->getAsciiParameter(text);
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			bool losebait = inv->getBooleanParameter();
			String moodString; inv->getAsciiParameter(moodString);
			
			mishapEvent(text, player, marker, boxID, losebait, moodString);
			
		}
		break;
	case RPC_LOSEBAIT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = loseBait(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ANIMATE__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int nextAction = inv->getSignedIntParameter();
			
			animate(player, nextAction);
			
		}
		break;
	case RPC_CREATEMARKER__VECTOR3_ZONE_:
		{
			Vector3 location = inv->getDereferencedSerializableParameter<Vector3 >();
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			
			DistributedObject* _m_res = createMarker(location, zone);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_CREATUREOBJECT_:
		{
			float x = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			float z = inv->getFloatParameter();
			Zone* zone = static_cast<Zone*>(inv->getObjectParameter());
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			createSplash(x, y, z, zone, player);
			
		}
		break;
	case RPC_ISPLAYING__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isPlaying(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_UPDATEMARKER__CREATUREOBJECT_SCENEOBJECT_INT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* marker = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned int boxID = inv->getUnsignedIntParameter();
			bool notifyPlayer = inv->getBooleanParameter();
			
			DistributedObject* _m_res = updateMarker(player, marker, boxID, notifyPlayer);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_REMOVEMARKER__CREATUREOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* container = static_cast<SceneObject*>(inv->getObjectParameter());
			
			removeMarker(player, container);
			
		}
		break;
	case RPC_REMOVESPLASH__SCENEOBJECT_:
		{
			SceneObject* splash = static_cast<SceneObject*>(inv->getObjectParameter());
			
			removeSplash(splash);
			
		}
		break;
	case RPC_CREATEFISHINGSPLASHEVENT__CREATUREOBJECT_SCENEOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* splash = static_cast<SceneObject*>(inv->getObjectParameter());
			
			createFishingSplashEvent(player, splash);
			
		}
		break;
	case RPC_STOPFISHINGEVENT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			stopFishingEvent(player);
			
		}
		break;
	case RPC_GETPROPERTYSTRING__INT_:
		{
			int amount = inv->getSignedIntParameter();
			
			String _m_res = getPropertyString(amount);
			resp->insertAscii(_m_res);
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

void FishingManagerAdapter::initialize() {
	(static_cast<FishingManager*>(stub))->initialize();
}

int FishingManagerAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<FishingManager*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void FishingManagerAdapter::checkFishingOnPositionUpdate(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->checkFishingOnPositionUpdate(player);
}

int FishingManagerAdapter::notifyCloseContainer(CreatureObject* player, SceneObject* container) {
	return (static_cast<FishingManager*>(stub))->notifyCloseContainer(player, container);
}

int FishingManagerAdapter::startFishing(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->startFishing(player);
}

void FishingManagerAdapter::stopFishing(CreatureObject* player, unsigned int boxID, bool rem) {
	(static_cast<FishingManager*>(stub))->stopFishing(player, boxID, rem);
}

void FishingManagerAdapter::fishingStep(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->fishingStep(player);
}

void FishingManagerAdapter::success(CreatureObject* player, int fish, SceneObject* marker, unsigned int boxID) {
	(static_cast<FishingManager*>(stub))->success(player, fish, marker, boxID);
}

String FishingManagerAdapter::getTime() {
	return (static_cast<FishingManager*>(stub))->getTime();
}

void FishingManagerAdapter::sendReward(CreatureObject* player, SceneObject* marker, SceneObject* loot) {
	(static_cast<FishingManager*>(stub))->sendReward(player, marker, loot);
}

unsigned int FishingManagerAdapter::createWindow(CreatureObject* player, unsigned int boxID) {
	return (static_cast<FishingManager*>(stub))->createWindow(player, boxID);
}

void FishingManagerAdapter::closeMenu(CreatureObject* player, unsigned int boxID) {
	(static_cast<FishingManager*>(stub))->closeMenu(player, boxID);
}

int FishingManagerAdapter::vegetation(SceneObject* marker) {
	return (static_cast<FishingManager*>(stub))->vegetation(marker);
}

int FishingManagerAdapter::density(SceneObject* marker) {
	return (static_cast<FishingManager*>(stub))->density(marker);
}

int FishingManagerAdapter::getFish(CreatureObject* player, SceneObject* marker) {
	return (static_cast<FishingManager*>(stub))->getFish(player, marker);
}

int FishingManagerAdapter::getNextAction(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getNextAction(player);
}

void FishingManagerAdapter::setNextAction(CreatureObject* player, int next) {
	(static_cast<FishingManager*>(stub))->setNextAction(player, next);
}

FishingPoleObject* FishingManagerAdapter::getPole(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getPole(player);
}

FishingBaitObject* FishingManagerAdapter::getBait(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getBait(player);
}

unsigned int FishingManagerAdapter::getFishBoxID(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFishBoxID(player);
}

void FishingManagerAdapter::setFishBoxID(CreatureObject* player, unsigned int boxID) {
	(static_cast<FishingManager*>(stub))->setFishBoxID(player, boxID);
}

int FishingManagerAdapter::getFishingState(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFishingState(player);
}

void FishingManagerAdapter::setFishingState(CreatureObject* player, int state) {
	(static_cast<FishingManager*>(stub))->setFishingState(player, state);
}

SceneObject* FishingManagerAdapter::getFishMarker(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFishMarker(player);
}

void FishingManagerAdapter::setFishMarker(CreatureObject* player, SceneObject* marker) {
	(static_cast<FishingManager*>(stub))->setFishMarker(player, marker);
}

void FishingManagerAdapter::freeBait(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->freeBait(player);
}

void FishingManagerAdapter::fishingProceed(CreatureObject* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient, String& moodString) {
	(static_cast<FishingManager*>(stub))->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
}

void FishingManagerAdapter::mishapEvent(const String& text, CreatureObject* player, SceneObject* marker, unsigned int boxID, bool losebait, String& moodString) {
	(static_cast<FishingManager*>(stub))->mishapEvent(text, player, marker, boxID, losebait, moodString);
}

bool FishingManagerAdapter::loseBait(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->loseBait(player);
}

void FishingManagerAdapter::animate(CreatureObject* player, int nextAction) {
	(static_cast<FishingManager*>(stub))->animate(player, nextAction);
}

SceneObject* FishingManagerAdapter::createMarker(Vector3& location, Zone* zone) {
	return (static_cast<FishingManager*>(stub))->createMarker(location, zone);
}

void FishingManagerAdapter::createSplash(float x, float y, float z, Zone* zone, CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->createSplash(x, y, z, zone, player);
}

bool FishingManagerAdapter::isPlaying(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->isPlaying(player);
}

SceneObject* FishingManagerAdapter::updateMarker(CreatureObject* player, SceneObject* marker, unsigned int boxID, bool notifyPlayer) {
	return (static_cast<FishingManager*>(stub))->updateMarker(player, marker, boxID, notifyPlayer);
}

void FishingManagerAdapter::removeMarker(CreatureObject* player, SceneObject* container) {
	(static_cast<FishingManager*>(stub))->removeMarker(player, container);
}

void FishingManagerAdapter::removeSplash(SceneObject* splash) {
	(static_cast<FishingManager*>(stub))->removeSplash(splash);
}

void FishingManagerAdapter::createFishingSplashEvent(CreatureObject* player, SceneObject* splash) {
	(static_cast<FishingManager*>(stub))->createFishingSplashEvent(player, splash);
}

void FishingManagerAdapter::stopFishingEvent(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->stopFishingEvent(player);
}

String FishingManagerAdapter::getPropertyString(int amount) {
	return (static_cast<FishingManager*>(stub))->getPropertyString(amount);
}

/*
 *	FishingManagerHelper
 */

FishingManagerHelper* FishingManagerHelper::staticInitializer = FishingManagerHelper::instance();

FishingManagerHelper::FishingManagerHelper() {
	className = "FishingManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void FishingManagerHelper::finalizeHelper() {
	FishingManagerHelper::finalize();
}

DistributedObject* FishingManagerHelper::instantiateObject() {
	return new FishingManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* FishingManagerHelper::instantiateServant() {
	return new FishingManagerImplementation();
}

DistributedObjectPOD* FishingManagerHelper::instantiatePOD() {
	return new FishingManagerPOD();
}

DistributedObjectAdapter* FishingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FishingManagerAdapter(static_cast<FishingManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FishingManagerPOD
 */

FishingManagerPOD::~FishingManagerPOD() {
}

FishingManagerPOD::FishingManagerPOD(void) {
	_className = "FishingManager";
}


void FishingManagerPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FishingManagerPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FishingManagerPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (fishingActions) {
	_nameHashCode = 0xfe7549e9; //FishingManager.fishingActions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&fishingActions.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (fishingStates) {
	_nameHashCode = 0x2ade8411; //FishingManager.fishingStates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&fishingStates.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (baitStatus) {
	_nameHashCode = 0x5efda278; //FishingManager.baitStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&baitStatus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool FishingManagerPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xfe7549e9: //FishingManager.fishingActions
		{
			Vector<String> _mnfishingActions;
			TypeInfo<Vector<String> >::parseFromBinaryStream(&_mnfishingActions, stream);
			fishingActions = std::move(_mnfishingActions);
		}
		return true;

	case 0x2ade8411: //FishingManager.fishingStates
		{
			Vector<String> _mnfishingStates;
			TypeInfo<Vector<String> >::parseFromBinaryStream(&_mnfishingStates, stream);
			fishingStates = std::move(_mnfishingStates);
		}
		return true;

	case 0x5efda278: //FishingManager.baitStatus
		{
			Vector<String> _mnbaitStatus;
			TypeInfo<Vector<String> >::parseFromBinaryStream(&_mnbaitStatus, stream);
			baitStatus = std::move(_mnbaitStatus);
		}
		return true;

	}

	return false;
}

void FishingManagerPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FishingManagerPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void FishingManagerPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);

	TypeInfo<Vector<String> >::toBinaryStream(&fishingActions.value(), stream);

	TypeInfo<Vector<String> >::toBinaryStream(&fishingStates.value(), stream);

	TypeInfo<Vector<String> >::toBinaryStream(&baitStatus.value(), stream);


}

