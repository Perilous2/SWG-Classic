/*
 *	autogen/server/zone/managers/mission/MissionManager.h generated by engine3 IDL compiler 0.70
 */

#ifndef MISSIONMANAGER_H_
#define MISSIONMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class ZoneServer;

class ZoneServerPOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServer;

class ZoneProcessServerPOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObject;

class MissionObjectPOD;

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace mission {

class MissionTerminal;

class MissionTerminalPOD;

} // namespace mission
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::mission;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiAgent;

class AiAgentPOD;

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class CreatureManager;

class CreatureManagerPOD;

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class LairSpawn;

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {

class Zone;

class ZonePOD;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "terrain/manager/TerrainManager.h"

#include "server/zone/managers/mission/spawnmaps/MissionNpcSpawnMap.h"

#include "server/zone/managers/mission/spawnmaps/NpcSpawnPoint.h"

#include "server/zone/objects/mission/PlayerBounty.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

#include "engine/log/Logger.h"

#include "engine/util/u3d/Vector3.h"

#include "engine/util/Observer.h"

#include "system/thread/Mutex.h"

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManager : public Observer {
public:
	unsigned static const int UNKNOWN_TARGET;

	MissionManager(ZoneServer* srv, ZoneProcessServer* impl);

	void handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player);

	void handleMissionAbort(MissionObject* mission, CreatureObject* player);

	void removeMission(MissionObject* mission, CreatureObject* player);

	NpcSpawnPoint* getFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType, const float maxRange);

	NpcSpawnPoint* getFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType);

	void createSpawnPoint(CreatureObject* player, const String& spawnTypes);

	void removeSpawnPoint(CreatureObject* player, const String& spawnTypes);

	Vector3 getRandomBountyTargetPosition(CreatureObject* player, const String& planet);

	Reference<MissionObject* > getBountyHunterMission(CreatureObject* player);

	int getRealBountyReward(CreatureObject* creo, PlayerBounty* bounty);

	void addPlayerToBountyList(unsigned long long targetId, int reward);

	void removePlayerFromBountyList(unsigned long long targetId);

	void updatePlayerBountyReward(unsigned long long targetId, int reward);

	void updatePlayerBountyOnlineStatus(unsigned long long targetId, bool status);

	void completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter);

	void failPlayerBountyMission(unsigned long long bountyHunter, unsigned long long targetID);

	bool hasPlayerBountyTargetInList(unsigned long long targetId);

	bool hasBountyHunterInPlayerBounty(unsigned long long targetId, unsigned long long bhId);

	Vector<unsigned long long> getHuntersHuntingTarget(unsigned long long targetId);

	void allocateMissionNpcs(NpcSpawnPoint* target, NpcSpawnPoint* destination, Zone* zone, CreatureManager* creatureManager);

	void freeMissionNpc(AiAgent* npc);

	void despawnMissionNpc(NpcSpawnPoint* npc);

	void deactivateMissions(CreatureObject* player);

	String getRandomBountyPlanet();

	bool sendPlayerBountyDebug(CreatureObject* player, CreatureObject* target);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	MissionManager(DummyConstructorParameter* param);

	virtual ~MissionManager();

	friend class MissionManagerHelper;
};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManagerImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedReference<ZoneServer* > server;

private:
	ManagedReference<ZoneProcessServer* > processor;

protected:
	MissionNpcSpawnMap missionNpcSpawnMap;

	Vector<String> craftingMissionItems;

	Vector<String> bhTargetZones;

	VectorMap<unsigned int, Vector<String> > bhTargetsAtMissionLevel;

	VectorMap<unsigned long long, ManagedReference<PlayerBounty* > > playerBountyList;

	Mutex playerBountyListMutex;

	bool enableFactionalCraftingMissions;

	bool enableFactionalReconMissions;

	bool enableFactionalEntertainerMissions;

	bool enableSameAccountBountyMissions;

public:
	unsigned static const int UNKNOWN_TARGET;

private:
	unsigned long long playerBountyKillBuffer;

	unsigned long long playerBountyDebuffLength;

	unsigned long long destroyMissionBaseDistance;

	unsigned long long destroyMissionDifficultyDistanceFactor;

	unsigned long long destroyMissionRandomDistance;

	unsigned long long destroyMissionDifficultyRandomDistance;

	unsigned long long destroyMissionBaseReward;

	unsigned long long destroyMissionDifficultyRewardFactor;

	unsigned long long destroyMissionRandomReward;

	unsigned long long destroyMissionDifficultyRandomReward;

public:
	MissionManagerImplementation(ZoneServer* srv, ZoneProcessServer* impl);

	MissionManagerImplementation(DummyConstructorParameter* param);

private:
	void loadLuaSettings();

	void loadPlayerBounties();

public:
	void handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player);

	void handleMissionAbort(MissionObject* mission, CreatureObject* player);

	void removeMission(MissionObject* mission, CreatureObject* player);

private:
	void populateMissionList(MissionTerminal* missionTerminal, CreatureObject* player, int counter);

	void randomizeGeneralTerminalMissions(CreatureObject* player, int counter, bool slicer);

	void randomizeArtisanTerminalMissions(CreatureObject* player, int counter, bool slicer);

	void randomizeEntertainerTerminalMissions(CreatureObject* player, int counter, bool slicer);

	void randomizeScoutTerminalMissions(CreatureObject* player, int counter, bool slicer);

	void randomizeBountyTerminalMissions(CreatureObject* player, int counter);

	void randomizeFactionTerminalMissions(CreatureObject* player, int counter, bool slicer, unsigned const int faction);

	void randomizeGenericBountyMission(CreatureObject* player, MissionObject* mission, unsigned const int faction, Vector<ManagedReference<PlayerBounty* > >* potentialTargets);

	void randomizeGenericCraftingMission(CreatureObject* player, MissionObject* mission, unsigned const int faction);

	void randomizeGenericDeliverMission(CreatureObject* player, MissionObject* mission, unsigned const int faction);

	void randomizeGenericDestroyMission(CreatureObject* player, MissionObject* mission, unsigned const int faction);

	void randomizeGenericEntertainerMission(CreatureObject* player, MissionObject* mission, unsigned const int faction, unsigned const int missionType);

	void randomizeGenericHuntingMission(CreatureObject* player, MissionObject* mission, unsigned const int faction);

	void randomizeGenericReconMission(CreatureObject* player, MissionObject* mission, unsigned const int faction);

	void randomizeGenericSurveyMission(CreatureObject* player, MissionObject* mission, unsigned const int faction);

	bool randomGenericDeliverMission(CreatureObject* player, MissionObject* mission, bool inTownMission, unsigned const int faction);

	void generateRandomFactionalDestroyMissionDescription(CreatureObject* player, MissionObject* mission, const String& faction);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

	void createCraftingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player);

public:
	NpcSpawnPoint* getFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType, const float maxRange);

	NpcSpawnPoint* getFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType);

	void createSpawnPoint(CreatureObject* player, const String& spawnTypes);

	void removeSpawnPoint(CreatureObject* player, const String& spawnTypes);

private:
	LairSpawn* getRandomLairSpawn(CreatureObject* player, unsigned const int faction, unsigned int type);

public:
	Vector3 getRandomBountyTargetPosition(CreatureObject* player, const String& planet);

	Reference<MissionObject* > getBountyHunterMission(CreatureObject* player);

	int getRealBountyReward(CreatureObject* creo, PlayerBounty* bounty);

private:
	String getDeliveryMissionFileName(unsigned const int faction);

	int getDeliverMissionNumberOfMissions(unsigned const int faction);

	int getDeliverMissionSpawnType(unsigned const int faction);

public:
	void addPlayerToBountyList(unsigned long long targetId, int reward);

	void removePlayerFromBountyList(unsigned long long targetId);

	void updatePlayerBountyReward(unsigned long long targetId, int reward);

	void updatePlayerBountyOnlineStatus(unsigned long long targetId, bool status);

	void completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter);

	void failPlayerBountyMission(unsigned long long bountyHunter, unsigned long long targetID);

private:
	Vector<ManagedReference<PlayerBounty* > > getPotentialPlayerBountyTargets(CreatureObject* player);

	bool isBountyValidForPlayer(CreatureObject* player, PlayerBounty* bounty);

	void addBountyHunterToPlayerBounty(unsigned long long targetId, unsigned long long bountyHunterId);

	void removeBountyHunterFromPlayerBounty(unsigned long long targetId, unsigned long long bountyHunterId);

public:
	bool hasPlayerBountyTargetInList(unsigned long long targetId);

	bool hasBountyHunterInPlayerBounty(unsigned long long targetId, unsigned long long bhId);

	Vector<unsigned long long> getHuntersHuntingTarget(unsigned long long targetId);

	void allocateMissionNpcs(NpcSpawnPoint* target, NpcSpawnPoint* destination, Zone* zone, CreatureManager* creatureManager);

	void freeMissionNpc(AiAgent* npc);

	void despawnMissionNpc(NpcSpawnPoint* npc);

	void deactivateMissions(CreatureObject* player);

	String getRandomBountyPlanet();

	bool sendPlayerBountyDebug(CreatureObject* player, CreatureObject* target);

	WeakReference<MissionManager*> _this;

	operator const MissionManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~MissionManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class MissionManager;
};

class MissionManagerAdapter : public ObserverAdapter {
public:
	MissionManagerAdapter(MissionManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player);

	void handleMissionAbort(MissionObject* mission, CreatureObject* player);

	void removeMission(MissionObject* mission, CreatureObject* player);

	void createSpawnPoint(CreatureObject* player, const String& spawnTypes);

	void removeSpawnPoint(CreatureObject* player, const String& spawnTypes);

	Reference<MissionObject* > getBountyHunterMission(CreatureObject* player);

	int getRealBountyReward(CreatureObject* creo, PlayerBounty* bounty);

	void addPlayerToBountyList(unsigned long long targetId, int reward);

	void removePlayerFromBountyList(unsigned long long targetId);

	void updatePlayerBountyReward(unsigned long long targetId, int reward);

	void updatePlayerBountyOnlineStatus(unsigned long long targetId, bool status);

	void completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter);

	void failPlayerBountyMission(unsigned long long bountyHunter, unsigned long long targetID);

	bool hasPlayerBountyTargetInList(unsigned long long targetId);

	bool hasBountyHunterInPlayerBounty(unsigned long long targetId, unsigned long long bhId);

	void deactivateMissions(CreatureObject* player);

	String getRandomBountyPlanet();

	bool sendPlayerBountyDebug(CreatureObject* player, CreatureObject* target);

};

class MissionManagerHelper : public DistributedObjectClassHelper, public Singleton<MissionManagerHelper> {
	static MissionManagerHelper* staticInitializer;

public:
	MissionManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MissionManagerHelper>;
};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManagerPOD : public ObserverPOD {
public:
	Optional<ManagedReference<ZoneServerPOD* >> server;

	Optional<MissionNpcSpawnMap> missionNpcSpawnMap;

	Optional<Vector<String>> craftingMissionItems;

	Optional<Vector<String>> bhTargetZones;

	Optional<VectorMap<unsigned int, Vector<String> >> bhTargetsAtMissionLevel;

	Optional<VectorMap<unsigned long long, ManagedReference<PlayerBountyPOD* > >> playerBountyList;

	Optional<bool> enableFactionalCraftingMissions;

	Optional<bool> enableFactionalReconMissions;

	Optional<bool> enableFactionalEntertainerMissions;

	Optional<bool> enableSameAccountBountyMissions;

	Optional<unsigned long long> playerBountyKillBuffer;

	Optional<unsigned long long> playerBountyDebuffLength;

	Optional<unsigned long long> destroyMissionBaseDistance;

	Optional<unsigned long long> destroyMissionDifficultyDistanceFactor;

	Optional<unsigned long long> destroyMissionRandomDistance;

	Optional<unsigned long long> destroyMissionDifficultyRandomDistance;

	Optional<unsigned long long> destroyMissionBaseReward;

	Optional<unsigned long long> destroyMissionDifficultyRewardFactor;

	Optional<unsigned long long> destroyMissionRandomReward;

	Optional<unsigned long long> destroyMissionDifficultyRandomReward;

	String _className;
	MissionManagerPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~MissionManagerPOD();

};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

#endif /*MISSIONMANAGERPOD_H_*/
