/*
 *	autogen/server/zone/managers/loot/LootManager.cpp generated by engine3 IDL compiler 0.70
 */

#include "LootManager.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/tangible/TangibleObject.h"

/*
 *	LootManagerStub
 */

enum {RPC_INITIALIZE__ = 2917100624,RPC_STOP__,RPC_CALCULATELOOTCREDITS__INT_,RPC_GETYELLOWLOOTED__,RPC_GETEXCEPTIONALLOOTED__,RPC_GETLEGENDARYLOOTED__,};

LootManager::LootManager(CraftingManager* craftman, ObjectManager* objMan, ZoneServer* server) : ManagedService(DummyConstructorParameter::instance()) {
	LootManagerImplementation* _implementation = new LootManagerImplementation(craftman, objMan, server);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("LootManager");
}

LootManager::LootManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("LootManager");
}

LootManager::~LootManager() {
}



void LootManager::initialize() {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

void LootManager::stop() {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOP__);

		method.executeWithVoidReturn();
	} else {
		_implementation->stop();
	}
}

TangibleObject* LootManager::createLootObject(const LootItemTemplate* templateObject, int level, bool maxCondition) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->createLootObject(templateObject, level, maxCondition);
	}
}

String LootManager::getRandomLootableMod(unsigned int sceneObjectType) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getRandomLootableMod(sceneObjectType);
	}
}

int LootManager::calculateLootCredits(int level) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATELOOTCREDITS__INT_);
		method.addSignedIntParameter(level);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->calculateLootCredits(level);
	}
}

bool LootManager::createLoot(TransactionLog& trx, SceneObject* container, AiAgent* creature) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->createLoot(trx, container, creature);
	}
}

bool LootManager::createLootFromCollection(TransactionLog& trx, SceneObject* container, const LootGroupCollection* collection, int level) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->createLootFromCollection(trx, container, collection, level);
	}
}

unsigned long long LootManager::createLoot(TransactionLog& trx, SceneObject* container, const String& lootGroup, int level, bool maxCondition) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->createLoot(trx, container, lootGroup, level, maxCondition);
	}
}

bool LootManager::createLootSet(TransactionLog& trx, SceneObject* container, const String& lootGroup, int level, bool maxCondition, int setSize) {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->createLootSet(trx, container, lootGroup, level, maxCondition, setSize);
	}
}

unsigned int LootManager::getYellowLooted() const {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETYELLOWLOOTED__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getYellowLooted();
	}
}

unsigned int LootManager::getExceptionalLooted() const {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEXCEPTIONALLOOTED__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getExceptionalLooted();
	}
}

unsigned int LootManager::getLegendaryLooted() const {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEGENDARYLOOTED__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getLegendaryLooted();
	}
}

const LootGroupMap* LootManager::getLootMap() const {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getLootMap();
	}
}

const CrystalData* LootManager::getCrystalData(const String& name) const {
	LootManagerImplementation* _implementation = static_cast<LootManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCrystalData(name);
	}
}

DistributedObjectServant* LootManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* LootManager::_getImplementationForRead() const {
	return _impl;
}

void LootManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LootManagerImplementation
 */

LootManagerImplementation::LootManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


LootManagerImplementation::~LootManagerImplementation() {
}


void LootManagerImplementation::finalize() {
}

void LootManagerImplementation::_initializeImplementation() {
	_setClassHelper(LootManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void LootManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<LootManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* LootManagerImplementation::_getStub() {
	return _this.get();
}

LootManagerImplementation::operator const LootManager*() {
	return _this.get();
}

void LootManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void LootManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void LootManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void LootManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void LootManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void LootManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void LootManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void LootManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("LootManager");

}

void LootManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(LootManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LootManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void LootManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count;
}

LootManagerImplementation::LootManagerImplementation(CraftingManager* craftman, ObjectManager* objMan, ZoneServer* server) {
	_initializeImplementation();
	// server/zone/managers/loot/LootManager.idl():  		craftingManager = craftman;
	craftingManager = craftman;
	// server/zone/managers/loot/LootManager.idl():  		objectManager = objMan;
	objectManager = objMan;
	// server/zone/managers/loot/LootManager.idl():  		zoneServer = server;
	zoneServer = server;
	// server/zone/managers/loot/LootManager.idl():  		lootGroupMap = null;
	lootGroupMap = NULL;
	// server/zone/managers/loot/LootManager.idl():  		lootableArmorAttachmentMods.setNoDuplicateInsertPlan();
	(&lootableArmorAttachmentMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableClothingAttachmentMods.setNoDuplicateInsertPlan();
	(&lootableClothingAttachmentMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableArmorMods.setNoDuplicateInsertPlan();
	(&lootableArmorMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableClothingMods.setNoDuplicateInsertPlan();
	(&lootableClothingMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableOneHandedMeleeMods.setNoDuplicateInsertPlan();
	(&lootableOneHandedMeleeMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableTwoHandedMeleeMods.setNoDuplicateInsertPlan();
	(&lootableTwoHandedMeleeMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableUnarmedMods.setNoDuplicateInsertPlan();
	(&lootableUnarmedMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootablePistolMods.setNoDuplicateInsertPlan();
	(&lootablePistolMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableRifleMods.setNoDuplicateInsertPlan();
	(&lootableRifleMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableCarbineMods.setNoDuplicateInsertPlan();
	(&lootableCarbineMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootablePolearmMods.setNoDuplicateInsertPlan();
	(&lootablePolearmMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		lootableHeavyWeaponMods.setNoDuplicateInsertPlan();
	(&lootableHeavyWeaponMods)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl():  		exceptionalChance = 0.0;
	exceptionalChance = 0.0;
	// server/zone/managers/loot/LootManager.idl():  		exceptionalModifier = 0.0;
	exceptionalModifier = 0.0;
	// server/zone/managers/loot/LootManager.idl():  		legendaryChance = 0.0;
	legendaryChance = 0.0;
	// server/zone/managers/loot/LootManager.idl():  		legendaryModifier = 0.0;
	legendaryModifier = 0.0;
	// server/zone/managers/loot/LootManager.idl():  		skillModChance = 0.0;
	skillModChance = 0.0;
	// server/zone/managers/loot/LootManager.idl():  		Logger.setLoggingName("LootManager");
	Logger::setLoggingName("LootManager");
	// server/zone/managers/loot/LootManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

unsigned int LootManagerImplementation::getYellowLooted() const{
	// server/zone/managers/loot/LootManager.idl():  		return yellowLooted.get();
	return (&yellowLooted)->get();
}

unsigned int LootManagerImplementation::getExceptionalLooted() const{
	// server/zone/managers/loot/LootManager.idl():  		return exceptionalLooted.get();
	return (&exceptionalLooted)->get();
}

unsigned int LootManagerImplementation::getLegendaryLooted() const{
	// server/zone/managers/loot/LootManager.idl():  		return legendaryLooted.get();
	return (&legendaryLooted)->get();
}

const LootGroupMap* LootManagerImplementation::getLootMap() const{
	// server/zone/managers/loot/LootManager.idl():  		return lootGroupMap;
	return lootGroupMap;
}

const CrystalData* LootManagerImplementation::getCrystalData(const String& name) const{
	// server/zone/managers/loot/LootManager.idl():  		return crystalData.get(name);
	return (&crystalData)->get(name);
}

/*
 *	LootManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


LootManagerAdapter::LootManagerAdapter(LootManager* obj) : ManagedServiceAdapter(obj) {
}

void LootManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_STOP__:
		{
			
			stop();
			
		}
		break;
	case RPC_CALCULATELOOTCREDITS__INT_:
		{
			int level = inv->getSignedIntParameter();
			
			int _m_res = calculateLootCredits(level);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETYELLOWLOOTED__:
		{
			
			unsigned int _m_res = getYellowLooted();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETEXCEPTIONALLOOTED__:
		{
			
			unsigned int _m_res = getExceptionalLooted();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETLEGENDARYLOOTED__:
		{
			
			unsigned int _m_res = getLegendaryLooted();
			resp->insertInt(_m_res);
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

void LootManagerAdapter::initialize() {
	(static_cast<LootManager*>(stub))->initialize();
}

void LootManagerAdapter::stop() {
	(static_cast<LootManager*>(stub))->stop();
}

int LootManagerAdapter::calculateLootCredits(int level) {
	return (static_cast<LootManager*>(stub))->calculateLootCredits(level);
}

unsigned int LootManagerAdapter::getYellowLooted() const {
	return (static_cast<LootManager*>(stub))->getYellowLooted();
}

unsigned int LootManagerAdapter::getExceptionalLooted() const {
	return (static_cast<LootManager*>(stub))->getExceptionalLooted();
}

unsigned int LootManagerAdapter::getLegendaryLooted() const {
	return (static_cast<LootManager*>(stub))->getLegendaryLooted();
}

/*
 *	LootManagerHelper
 */

LootManagerHelper* LootManagerHelper::staticInitializer = LootManagerHelper::instance();

LootManagerHelper::LootManagerHelper() {
	className = "LootManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void LootManagerHelper::finalizeHelper() {
	LootManagerHelper::finalize();
}

DistributedObject* LootManagerHelper::instantiateObject() {
	return new LootManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootManagerHelper::instantiateServant() {
	return new LootManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* LootManagerHelper::instantiatePOD() {
	return new LootManagerPOD();
}

DistributedObjectAdapter* LootManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootManagerAdapter(static_cast<LootManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	LootManagerPOD
 */

LootManagerPOD::~LootManagerPOD() {
}

LootManagerPOD::LootManagerPOD(void) {
	_className = "LootManager";
}


void LootManagerPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootManagerPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootManagerPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServicePOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count;
}

bool LootManagerPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServicePOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void LootManagerPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(LootManagerPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void LootManagerPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedServicePOD::writeObjectCompact(stream);


}

