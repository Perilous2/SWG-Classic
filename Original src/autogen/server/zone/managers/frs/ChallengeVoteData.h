/*
 *	autogen/server/zone/managers/frs/ChallengeVoteData.h generated by engine3 IDL compiler 0.70
 */

#ifndef CHALLENGEVOTEDATA_H_
#define CHALLENGEVOTEDATA_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "engine/core/ManagedObject.h"

#include "system/util/Vector.h"

#include "system/lang/Time.h"

namespace server {
namespace zone {
namespace managers {
namespace frs {

class ChallengeVoteData : public ManagedObject {
public:
	static const short VOTING_OPEN = 1;

	static const short VOTING_CLOSED = 2;

	ChallengeVoteData(unsigned long long player, int stat, int rank, int challenger);

	void addYesVote(unsigned long long playerID);

	void addNoVote(unsigned long long playerID);

	int getTotalYesVotes();

	int getTotalNoVotes();

	bool hasVoted(unsigned long long playerID);

	void updateChallengeVoteStart();

	void setStatus(int newStatus);

	int getStatus() const;

	int getPlayerRank() const;

	unsigned long long getChallengerID() const;

	unsigned long long getChallengeVoteStart();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ChallengeVoteData(DummyConstructorParameter* param);

	virtual ~ChallengeVoteData();

	friend class ChallengeVoteDataHelper;
};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

namespace server {
namespace zone {
namespace managers {
namespace frs {

class ChallengeVoteDataImplementation : public ManagedObjectImplementation {
public:
	static const short VOTING_OPEN = 1;

	static const short VOTING_CLOSED = 2;

protected:
	Time challengeVoteStart;

private:
	unsigned long long playerID;

	unsigned long long challengerID;

	int playerRank;

	int status;

protected:
	Vector<unsigned long long> yesVotes;

	Vector<unsigned long long> noVotes;

public:
	ChallengeVoteDataImplementation(unsigned long long player, int stat, int rank, int challenger);

	ChallengeVoteDataImplementation(DummyConstructorParameter* param);

	void addYesVote(unsigned long long playerID);

	void addNoVote(unsigned long long playerID);

	int getTotalYesVotes();

	int getTotalNoVotes();

	bool hasVoted(unsigned long long playerID);

	void updateChallengeVoteStart();

	void setStatus(int newStatus);

	int getStatus() const;

	int getPlayerRank() const;

	unsigned long long getChallengerID() const;

	unsigned long long getChallengeVoteStart();

	WeakReference<ChallengeVoteData*> _this;

	operator const ChallengeVoteData*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~ChallengeVoteDataImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ChallengeVoteData;
};

class ChallengeVoteDataAdapter : public ManagedObjectAdapter {
public:
	ChallengeVoteDataAdapter(ChallengeVoteData* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addYesVote(unsigned long long playerID);

	void addNoVote(unsigned long long playerID);

	int getTotalYesVotes();

	int getTotalNoVotes();

	bool hasVoted(unsigned long long playerID);

	void updateChallengeVoteStart();

	void setStatus(int newStatus);

	int getStatus() const;

	int getPlayerRank() const;

	unsigned long long getChallengerID() const;

	unsigned long long getChallengeVoteStart();

};

class ChallengeVoteDataHelper : public DistributedObjectClassHelper, public Singleton<ChallengeVoteDataHelper> {
	static ChallengeVoteDataHelper* staticInitializer;

public:
	ChallengeVoteDataHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ChallengeVoteDataHelper>;
};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

namespace server {
namespace zone {
namespace managers {
namespace frs {

class ChallengeVoteDataPOD : public ManagedObjectPOD {
public:
	Optional<Time> challengeVoteStart;

	Optional<unsigned long long> playerID;

	Optional<unsigned long long> challengerID;

	Optional<int> playerRank;

	Optional<int> status;

	Optional<Vector<unsigned long long>> yesVotes;

	Optional<Vector<unsigned long long>> noVotes;

	String _className;
	ChallengeVoteDataPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ChallengeVoteDataPOD();

};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

#endif /*CHALLENGEVOTEDATAPOD_H_*/
