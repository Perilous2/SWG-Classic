/*
 *	autogen/server/zone/managers/frs/ChallengeVoteData.cpp generated by engine3 IDL compiler 0.70
 */

#include "ChallengeVoteData.h"

/*
 *	ChallengeVoteDataStub
 */

enum {RPC_ADDYESVOTE__LONG_ = 3342400249,RPC_ADDNOVOTE__LONG_,RPC_GETTOTALYESVOTES__,RPC_GETTOTALNOVOTES__,RPC_HASVOTED__LONG_,RPC_UPDATECHALLENGEVOTESTART__,RPC_SETSTATUS__INT_,RPC_GETSTATUS__,RPC_GETPLAYERRANK__,RPC_GETCHALLENGERID__,RPC_GETCHALLENGEVOTESTART__};

ChallengeVoteData::ChallengeVoteData(unsigned long long player, int stat, int rank, int challenger) : ManagedObject(DummyConstructorParameter::instance()) {
	ChallengeVoteDataImplementation* _implementation = new ChallengeVoteDataImplementation(player, stat, rank, challenger);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ChallengeVoteData");
}

ChallengeVoteData::ChallengeVoteData(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("ChallengeVoteData");
}

ChallengeVoteData::~ChallengeVoteData() {
}



void ChallengeVoteData::addYesVote(unsigned long long playerID) {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDYESVOTE__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		_implementation->addYesVote(playerID);
	}
}

void ChallengeVoteData::addNoVote(unsigned long long playerID) {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDNOVOTE__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		_implementation->addNoVote(playerID);
	}
}

int ChallengeVoteData::getTotalYesVotes() {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALYESVOTES__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalYesVotes();
	}
}

int ChallengeVoteData::getTotalNoVotes() {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALNOVOTES__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalNoVotes();
	}
}

bool ChallengeVoteData::hasVoted(unsigned long long playerID) {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASVOTED__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasVoted(playerID);
	}
}

void ChallengeVoteData::updateChallengeVoteStart() {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATECHALLENGEVOTESTART__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateChallengeVoteStart();
	}
}

void ChallengeVoteData::setStatus(int newStatus) {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATUS__INT_);
		method.addSignedIntParameter(newStatus);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStatus(newStatus);
	}
}

int ChallengeVoteData::getStatus() const {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getStatus();
	}
}

int ChallengeVoteData::getPlayerRank() const {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERRANK__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPlayerRank();
	}
}

unsigned long long ChallengeVoteData::getChallengerID() const {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getChallengerID();
	}
}

unsigned long long ChallengeVoteData::getChallengeVoteStart() {
	ChallengeVoteDataImplementation* _implementation = static_cast<ChallengeVoteDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGEVOTESTART__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getChallengeVoteStart();
	}
}

DistributedObjectServant* ChallengeVoteData::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ChallengeVoteData::_getImplementationForRead() const {
	return _impl;
}

void ChallengeVoteData::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChallengeVoteDataImplementation
 */

ChallengeVoteDataImplementation::ChallengeVoteDataImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ChallengeVoteDataImplementation::~ChallengeVoteDataImplementation() {
}


void ChallengeVoteDataImplementation::finalize() {
}

void ChallengeVoteDataImplementation::_initializeImplementation() {
	_setClassHelper(ChallengeVoteDataHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ChallengeVoteDataImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ChallengeVoteData*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ChallengeVoteDataImplementation::_getStub() {
	return _this.get();
}

ChallengeVoteDataImplementation::operator const ChallengeVoteData*() {
	return _this.get();
}

void ChallengeVoteDataImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ChallengeVoteDataImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ChallengeVoteDataImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ChallengeVoteDataImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ChallengeVoteDataImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ChallengeVoteDataImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ChallengeVoteDataImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ChallengeVoteDataImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ChallengeVoteData");

}

void ChallengeVoteDataImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChallengeVoteDataImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChallengeVoteDataImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xbba04a31: //ChallengeVoteData.challengeVoteStart
		TypeInfo<Time >::parseFromBinaryStream(&challengeVoteStart, stream);
		return true;

	case 0x2e818d65: //ChallengeVoteData.playerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&playerID, stream);
		return true;

	case 0x17a08a46: //ChallengeVoteData.challengerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&challengerID, stream);
		return true;

	case 0x8a6e8edd: //ChallengeVoteData.playerRank
		TypeInfo<int >::parseFromBinaryStream(&playerRank, stream);
		return true;

	case 0x1d77bbfe: //ChallengeVoteData.status
		TypeInfo<int >::parseFromBinaryStream(&status, stream);
		return true;

	case 0xc0255095: //ChallengeVoteData.yesVotes
		TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&yesVotes, stream);
		return true;

	case 0x161c9c23: //ChallengeVoteData.noVotes
		TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&noVotes, stream);
		return true;

	}

	return false;
}

void ChallengeVoteDataImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChallengeVoteDataImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChallengeVoteDataImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xbba04a31; //ChallengeVoteData.challengeVoteStart
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&challengeVoteStart, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x2e818d65; //ChallengeVoteData.playerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&playerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x17a08a46; //ChallengeVoteData.challengerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&challengerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x8a6e8edd; //ChallengeVoteData.playerRank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&playerRank, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1d77bbfe; //ChallengeVoteData.status
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&status, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xc0255095; //ChallengeVoteData.yesVotes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&yesVotes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x161c9c23; //ChallengeVoteData.noVotes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&noVotes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void ChallengeVoteDataImplementation::writeJSON(nlohmann::json& j) {
	ManagedObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["challengeVoteStart"] = challengeVoteStart;

	thisObject["playerID"] = playerID;

	thisObject["challengerID"] = challengerID;

	thisObject["playerRank"] = playerRank;

	thisObject["status"] = status;

	thisObject["yesVotes"] = yesVotes;

	thisObject["noVotes"] = noVotes;

	j["ChallengeVoteData"] = thisObject;
}

ChallengeVoteDataImplementation::ChallengeVoteDataImplementation(unsigned long long player, int stat, int rank, int challenger) {
	_initializeImplementation();
	// server/zone/managers/frs/ChallengeVoteData.idl():  		playerID = player;
	playerID = player;
	// server/zone/managers/frs/ChallengeVoteData.idl():  		status = stat;
	status = stat;
	// server/zone/managers/frs/ChallengeVoteData.idl():  		playerRank = rank;
	playerRank = rank;
	// server/zone/managers/frs/ChallengeVoteData.idl():  		challengerID = challenger;
	challengerID = challenger;
	// server/zone/managers/frs/ChallengeVoteData.idl():  		challengeVoteStart.updateToCurrentTime();
	(&challengeVoteStart)->updateToCurrentTime();
}

void ChallengeVoteDataImplementation::addYesVote(unsigned long long playerID) {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		yesVotes.add(playerID);
	(&yesVotes)->add(playerID);
}

void ChallengeVoteDataImplementation::addNoVote(unsigned long long playerID) {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		noVotes.add(playerID);
	(&noVotes)->add(playerID);
}

int ChallengeVoteDataImplementation::getTotalYesVotes() {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return yesVotes.size();
	return (&yesVotes)->size();
}

int ChallengeVoteDataImplementation::getTotalNoVotes() {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return noVotes.size();
	return (&noVotes)->size();
}

bool ChallengeVoteDataImplementation::hasVoted(unsigned long long playerID) {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return yesVotes.contains(playerID) || noVotes.contains(playerID);
	return (&yesVotes)->contains(playerID) || (&noVotes)->contains(playerID);
}

void ChallengeVoteDataImplementation::updateChallengeVoteStart() {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		challengeVoteStart.updateToCurrentTime();
	(&challengeVoteStart)->updateToCurrentTime();
}

void ChallengeVoteDataImplementation::setStatus(int newStatus) {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		status = newStatus;
	status = newStatus;
}

int ChallengeVoteDataImplementation::getStatus() const{
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return status;
	return status;
}

int ChallengeVoteDataImplementation::getPlayerRank() const{
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return playerRank;
	return playerRank;
}

unsigned long long ChallengeVoteDataImplementation::getChallengerID() const{
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return challengerID;
	return challengerID;
}

unsigned long long ChallengeVoteDataImplementation::getChallengeVoteStart() {
	// server/zone/managers/frs/ChallengeVoteData.idl():  		return challengeVoteStart.getMiliTime();
	return (&challengeVoteStart)->getMiliTime();
}

/*
 *	ChallengeVoteDataAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ChallengeVoteDataAdapter::ChallengeVoteDataAdapter(ChallengeVoteData* obj) : ManagedObjectAdapter(obj) {
}

void ChallengeVoteDataAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ADDYESVOTE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addYesVote(playerID);
			
		}
		break;
	case RPC_ADDNOVOTE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addNoVote(playerID);
			
		}
		break;
	case RPC_GETTOTALYESVOTES__:
		{
			
			int _m_res = getTotalYesVotes();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETTOTALNOVOTES__:
		{
			
			int _m_res = getTotalNoVotes();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HASVOTED__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasVoted(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_UPDATECHALLENGEVOTESTART__:
		{
			
			updateChallengeVoteStart();
			
		}
		break;
	case RPC_SETSTATUS__INT_:
		{
			int newStatus = inv->getSignedIntParameter();
			
			setStatus(newStatus);
			
		}
		break;
	case RPC_GETSTATUS__:
		{
			
			int _m_res = getStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPLAYERRANK__:
		{
			
			int _m_res = getPlayerRank();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCHALLENGERID__:
		{
			
			unsigned long long _m_res = getChallengerID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETCHALLENGEVOTESTART__:
		{
			
			unsigned long long _m_res = getChallengeVoteStart();
			resp->insertLong(_m_res);
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void ChallengeVoteDataAdapter::addYesVote(unsigned long long playerID) {
	(static_cast<ChallengeVoteData*>(stub))->addYesVote(playerID);
}

void ChallengeVoteDataAdapter::addNoVote(unsigned long long playerID) {
	(static_cast<ChallengeVoteData*>(stub))->addNoVote(playerID);
}

int ChallengeVoteDataAdapter::getTotalYesVotes() {
	return (static_cast<ChallengeVoteData*>(stub))->getTotalYesVotes();
}

int ChallengeVoteDataAdapter::getTotalNoVotes() {
	return (static_cast<ChallengeVoteData*>(stub))->getTotalNoVotes();
}

bool ChallengeVoteDataAdapter::hasVoted(unsigned long long playerID) {
	return (static_cast<ChallengeVoteData*>(stub))->hasVoted(playerID);
}

void ChallengeVoteDataAdapter::updateChallengeVoteStart() {
	(static_cast<ChallengeVoteData*>(stub))->updateChallengeVoteStart();
}

void ChallengeVoteDataAdapter::setStatus(int newStatus) {
	(static_cast<ChallengeVoteData*>(stub))->setStatus(newStatus);
}

int ChallengeVoteDataAdapter::getStatus() const {
	return (static_cast<ChallengeVoteData*>(stub))->getStatus();
}

int ChallengeVoteDataAdapter::getPlayerRank() const {
	return (static_cast<ChallengeVoteData*>(stub))->getPlayerRank();
}

unsigned long long ChallengeVoteDataAdapter::getChallengerID() const {
	return (static_cast<ChallengeVoteData*>(stub))->getChallengerID();
}

unsigned long long ChallengeVoteDataAdapter::getChallengeVoteStart() {
	return (static_cast<ChallengeVoteData*>(stub))->getChallengeVoteStart();
}

/*
 *	ChallengeVoteDataHelper
 */

ChallengeVoteDataHelper* ChallengeVoteDataHelper::staticInitializer = ChallengeVoteDataHelper::instance();

ChallengeVoteDataHelper::ChallengeVoteDataHelper() {
	className = "ChallengeVoteData";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChallengeVoteDataHelper::finalizeHelper() {
	ChallengeVoteDataHelper::finalize();
}

DistributedObject* ChallengeVoteDataHelper::instantiateObject() {
	return new ChallengeVoteData(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChallengeVoteDataHelper::instantiateServant() {
	return new ChallengeVoteDataImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* ChallengeVoteDataHelper::instantiatePOD() {
	return new ChallengeVoteDataPOD();
}

DistributedObjectAdapter* ChallengeVoteDataHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChallengeVoteDataAdapter(static_cast<ChallengeVoteData*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ChallengeVoteDataPOD
 */

ChallengeVoteDataPOD::~ChallengeVoteDataPOD() {
}

ChallengeVoteDataPOD::ChallengeVoteDataPOD(void) {
	_className = "ChallengeVoteData";
}


void ChallengeVoteDataPOD::writeJSON(nlohmann::json& j) {
	ManagedObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (challengeVoteStart)
		thisObject["challengeVoteStart"] = challengeVoteStart.value();

	if (playerID)
		thisObject["playerID"] = playerID.value();

	if (challengerID)
		thisObject["challengerID"] = challengerID.value();

	if (playerRank)
		thisObject["playerRank"] = playerRank.value();

	if (status)
		thisObject["status"] = status.value();

	if (yesVotes)
		thisObject["yesVotes"] = yesVotes.value();

	if (noVotes)
		thisObject["noVotes"] = noVotes.value();

	j["ChallengeVoteData"] = thisObject;
}


void ChallengeVoteDataPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChallengeVoteDataPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChallengeVoteDataPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (challengeVoteStart) {
	_nameHashCode = 0xbba04a31; //ChallengeVoteData.challengeVoteStart
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&challengeVoteStart.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (playerID) {
	_nameHashCode = 0x2e818d65; //ChallengeVoteData.playerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&playerID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (challengerID) {
	_nameHashCode = 0x17a08a46; //ChallengeVoteData.challengerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&challengerID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (playerRank) {
	_nameHashCode = 0x8a6e8edd; //ChallengeVoteData.playerRank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&playerRank.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (status) {
	_nameHashCode = 0x1d77bbfe; //ChallengeVoteData.status
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&status.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (yesVotes) {
	_nameHashCode = 0xc0255095; //ChallengeVoteData.yesVotes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&yesVotes.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (noVotes) {
	_nameHashCode = 0x161c9c23; //ChallengeVoteData.noVotes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&noVotes.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool ChallengeVoteDataPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xbba04a31: //ChallengeVoteData.challengeVoteStart
		{
			Time _mnchallengeVoteStart;
			TypeInfo<Time >::parseFromBinaryStream(&_mnchallengeVoteStart, stream);
			challengeVoteStart = std::move(_mnchallengeVoteStart);
		}
		return true;

	case 0x2e818d65: //ChallengeVoteData.playerID
		{
			unsigned long long _mnplayerID;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnplayerID, stream);
			playerID = std::move(_mnplayerID);
		}
		return true;

	case 0x17a08a46: //ChallengeVoteData.challengerID
		{
			unsigned long long _mnchallengerID;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnchallengerID, stream);
			challengerID = std::move(_mnchallengerID);
		}
		return true;

	case 0x8a6e8edd: //ChallengeVoteData.playerRank
		{
			int _mnplayerRank;
			TypeInfo<int >::parseFromBinaryStream(&_mnplayerRank, stream);
			playerRank = std::move(_mnplayerRank);
		}
		return true;

	case 0x1d77bbfe: //ChallengeVoteData.status
		{
			int _mnstatus;
			TypeInfo<int >::parseFromBinaryStream(&_mnstatus, stream);
			status = std::move(_mnstatus);
		}
		return true;

	case 0xc0255095: //ChallengeVoteData.yesVotes
		{
			Vector<unsigned long long> _mnyesVotes;
			TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&_mnyesVotes, stream);
			yesVotes = std::move(_mnyesVotes);
		}
		return true;

	case 0x161c9c23: //ChallengeVoteData.noVotes
		{
			Vector<unsigned long long> _mnnoVotes;
			TypeInfo<Vector<unsigned long long> >::parseFromBinaryStream(&_mnnoVotes, stream);
			noVotes = std::move(_mnnoVotes);
		}
		return true;

	}

	return false;
}

void ChallengeVoteDataPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChallengeVoteDataPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ChallengeVoteDataPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<Time >::toBinaryStream(&challengeVoteStart.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&playerID.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&challengerID.value(), stream);

	TypeInfo<int >::toBinaryStream(&playerRank.value(), stream);

	TypeInfo<int >::toBinaryStream(&status.value(), stream);

	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&yesVotes.value(), stream);

	TypeInfo<Vector<unsigned long long> >::toBinaryStream(&noVotes.value(), stream);


}

