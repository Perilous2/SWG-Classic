/*
 *	autogen/server/zone/managers/frs/FrsRank.h generated by engine3 IDL compiler 0.70
 */

#ifndef FRSRANK_H_
#define FRSRANK_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "engine/core/ManagedObject.h"

#include "system/util/SortedVector.h"

#include "system/util/VectorMap.h"

#include "system/lang/Time.h"

#include "system/util/SynchronizedVectorMap.h"

namespace server {
namespace zone {
namespace managers {
namespace frs {

class FrsRank : public ManagedObject {
public:
	FrsRank(short rankType, short rankNum, short status);

	short getRank() const;

	short getCouncilType() const;

	void addToPlayerList(unsigned long long id);

	void removeFromPlayerList(unsigned long long id);

	int getTotalPlayersInRank();

	bool isOnPlayerList(unsigned long long id);

	SortedVector<unsigned long long>* getPlayerList();

	VectorMap<unsigned long long, int>* getPetitionerList();

	void addToPetitionerList(unsigned long long playerID, int votes);

	bool isOnPetitionerList(unsigned long long id);

	int getPetitionerVotes(unsigned long long id);

	int getTotalPetitioners();

	void clearPetitionerList();

	void removeFromPetitionerList(unsigned long long id);

	void addToVotedList(unsigned long long id);

	void removeFromVotedList(unsigned long long id);

	void clearVotedList();

	bool isOnVotedList(unsigned long long id);

	SortedVector<unsigned long long>* getVotedList();

	void addToWinnerList(unsigned long long id);

	void removeFromWinnerList(unsigned long long id);

	int getTotalWinners();

	bool isOnWinnerList(unsigned long long id);

	void clearWinnerList();

	SortedVector<unsigned long long>* getWinnerList();

	void updateLastTick();

	unsigned long long getLastUpdateTickDiff();

	short getVoteStatus() const;

	void setVoteStatus(int newStatus);

	void resetVotingData();

	int getArenaChallengesThisPhase() const;

	void setArenaChallengesThisPhase(int chal);

	int getArenaChallengesAcceptedThisPhase() const;

	void setArenaChallengesAcceptedThisPhase(int chal);

	int getArenaChallengeScore() const;

	void setArenaChallengeScore(int chal);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FrsRank(DummyConstructorParameter* param);

	virtual ~FrsRank();

	friend class FrsRankHelper;
};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

namespace server {
namespace zone {
namespace managers {
namespace frs {

class FrsRankImplementation : public ManagedObjectImplementation {
protected:
	short type;

	short rank;

	short voteStatus;

	SortedVector<unsigned long long> playerList;

	SortedVector<unsigned long long> votedList;

	VectorMap<unsigned long long, int> petitionerList;

	SortedVector<unsigned long long> winnerList;

	Time lastUpdateTick;

	int arenaChallengeScore;

	int arenaChallengesThisPhase;

	int arenaChallengesAcceptedThisPhase;

public:
	FrsRankImplementation(short rankType, short rankNum, short status);

	FrsRankImplementation(DummyConstructorParameter* param);

	short getRank() const;

	short getCouncilType() const;

	void addToPlayerList(unsigned long long id);

	void removeFromPlayerList(unsigned long long id);

	int getTotalPlayersInRank();

	bool isOnPlayerList(unsigned long long id);

	SortedVector<unsigned long long>* getPlayerList();

	VectorMap<unsigned long long, int>* getPetitionerList();

	void addToPetitionerList(unsigned long long playerID, int votes);

	bool isOnPetitionerList(unsigned long long id);

	int getPetitionerVotes(unsigned long long id);

	int getTotalPetitioners();

	void clearPetitionerList();

	void removeFromPetitionerList(unsigned long long id);

	void addToVotedList(unsigned long long id);

	void removeFromVotedList(unsigned long long id);

	void clearVotedList();

	bool isOnVotedList(unsigned long long id);

	SortedVector<unsigned long long>* getVotedList();

	void addToWinnerList(unsigned long long id);

	void removeFromWinnerList(unsigned long long id);

	int getTotalWinners();

	bool isOnWinnerList(unsigned long long id);

	void clearWinnerList();

	SortedVector<unsigned long long>* getWinnerList();

	void updateLastTick();

	unsigned long long getLastUpdateTickDiff();

	short getVoteStatus() const;

	void setVoteStatus(int newStatus);

	void resetVotingData();

	int getArenaChallengesThisPhase() const;

	void setArenaChallengesThisPhase(int chal);

	int getArenaChallengesAcceptedThisPhase() const;

	void setArenaChallengesAcceptedThisPhase(int chal);

	int getArenaChallengeScore() const;

	void setArenaChallengeScore(int chal);

	WeakReference<FrsRank*> _this;

	operator const FrsRank*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~FrsRankImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FrsRank;
};

class FrsRankAdapter : public ManagedObjectAdapter {
public:
	FrsRankAdapter(FrsRank* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	short getRank() const;

	short getCouncilType() const;

	void addToPlayerList(unsigned long long id);

	void removeFromPlayerList(unsigned long long id);

	int getTotalPlayersInRank();

	bool isOnPlayerList(unsigned long long id);

	void addToPetitionerList(unsigned long long playerID, int votes);

	bool isOnPetitionerList(unsigned long long id);

	int getPetitionerVotes(unsigned long long id);

	int getTotalPetitioners();

	void clearPetitionerList();

	void removeFromPetitionerList(unsigned long long id);

	void addToVotedList(unsigned long long id);

	void removeFromVotedList(unsigned long long id);

	void clearVotedList();

	bool isOnVotedList(unsigned long long id);

	void addToWinnerList(unsigned long long id);

	void removeFromWinnerList(unsigned long long id);

	int getTotalWinners();

	bool isOnWinnerList(unsigned long long id);

	void clearWinnerList();

	void updateLastTick();

	unsigned long long getLastUpdateTickDiff();

	short getVoteStatus() const;

	void setVoteStatus(int newStatus);

	void resetVotingData();

	int getArenaChallengesThisPhase() const;

	void setArenaChallengesThisPhase(int chal);

	int getArenaChallengesAcceptedThisPhase() const;

	void setArenaChallengesAcceptedThisPhase(int chal);

	int getArenaChallengeScore() const;

	void setArenaChallengeScore(int chal);

};

class FrsRankHelper : public DistributedObjectClassHelper, public Singleton<FrsRankHelper> {
	static FrsRankHelper* staticInitializer;

public:
	FrsRankHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FrsRankHelper>;
};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

namespace server {
namespace zone {
namespace managers {
namespace frs {

class FrsRankPOD : public ManagedObjectPOD {
public:
	Optional<short> type;

	Optional<short> rank;

	Optional<short> voteStatus;

	Optional<SortedVector<unsigned long long>> playerList;

	Optional<SortedVector<unsigned long long>> votedList;

	Optional<VectorMap<unsigned long long, int>> petitionerList;

	Optional<SortedVector<unsigned long long>> winnerList;

	Optional<Time> lastUpdateTick;

	Optional<int> arenaChallengeScore;

	Optional<int> arenaChallengesThisPhase;

	Optional<int> arenaChallengesAcceptedThisPhase;

	String _className;
	FrsRankPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~FrsRankPOD();

};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

#endif /*FRSRANKPOD_H_*/
