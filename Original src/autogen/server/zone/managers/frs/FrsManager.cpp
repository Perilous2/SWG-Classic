/*
 *	autogen/server/zone/managers/frs/FrsManager.cpp generated by engine3 IDL compiler 0.70
 */

#include "FrsManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/frs/RankMaintenanceTask.h"

#include "server/zone/managers/frs/VoteStatusTask.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/sui/SuiBox.h"

/*
 *	FrsManagerStub
 */

unsigned const long long FrsManager::VOTE_STATUS_TICK = 300000;

enum {RPC_INITIALIZE__ = 2717747282,RPC_LOADLUACONFIG__,RPC_LOADFRSDATA__,RPC_SETUPENCLAVES__,RPC_SETUPENCLAVEROOMS__BUILDINGOBJECT_STRING_,RPC_SETPLAYERRANK__CREATUREOBJECT_INT_,RPC_PLAYERLOGGEDIN__CREATUREOBJECT_,RPC_VALIDATEPLAYERDATA__CREATUREOBJECT_BOOL_,RPC_ISBANNED__CREATUREOBJECT_,RPC_REMOVEFROMFRS__CREATUREOBJECT_,RPC_HANDLESKILLREVOKED__CREATUREOBJECT_STRING_,RPC_GETSKILLRANK__STRING_INT_,RPC_UPDATEPLAYERSKILLS__CREATUREOBJECT_,RPC_DEMOTEPLAYER__CREATUREOBJECT_,RPC_PROMOTEPLAYER__CREATUREOBJECT_,RPC_ADJUSTFRSEXPERIENCE__CREATUREOBJECT_INT_BOOL_,RPC_DEDUCTMAINTENANCEXP__CREATUREOBJECT_,RPC_ADDEXPERIENCEDEBT__CREATUREOBJECT_INT_,RPC_VERIFYROOMACCESS__CREATUREOBJECT_INT_,RPC_ISVALIDFRSBATTLE__CREATUREOBJECT_CREATUREOBJECT_,RPC_CALCULATEPVPEXPERIENCECHANGE__CREATUREOBJECT_CREATUREOBJECT_FLOAT_BOOL_,RPC_GETBASEEXPERIENCEGAIN__PLAYEROBJECT_PLAYEROBJECT_BOOL_,RPC_GETAVAILABLERANKSLOTS__FRSRANK_,RPC_SENDVOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_,RPC_HANDLEVOTESTATUSSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_,RPC_SENDVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_,RPC_HANDLEVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_LONG_,RPC_HANDLEACCEPTPROMOTIONSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_,RPC_HANDLEVOTEPETITIONSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_,RPC_SENDVOTEDEMOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_,RPC_HANDLEVOTEDEMOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_LONG_,RPC_SENDCHALLENGEVOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_,RPC_HANDLECHALLENGEVOTEISSUESUI__CREATUREOBJECT_SCENEOBJECT_LONG_,RPC_HANDLECHALLENGEVOTESTATUSSUI__CREATUREOBJECT_SCENEOBJECT_LONG_,RPC_HANDLECHALLENGEVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_LONG_,RPC_HANDLECHALLENGEVOTERECORDCONFIRMSUI__CREATUREOBJECT_SCENEOBJECT_INT_LONG_,RPC_GETVOTEWEIGHT__INT_INT_,RPC_GETCHALLENGEVOTEWEIGHT__INT_INT_,RPC_GETRANKTIER__INT_,RPC_HASPLAYERVOTED__CREATUREOBJECT_FRSRANK_,RPC_RUNVOTINGUPDATE__FRSRANK_,RPC_RUNCHALLENGEVOTEUPDATE__,RPC_CHECKFORMISSEDVOTES__FRSRANK_,RPC_GETENCLAVETYPE__BUILDINGOBJECT_,RPC_ISELIGIBLEFORPROMOTION__CREATUREOBJECT_INT_,RPC_GETTIMESTRING__LONG_,RPC_DEDUCTDEBTEXPERIENCE__CREATUREOBJECT_,RPC_GETROOMREQUIREMENT__LONG_,RPC_GETMAINTENANCEINTERVAL__,RPC_GETZONESERVER__,RPC_ISFRSENABLED__,RPC_GETVOTINGINTERVAL__SHORT_,RPC_UPDATELASTMAINTENANCE__,RPC_UPDATELASTVOTESTATUS__,RPC_GETARENASTATUS__,RPC_ISFIGHTINGINARENA__LONG_,RPC_PERFORMARENAMAINTENANCE__,RPC_UPDATEARENASCORES__,RPC_FORCEPHASECHANGE__CREATUREOBJECT_SHORT_INT_,RPC_RECOVERJEDIITEMS__CREATUREOBJECT_,RPC_ISPLAYERINENCLAVE__CREATUREOBJECT_,RPC_ISPLAYERINDARKARENA__CREATUREOBJECT_,RPC_TELEPORTPLAYERTODARKARENA__CREATUREOBJECT_,RPC_SENDRANKPLAYERLIST__CREATUREOBJECT_INT_INT_,RPC_GETTOTALOPENARENACHALLENGES__INT_,RPC_PLAYERABLETOCHALLENGE__CREATUREOBJECT_,RPC_HASPLAYERACCEPTEDARENACHALLENGE__CREATUREOBJECT_,RPC_HANDLEDARKCOUNCILINCAP__CREATUREOBJECT_CREATUREOBJECT_,RPC_HANDLEDARKCOUNCILDEATH__CREATUREOBJECT_CREATUREOBJECT_BOOL_,RPC_HANDLELEFTARENA__CREATUREOBJECT_,RPC_SENDARENACHALLENGESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_,RPC_HANDLEARENACHALLENGEVIEWSUI__CREATUREOBJECT_SCENEOBJECT_SUIBOX_INT_,RPC_HANDLEARENACHALLENGEISSUESUI__CREATUREOBJECT_,RPC_ISSUEARENACHALLENGE__CREATUREOBJECT_INT_,RPC_ACCEPTARENACHALLENGE__CREATUREOBJECT_LONG_,RPC_RANKHASOPENCHALLENGES__INT_,RPC_ISARENAOPEN__,RPC_WIPEARENACHALLENGES__,RPC_FORCEARENAOPEN__CREATUREOBJECT_,RPC_ISPLAYERFIGHTINGINARENA__LONG_,RPC_CANPLAYERACCEPTARENACHALLENGE__CREATUREOBJECT_,RPC_CANPLAYERISSUEARENACHALLENGE__CREATUREOBJECT_,RPC_SETUPSUDDENDEATH__FRSRANK_BOOL_,RPC_MODIFYSUDDENDEATHFLAGS__CREATUREOBJECT_FRSRANK_BOOL_,RPC_CANCELTASKS__};

FrsManager::FrsManager(ZoneServer* zserv) : ManagedService(DummyConstructorParameter::instance()) {
	FrsManagerImplementation* _implementation = new FrsManagerImplementation(zserv);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FrsManager");
}

FrsManager::FrsManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("FrsManager");
}

FrsManager::~FrsManager() {
}



void FrsManager::initialize() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

void FrsManager::loadLuaConfig() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadLuaConfig();
	}
}

void FrsManager::loadFrsData() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADFRSDATA__);

		method.executeWithVoidReturn();
	} else {
		_implementation->loadFrsData();
	}
}

void FrsManager::setupEnclaves() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUPENCLAVES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setupEnclaves();
	}
}

void FrsManager::setupEnclaveRooms(BuildingObject* enclaveBuilding, const String& groupName) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUPENCLAVEROOMS__BUILDINGOBJECT_STRING_);
		method.addObjectParameter(enclaveBuilding);
		method.addAsciiParameter(groupName);

		method.executeWithVoidReturn();
	} else {
		_implementation->setupEnclaveRooms(enclaveBuilding, groupName);
	}
}

Vector<unsigned long long> FrsManager::getFullPlayerList() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getFullPlayerList();
	}
}

Vector<unsigned long long> FrsManager::getPlayerListByCouncil(int councilType) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPlayerListByCouncil(councilType);
	}
}

void FrsManager::setPlayerRank(CreatureObject* player, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLAYERRANK__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->setPlayerRank(player, rank);
	}
}

void FrsManager::playerLoggedIn(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PLAYERLOGGEDIN__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->playerLoggedIn(player);
	}
}

void FrsManager::validatePlayerData(CreatureObject* player, bool verifyBan) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATEPLAYERDATA__CREATUREOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(verifyBan);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->validatePlayerData(player, verifyBan);
	}
}

bool FrsManager::isBanned(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBANNED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->isBanned(player);
	}
}

void FrsManager::removeFromFrs(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMFRS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->removeFromFrs(player);
	}
}

void FrsManager::handleSkillRevoked(CreatureObject* player, const String& skillName) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLESKILLREVOKED__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(skillName);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleSkillRevoked(player, skillName);
	}
}

int FrsManager::getSkillRank(const String& skillName, int councilType) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSKILLRANK__STRING_INT_);
		method.addAsciiParameter(skillName);
		method.addSignedIntParameter(councilType);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSkillRank(skillName, councilType);
	}
}

void FrsManager::updatePlayerSkills(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPLAYERSKILLS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->updatePlayerSkills(player);
	}
}

void FrsManager::demotePlayer(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEMOTEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->demotePlayer(player);
	}
}

void FrsManager::promotePlayer(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMOTEPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->promotePlayer(player);
	}
}

void FrsManager::adjustFrsExperience(CreatureObject* player, int amount, bool sendSystemMessage) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADJUSTFRSEXPERIENCE__CREATUREOBJECT_INT_BOOL_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(amount);
		method.addBooleanParameter(sendSystemMessage);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->adjustFrsExperience(player, amount, sendSystemMessage);
	}
}

void FrsManager::deductMaintenanceXp(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEDUCTMAINTENANCEXP__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->deductMaintenanceXp(player);
	}
}

void FrsManager::addExperienceDebt(CreatureObject* player, int amount) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDEXPERIENCEDEBT__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->addExperienceDebt(player, amount);
	}
}

void FrsManager::verifyRoomAccess(CreatureObject* player, int playerRank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VERIFYROOMACCESS__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(playerRank);

		method.executeWithVoidReturn();
	} else {
		_implementation->verifyRoomAccess(player, playerRank);
	}
}

bool FrsManager::isValidFrsBattle(CreatureObject* attacker, CreatureObject* victim) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVALIDFRSBATTLE__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(attacker);
		method.addObjectParameter(victim);

		return method.executeWithBooleanReturn();
	} else {
		assert((attacker == NULL) || attacker->isLockedByCurrentThread());
		assert((victim == NULL) || victim->isLockedByCurrentThread());
		return _implementation->isValidFrsBattle(attacker, victim);
	}
}

int FrsManager::calculatePvpExperienceChange(CreatureObject* attacker, CreatureObject* victim, float contribution, bool isVictim) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEPVPEXPERIENCECHANGE__CREATUREOBJECT_CREATUREOBJECT_FLOAT_BOOL_);
		method.addObjectParameter(attacker);
		method.addObjectParameter(victim);
		method.addFloatParameter(contribution);
		method.addBooleanParameter(isVictim);

		return method.executeWithSignedIntReturn();
	} else {
		assert((attacker == NULL) || attacker->isLockedByCurrentThread());
		assert((victim == NULL) || victim->isLockedByCurrentThread());
		return _implementation->calculatePvpExperienceChange(attacker, victim, contribution, isVictim);
	}
}

int FrsManager::getBaseExperienceGain(PlayerObject* playerGhost, PlayerObject* opponentGhost, bool playerWon) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEEXPERIENCEGAIN__PLAYEROBJECT_PLAYEROBJECT_BOOL_);
		method.addObjectParameter(playerGhost);
		method.addObjectParameter(opponentGhost);
		method.addBooleanParameter(playerWon);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getBaseExperienceGain(playerGhost, opponentGhost, playerWon);
	}
}

int FrsManager::getAvailableRankSlots(FrsRank* rankInfo) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAVAILABLERANKSLOTS__FRSRANK_);
		method.addObjectParameter(rankInfo);

		return method.executeWithSignedIntReturn();
	} else {
		assert((rankInfo == NULL) || rankInfo->isLockedByCurrentThread());
		return _implementation->getAvailableRankSlots(rankInfo);
	}
}

void FrsManager::sendVoteSUI(CreatureObject* player, SceneObject* terminal, short suiType, short enclaveType) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDVOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(suiType);
		method.addSignedShortParameter(enclaveType);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->sendVoteSUI(player, terminal, suiType, enclaveType);
	}
}

void FrsManager::handleVoteStatusSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEVOTESTATUSSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleVoteStatusSui(player, terminal, enclaveType, rank);
	}
}

void FrsManager::sendVoteRecordSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->sendVoteRecordSui(player, terminal, enclaveType, rank);
	}
}

void FrsManager::handleVoteRecordSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank, unsigned long long petitionerID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);
		method.addUnsignedLongParameter(petitionerID);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleVoteRecordSui(player, terminal, enclaveType, rank, petitionerID);
	}
}

void FrsManager::handleAcceptPromotionSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEACCEPTPROMOTIONSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleAcceptPromotionSui(player, terminal, enclaveType, rank);
	}
}

void FrsManager::handleVotePetitionSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEVOTEPETITIONSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleVotePetitionSui(player, terminal, enclaveType, rank);
	}
}

void FrsManager::sendVoteDemoteSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDVOTEDEMOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->sendVoteDemoteSui(player, terminal, enclaveType, rank);
	}
}

void FrsManager::handleVoteDemoteSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank, unsigned long long playerID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEVOTEDEMOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleVoteDemoteSui(player, terminal, enclaveType, rank, playerID);
	}
}

void FrsManager::sendChallengeVoteSUI(CreatureObject* player, SceneObject* terminal, short suiType, short enclaveType) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCHALLENGEVOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(suiType);
		method.addSignedShortParameter(enclaveType);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->sendChallengeVoteSUI(player, terminal, suiType, enclaveType);
	}
}

void FrsManager::handleChallengeVoteIssueSui(CreatureObject* player, SceneObject* terminal, unsigned long long challengedID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHALLENGEVOTEISSUESUI__CREATUREOBJECT_SCENEOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addUnsignedLongParameter(challengedID);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleChallengeVoteIssueSui(player, terminal, challengedID);
	}
}

void FrsManager::handleChallengeVoteStatusSui(CreatureObject* player, SceneObject* terminal, unsigned long long challengedID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHALLENGEVOTESTATUSSUI__CREATUREOBJECT_SCENEOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addUnsignedLongParameter(challengedID);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleChallengeVoteStatusSui(player, terminal, challengedID);
	}
}

void FrsManager::handleChallengeVoteRecordSui(CreatureObject* player, SceneObject* terminal, unsigned long long challengedID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHALLENGEVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addUnsignedLongParameter(challengedID);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleChallengeVoteRecordSui(player, terminal, challengedID);
	}
}

void FrsManager::handleChallengeVoteRecordConfirmSui(CreatureObject* player, SceneObject* terminal, int index, unsigned long long challengedID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHALLENGEVOTERECORDCONFIRMSUI__CREATUREOBJECT_SCENEOBJECT_INT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedIntParameter(index);
		method.addUnsignedLongParameter(challengedID);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleChallengeVoteRecordConfirmSui(player, terminal, index, challengedID);
	}
}

int FrsManager::getVoteWeight(int playerRank, int voteRank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVOTEWEIGHT__INT_INT_);
		method.addSignedIntParameter(playerRank);
		method.addSignedIntParameter(voteRank);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getVoteWeight(playerRank, voteRank);
	}
}

int FrsManager::getChallengeVoteWeight(int playerRank, int challengedRank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGEVOTEWEIGHT__INT_INT_);
		method.addSignedIntParameter(playerRank);
		method.addSignedIntParameter(challengedRank);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getChallengeVoteWeight(playerRank, challengedRank);
	}
}

int FrsManager::getRankTier(int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANKTIER__INT_);
		method.addSignedIntParameter(rank);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRankTier(rank);
	}
}

bool FrsManager::hasPlayerVoted(CreatureObject* player, FrsRank* rankData) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYERVOTED__CREATUREOBJECT_FRSRANK_);
		method.addObjectParameter(player);
		method.addObjectParameter(rankData);

		return method.executeWithBooleanReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		assert((rankData == NULL) || rankData->isLockedByCurrentThread());
		return _implementation->hasPlayerVoted(player, rankData);
	}
}

void FrsManager::runVotingUpdate(FrsRank* rankInfo) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RUNVOTINGUPDATE__FRSRANK_);
		method.addObjectParameter(rankInfo);

		method.executeWithVoidReturn();
	} else {
		assert((rankInfo == NULL) || rankInfo->isLockedByCurrentThread());
		_implementation->runVotingUpdate(rankInfo);
	}
}

void FrsManager::runChallengeVoteUpdate() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RUNCHALLENGEVOTEUPDATE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->runChallengeVoteUpdate();
	}
}

void FrsManager::checkForMissedVotes(FrsRank* rankInfo) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKFORMISSEDVOTES__FRSRANK_);
		method.addObjectParameter(rankInfo);

		method.executeWithVoidReturn();
	} else {
		assert((rankInfo == NULL) || rankInfo->isLockedByCurrentThread());
		_implementation->checkForMissedVotes(rankInfo);
	}
}

short FrsManager::getEnclaveType(BuildingObject* enclave) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENCLAVETYPE__BUILDINGOBJECT_);
		method.addObjectParameter(enclave);

		return method.executeWithSignedShortReturn();
	} else {
		return _implementation->getEnclaveType(enclave);
	}
}

bool FrsManager::isEligibleForPromotion(CreatureObject* player, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISELIGIBLEFORPROMOTION__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(rank);

		return method.executeWithBooleanReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->isEligibleForPromotion(player, rank);
	}
}

void FrsManager::sendMailToVoters(FrsRank* rankData, const String& sub, StringIdChatParameter& body) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert((rankData == NULL) || rankData->isLockedByCurrentThread());
		_implementation->sendMailToVoters(rankData, sub, body);
	}
}

void FrsManager::sendChallengeVoteMail(int challengedRank, const String& sub, StringIdChatParameter& body) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->sendChallengeVoteMail(challengedRank, sub, body);
	}
}

void FrsManager::sendMailToList(Vector<unsigned long long>* playerList, const String& sub, StringIdChatParameter& body) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->sendMailToList(playerList, sub, body);
	}
}

Vector<unsigned long long>* FrsManager::getTopVotes(FrsRank* rankInfo, int numWinners) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert((rankInfo == NULL) || rankInfo->isLockedByCurrentThread());
		return _implementation->getTopVotes(rankInfo, numWinners);
	}
}

String FrsManager::getTimeString(unsigned long long timestamp) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMESTRING__LONG_);
		method.addUnsignedLongParameter(timestamp);

		String _return_getTimeString;
		method.executeWithAsciiReturn(_return_getTimeString);
		return _return_getTimeString;
	} else {
		return _implementation->getTimeString(timestamp);
	}
}

void FrsManager::deductDebtExperience(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEDUCTDEBTEXPERIENCE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->deductDebtExperience(player);
	}
}

int FrsManager::getRoomRequirement(unsigned long long cellID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOMREQUIREMENT__LONG_);
		method.addUnsignedLongParameter(cellID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRoomRequirement(cellID);
	}
}

int FrsManager::getMaintenanceInterval() const {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAINTENANCEINTERVAL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMaintenanceInterval();
	}
}

ZoneServer* FrsManager::getZoneServer() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return static_cast<ZoneServer*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getZoneServer();
	}
}

FrsRank* FrsManager::getFrsRank(short councilType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getFrsRank(councilType, rank);
	}
}

bool FrsManager::isFrsEnabled() const {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFRSENABLED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFrsEnabled();
	}
}

unsigned long long FrsManager::getVotingInterval(short status) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVOTINGINTERVAL__SHORT_);
		method.addSignedShortParameter(status);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getVotingInterval(status);
	}
}

void FrsManager::updateLastMaintenance() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTMAINTENANCE__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateLastMaintenance();
	}
}

void FrsManager::updateLastVoteStatus() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTVOTESTATUS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateLastVoteStatus();
	}
}

int FrsManager::getArenaStatus() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARENASTATUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getArenaStatus();
	}
}

bool FrsManager::isFightingInArena(unsigned long long playerID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFIGHTINGINARENA__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFightingInArena(playerID);
	}
}

void FrsManager::performArenaMaintenance() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PERFORMARENAMAINTENANCE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->performArenaMaintenance();
	}
}

void FrsManager::updateArenaScores() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEARENASCORES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateArenaScores();
	}
}

void FrsManager::forcePhaseChange(CreatureObject* player, short enclaveType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FORCEPHASECHANGE__CREATUREOBJECT_SHORT_INT_);
		method.addObjectParameter(player);
		method.addSignedShortParameter(enclaveType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		_implementation->forcePhaseChange(player, enclaveType, rank);
	}
}

void FrsManager::recoverJediItems(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RECOVERJEDIITEMS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->recoverJediItems(player);
	}
}

bool FrsManager::isPlayerInEnclave(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYERINENCLAVE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlayerInEnclave(player);
	}
}

bool FrsManager::isPlayerInDarkArena(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYERINDARKARENA__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlayerInDarkArena(player);
	}
}

void FrsManager::teleportPlayerToDarkArena(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TELEPORTPLAYERTODARKARENA__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->teleportPlayerToDarkArena(player);
	}
}

void FrsManager::sendRankPlayerList(CreatureObject* player, int councilType, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRANKPLAYERLIST__CREATUREOBJECT_INT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(councilType);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendRankPlayerList(player, councilType, rank);
	}
}

int FrsManager::getTotalOpenArenaChallenges(int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALOPENARENACHALLENGES__INT_);
		method.addSignedIntParameter(rank);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalOpenArenaChallenges(rank);
	}
}

bool FrsManager::playerAbleToChallenge(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PLAYERABLETOCHALLENGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->playerAbleToChallenge(player);
	}
}

bool FrsManager::hasPlayerAcceptedArenaChallenge(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYERACCEPTEDARENACHALLENGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPlayerAcceptedArenaChallenge(player);
	}
}

bool FrsManager::handleDarkCouncilIncap(CreatureObject* killer, CreatureObject* victim) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEDARKCOUNCILINCAP__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(killer);
		method.addObjectParameter(victim);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->handleDarkCouncilIncap(killer, victim);
	}
}

bool FrsManager::handleDarkCouncilDeath(CreatureObject* killer, CreatureObject* victim, bool forfeit) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEDARKCOUNCILDEATH__CREATUREOBJECT_CREATUREOBJECT_BOOL_);
		method.addObjectParameter(killer);
		method.addObjectParameter(victim);
		method.addBooleanParameter(forfeit);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->handleDarkCouncilDeath(killer, victim, forfeit);
	}
}

void FrsManager::handleLeftArena(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLELEFTARENA__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->handleLeftArena(player);
	}
}

void FrsManager::sendArenaChallengeSUI(CreatureObject* player, SceneObject* terminal, short suiType, short enclaveType) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDARENACHALLENGESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addSignedShortParameter(suiType);
		method.addSignedShortParameter(enclaveType);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendArenaChallengeSUI(player, terminal, suiType, enclaveType);
	}
}

void FrsManager::handleArenaChallengeViewSui(CreatureObject* player, SceneObject* terminal, SuiBox* suiBox, int index) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEARENACHALLENGEVIEWSUI__CREATUREOBJECT_SCENEOBJECT_SUIBOX_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(terminal);
		method.addObjectParameter(suiBox);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleArenaChallengeViewSui(player, terminal, suiBox, index);
	}
}

void FrsManager::handleArenaChallengeIssueSui(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEARENACHALLENGEISSUESUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		_implementation->handleArenaChallengeIssueSui(player);
	}
}

void FrsManager::issueArenaChallenge(CreatureObject* player, int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSUEARENACHALLENGE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(rank);

		method.executeWithVoidReturn();
	} else {
		_implementation->issueArenaChallenge(player, rank);
	}
}

void FrsManager::acceptArenaChallenge(CreatureObject* player, unsigned long long challengerID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACCEPTARENACHALLENGE__CREATUREOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(challengerID);

		method.executeWithVoidReturn();
	} else {
		_implementation->acceptArenaChallenge(player, challengerID);
	}
}

bool FrsManager::rankHasOpenChallenges(int rank) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANKHASOPENCHALLENGES__INT_);
		method.addSignedIntParameter(rank);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->rankHasOpenChallenges(rank);
	}
}

bool FrsManager::isArenaOpen() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISARENAOPEN__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isArenaOpen();
	}
}

void FrsManager::wipeArenaChallenges() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_WIPEARENACHALLENGES__);

		method.executeWithVoidReturn();
	} else {
		_implementation->wipeArenaChallenges();
	}
}

void FrsManager::forceArenaOpen(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FORCEARENAOPEN__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->forceArenaOpen(player);
	}
}

bool FrsManager::isPlayerFightingInArena(unsigned long long playerID) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYERFIGHTINGINARENA__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isPlayerFightingInArena(playerID);
	}
}

bool FrsManager::canPlayerAcceptArenaChallenge(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANPLAYERACCEPTARENACHALLENGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->canPlayerAcceptArenaChallenge(player);
	}
}

bool FrsManager::canPlayerIssueArenaChallenge(CreatureObject* player) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANPLAYERISSUEARENACHALLENGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->canPlayerIssueArenaChallenge(player);
	}
}

void FrsManager::setupSuddenDeath(FrsRank* rankData, bool endPhase) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUPSUDDENDEATH__FRSRANK_BOOL_);
		method.addObjectParameter(rankData);
		method.addBooleanParameter(endPhase);

		method.executeWithVoidReturn();
	} else {
		_implementation->setupSuddenDeath(rankData, endPhase);
	}
}

void FrsManager::modifySuddenDeathFlags(CreatureObject* player, FrsRank* rankData, bool doRemove) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MODIFYSUDDENDEATHFLAGS__CREATUREOBJECT_FRSRANK_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(rankData);
		method.addBooleanParameter(doRemove);

		method.executeWithVoidReturn();
	} else {
		assert((rankData == NULL) || rankData->isLockedByCurrentThread());
		_implementation->modifySuddenDeathFlags(player, rankData, doRemove);
	}
}

void FrsManager::handleSuddenDeathLoss(CreatureObject* player, ThreatMap* threatMap) {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->handleSuddenDeathLoss(player, threatMap);
	}
}

void FrsManager::cancelTasks() {
	FrsManagerImplementation* _implementation = static_cast<FrsManagerImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELTASKS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->cancelTasks();
	}
}

DistributedObjectServant* FrsManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FrsManager::_getImplementationForRead() const {
	return _impl;
}

void FrsManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FrsManagerImplementation
 */

unsigned const long long FrsManagerImplementation::VOTE_STATUS_TICK = 300000;

FrsManagerImplementation::FrsManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


FrsManagerImplementation::~FrsManagerImplementation() {
}


void FrsManagerImplementation::finalize() {
}

void FrsManagerImplementation::_initializeImplementation() {
	_setClassHelper(FrsManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FrsManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FrsManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* FrsManagerImplementation::_getStub() {
	return _this.get();
}

FrsManagerImplementation::operator const FrsManager*() {
	return _this.get();
}

void FrsManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FrsManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FrsManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FrsManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FrsManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FrsManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FrsManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FrsManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("FrsManager");

}

void FrsManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FrsManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x46c5c52e: //FrsManager.lightEnclave
		TypeInfo<ManagedWeakReference<BuildingObject* > >::parseFromBinaryStream(&lightEnclave, stream);
		return true;

	case 0x99e5e6e4: //FrsManager.darkEnclave
		TypeInfo<ManagedWeakReference<BuildingObject* > >::parseFromBinaryStream(&darkEnclave, stream);
		return true;

	}

	return false;
}

void FrsManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x46c5c52e; //FrsManager.lightEnclave
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<BuildingObject* > >::toBinaryStream(&lightEnclave, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x99e5e6e4; //FrsManager.darkEnclave
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<BuildingObject* > >::toBinaryStream(&darkEnclave, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

FrsManagerImplementation::FrsManagerImplementation(ZoneServer* zserv) {
	_initializeImplementation();
	// server/zone/managers/frs/FrsManager.idl():  		Logger.setLoggingName("FrsManager");
	Logger::setLoggingName("FrsManager");
	// server/zone/managers/frs/FrsManager.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/managers/frs/FrsManager.idl():  		zoneServer = zserv;
	zoneServer = zserv;
	// server/zone/managers/frs/FrsManager.idl():  		rankMaintenanceTask = null;
	rankMaintenanceTask = NULL;
	// server/zone/managers/frs/FrsManager.idl():  		frsEnabled = false;
	frsEnabled = false;
	// server/zone/managers/frs/FrsManager.idl():  		lightEnclave = null;
	lightEnclave = NULL;
	// server/zone/managers/frs/FrsManager.idl():  		darkEnclave = null;
	darkEnclave = NULL;
	// server/zone/managers/frs/FrsManager.idl():  		petitionInterval = 0;
	petitionInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		votingInterval = 0;
	votingInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		acceptanceInterval = 0;
	acceptanceInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		maintenanceInterval = 0;
	maintenanceInterval = 0;
	// server/zone/managers/frs/FrsManager.idl():  		requestDemotionDuration = 0;
	requestDemotionDuration = 0;
	// server/zone/managers/frs/FrsManager.idl():  		voteChallengeDuration = 0;
	voteChallengeDuration = 0;
	// server/zone/managers/frs/FrsManager.idl():  		baseMaintCost = 0;
	baseMaintCost = 0;
	// server/zone/managers/frs/FrsManager.idl():  		requestDemotionCost = 0;
	requestDemotionCost = 0;
	// server/zone/managers/frs/FrsManager.idl():  		voteChallengeCost = 0;
	voteChallengeCost = 0;
	// server/zone/managers/frs/FrsManager.idl():  		maxPetitioners = 0;
	maxPetitioners = 0;
	// server/zone/managers/frs/FrsManager.idl():  		missedVotePenalty = 0;
	missedVotePenalty = 0;
}

int FrsManagerImplementation::getRoomRequirement(unsigned long long cellID) {
	// server/zone/managers/frs/FrsManager.idl():  		return 
	if ((&roomRequirements)->contains(cellID))	// server/zone/managers/frs/FrsManager.idl():  			return roomRequirements.get(cellID);
	return (&roomRequirements)->get(cellID);
	// server/zone/managers/frs/FrsManager.idl():  		return 0;
	return 0;
}

int FrsManagerImplementation::getMaintenanceInterval() const{
	// server/zone/managers/frs/FrsManager.idl():  		return maintenanceInterval;
	return maintenanceInterval;
}

bool FrsManagerImplementation::isFrsEnabled() const{
	// server/zone/managers/frs/FrsManager.idl():  		return frsEnabled;
	return frsEnabled;
}

unsigned long long FrsManagerImplementation::getVotingInterval(short status) {
	// server/zone/managers/frs/FrsManager.idl():  			return votingInterval;
	if (status == PETITIONING)	// server/zone/managers/frs/FrsManager.idl():  			return petitionInterval;
	return petitionInterval;

	else 	// server/zone/managers/frs/FrsManager.idl():  			return votingInterval;
	if (status == WAITING)	// server/zone/managers/frs/FrsManager.idl():  			return acceptanceInterval;
	return acceptanceInterval;

	else 	// server/zone/managers/frs/FrsManager.idl():  			return votingInterval;
	return votingInterval;
}

void FrsManagerImplementation::updateLastMaintenance() {
	// server/zone/managers/frs/FrsManager.idl():  		managerData.updateLastMaintenanceTick();
	managerData->updateLastMaintenanceTick();
}

void FrsManagerImplementation::updateLastVoteStatus() {
	// server/zone/managers/frs/FrsManager.idl():  		managerData.updateLastVoteStatusTick();
	managerData->updateLastVoteStatusTick();
}

int FrsManagerImplementation::getArenaStatus() {
	// server/zone/managers/frs/FrsManager.idl():  		return managerData.getArenaStatus();
	return managerData->getArenaStatus();
}

bool FrsManagerImplementation::isFightingInArena(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManager.idl():  		return managerData.isFightingInArena(playerID);
	return managerData->isFightingInArena(playerID);
}

/*
 *	FrsManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FrsManagerAdapter::FrsManagerAdapter(FrsManager* obj) : ManagedServiceAdapter(obj) {
}

void FrsManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_LOADLUACONFIG__:
		{
			
			loadLuaConfig();
			
		}
		break;
	case RPC_LOADFRSDATA__:
		{
			
			loadFrsData();
			
		}
		break;
	case RPC_SETUPENCLAVES__:
		{
			
			setupEnclaves();
			
		}
		break;
	case RPC_SETUPENCLAVEROOMS__BUILDINGOBJECT_STRING_:
		{
			BuildingObject* enclaveBuilding = static_cast<BuildingObject*>(inv->getObjectParameter());
			 String groupName; inv->getAsciiParameter(groupName);
			
			setupEnclaveRooms(enclaveBuilding, groupName);
			
		}
		break;
	case RPC_SETPLAYERRANK__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int rank = inv->getSignedIntParameter();
			
			setPlayerRank(player, rank);
			
		}
		break;
	case RPC_PLAYERLOGGEDIN__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			playerLoggedIn(player);
			
		}
		break;
	case RPC_VALIDATEPLAYERDATA__CREATUREOBJECT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			bool verifyBan = inv->getBooleanParameter();
			
			validatePlayerData(player, verifyBan);
			
		}
		break;
	case RPC_ISBANNED__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isBanned(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_REMOVEFROMFRS__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeFromFrs(player);
			
		}
		break;
	case RPC_HANDLESKILLREVOKED__CREATUREOBJECT_STRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String skillName; inv->getAsciiParameter(skillName);
			
			handleSkillRevoked(player, skillName);
			
		}
		break;
	case RPC_GETSKILLRANK__STRING_INT_:
		{
			 String skillName; inv->getAsciiParameter(skillName);
			int councilType = inv->getSignedIntParameter();
			
			int _m_res = getSkillRank(skillName, councilType);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_UPDATEPLAYERSKILLS__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			updatePlayerSkills(player);
			
		}
		break;
	case RPC_DEMOTEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			demotePlayer(player);
			
		}
		break;
	case RPC_PROMOTEPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			promotePlayer(player);
			
		}
		break;
	case RPC_ADJUSTFRSEXPERIENCE__CREATUREOBJECT_INT_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int amount = inv->getSignedIntParameter();
			bool sendSystemMessage = inv->getBooleanParameter();
			
			adjustFrsExperience(player, amount, sendSystemMessage);
			
		}
		break;
	case RPC_DEDUCTMAINTENANCEXP__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			deductMaintenanceXp(player);
			
		}
		break;
	case RPC_ADDEXPERIENCEDEBT__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int amount = inv->getSignedIntParameter();
			
			addExperienceDebt(player, amount);
			
		}
		break;
	case RPC_VERIFYROOMACCESS__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int playerRank = inv->getSignedIntParameter();
			
			verifyRoomAccess(player, playerRank);
			
		}
		break;
	case RPC_ISVALIDFRSBATTLE__CREATUREOBJECT_CREATUREOBJECT_:
		{
			CreatureObject* attacker = static_cast<CreatureObject*>(inv->getObjectParameter());
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isValidFrsBattle(attacker, victim);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CALCULATEPVPEXPERIENCECHANGE__CREATUREOBJECT_CREATUREOBJECT_FLOAT_BOOL_:
		{
			CreatureObject* attacker = static_cast<CreatureObject*>(inv->getObjectParameter());
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			float contribution = inv->getFloatParameter();
			bool isVictim = inv->getBooleanParameter();
			
			int _m_res = calculatePvpExperienceChange(attacker, victim, contribution, isVictim);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETBASEEXPERIENCEGAIN__PLAYEROBJECT_PLAYEROBJECT_BOOL_:
		{
			PlayerObject* playerGhost = static_cast<PlayerObject*>(inv->getObjectParameter());
			PlayerObject* opponentGhost = static_cast<PlayerObject*>(inv->getObjectParameter());
			bool playerWon = inv->getBooleanParameter();
			
			int _m_res = getBaseExperienceGain(playerGhost, opponentGhost, playerWon);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETAVAILABLERANKSLOTS__FRSRANK_:
		{
			FrsRank* rankInfo = static_cast<FrsRank*>(inv->getObjectParameter());
			
			int _m_res = getAvailableRankSlots(rankInfo);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SENDVOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short suiType = inv->getSignedShortParameter();
			short enclaveType = inv->getSignedShortParameter();
			
			sendVoteSUI(player, terminal, suiType, enclaveType);
			
		}
		break;
	case RPC_HANDLEVOTESTATUSSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			
			handleVoteStatusSui(player, terminal, enclaveType, rank);
			
		}
		break;
	case RPC_SENDVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			
			sendVoteRecordSui(player, terminal, enclaveType, rank);
			
		}
		break;
	case RPC_HANDLEVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			unsigned long long petitionerID = inv->getUnsignedLongParameter();
			
			handleVoteRecordSui(player, terminal, enclaveType, rank, petitionerID);
			
		}
		break;
	case RPC_HANDLEACCEPTPROMOTIONSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			
			handleAcceptPromotionSui(player, terminal, enclaveType, rank);
			
		}
		break;
	case RPC_HANDLEVOTEPETITIONSUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			
			handleVotePetitionSui(player, terminal, enclaveType, rank);
			
		}
		break;
	case RPC_SENDVOTEDEMOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			
			sendVoteDemoteSui(player, terminal, enclaveType, rank);
			
		}
		break;
	case RPC_HANDLEVOTEDEMOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_INT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			handleVoteDemoteSui(player, terminal, enclaveType, rank, playerID);
			
		}
		break;
	case RPC_SENDCHALLENGEVOTESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short suiType = inv->getSignedShortParameter();
			short enclaveType = inv->getSignedShortParameter();
			
			sendChallengeVoteSUI(player, terminal, suiType, enclaveType);
			
		}
		break;
	case RPC_HANDLECHALLENGEVOTEISSUESUI__CREATUREOBJECT_SCENEOBJECT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned long long challengedID = inv->getUnsignedLongParameter();
			
			handleChallengeVoteIssueSui(player, terminal, challengedID);
			
		}
		break;
	case RPC_HANDLECHALLENGEVOTESTATUSSUI__CREATUREOBJECT_SCENEOBJECT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned long long challengedID = inv->getUnsignedLongParameter();
			
			handleChallengeVoteStatusSui(player, terminal, challengedID);
			
		}
		break;
	case RPC_HANDLECHALLENGEVOTERECORDSUI__CREATUREOBJECT_SCENEOBJECT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			unsigned long long challengedID = inv->getUnsignedLongParameter();
			
			handleChallengeVoteRecordSui(player, terminal, challengedID);
			
		}
		break;
	case RPC_HANDLECHALLENGEVOTERECORDCONFIRMSUI__CREATUREOBJECT_SCENEOBJECT_INT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			int index = inv->getSignedIntParameter();
			unsigned long long challengedID = inv->getUnsignedLongParameter();
			
			handleChallengeVoteRecordConfirmSui(player, terminal, index, challengedID);
			
		}
		break;
	case RPC_GETVOTEWEIGHT__INT_INT_:
		{
			int playerRank = inv->getSignedIntParameter();
			int voteRank = inv->getSignedIntParameter();
			
			int _m_res = getVoteWeight(playerRank, voteRank);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCHALLENGEVOTEWEIGHT__INT_INT_:
		{
			int playerRank = inv->getSignedIntParameter();
			int challengedRank = inv->getSignedIntParameter();
			
			int _m_res = getChallengeVoteWeight(playerRank, challengedRank);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETRANKTIER__INT_:
		{
			int rank = inv->getSignedIntParameter();
			
			int _m_res = getRankTier(rank);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HASPLAYERVOTED__CREATUREOBJECT_FRSRANK_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			FrsRank* rankData = static_cast<FrsRank*>(inv->getObjectParameter());
			
			bool _m_res = hasPlayerVoted(player, rankData);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_RUNVOTINGUPDATE__FRSRANK_:
		{
			FrsRank* rankInfo = static_cast<FrsRank*>(inv->getObjectParameter());
			
			runVotingUpdate(rankInfo);
			
		}
		break;
	case RPC_RUNCHALLENGEVOTEUPDATE__:
		{
			
			runChallengeVoteUpdate();
			
		}
		break;
	case RPC_CHECKFORMISSEDVOTES__FRSRANK_:
		{
			FrsRank* rankInfo = static_cast<FrsRank*>(inv->getObjectParameter());
			
			checkForMissedVotes(rankInfo);
			
		}
		break;
	case RPC_GETENCLAVETYPE__BUILDINGOBJECT_:
		{
			BuildingObject* enclave = static_cast<BuildingObject*>(inv->getObjectParameter());
			
			short _m_res = getEnclaveType(enclave);
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_ISELIGIBLEFORPROMOTION__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int rank = inv->getSignedIntParameter();
			
			bool _m_res = isEligibleForPromotion(player, rank);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETTIMESTRING__LONG_:
		{
			unsigned long long timestamp = inv->getUnsignedLongParameter();
			
			String _m_res = getTimeString(timestamp);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_DEDUCTDEBTEXPERIENCE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			deductDebtExperience(player);
			
		}
		break;
	case RPC_GETROOMREQUIREMENT__LONG_:
		{
			unsigned long long cellID = inv->getUnsignedLongParameter();
			
			int _m_res = getRoomRequirement(cellID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMAINTENANCEINTERVAL__:
		{
			
			int _m_res = getMaintenanceInterval();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETZONESERVER__:
		{
			
			DistributedObject* _m_res = getZoneServer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_ISFRSENABLED__:
		{
			
			bool _m_res = isFrsEnabled();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETVOTINGINTERVAL__SHORT_:
		{
			short status = inv->getSignedShortParameter();
			
			unsigned long long _m_res = getVotingInterval(status);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_UPDATELASTMAINTENANCE__:
		{
			
			updateLastMaintenance();
			
		}
		break;
	case RPC_UPDATELASTVOTESTATUS__:
		{
			
			updateLastVoteStatus();
			
		}
		break;
	case RPC_GETARENASTATUS__:
		{
			
			int _m_res = getArenaStatus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISFIGHTINGINARENA__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = isFightingInArena(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_PERFORMARENAMAINTENANCE__:
		{
			
			performArenaMaintenance();
			
		}
		break;
	case RPC_UPDATEARENASCORES__:
		{
			
			updateArenaScores();
			
		}
		break;
	case RPC_FORCEPHASECHANGE__CREATUREOBJECT_SHORT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			short enclaveType = inv->getSignedShortParameter();
			int rank = inv->getSignedIntParameter();
			
			forcePhaseChange(player, enclaveType, rank);
			
		}
		break;
	case RPC_RECOVERJEDIITEMS__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			recoverJediItems(player);
			
		}
		break;
	case RPC_ISPLAYERINENCLAVE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isPlayerInEnclave(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISPLAYERINDARKARENA__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isPlayerInDarkArena(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_TELEPORTPLAYERTODARKARENA__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			teleportPlayerToDarkArena(player);
			
		}
		break;
	case RPC_SENDRANKPLAYERLIST__CREATUREOBJECT_INT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int councilType = inv->getSignedIntParameter();
			int rank = inv->getSignedIntParameter();
			
			sendRankPlayerList(player, councilType, rank);
			
		}
		break;
	case RPC_GETTOTALOPENARENACHALLENGES__INT_:
		{
			int rank = inv->getSignedIntParameter();
			
			int _m_res = getTotalOpenArenaChallenges(rank);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_PLAYERABLETOCHALLENGE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = playerAbleToChallenge(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASPLAYERACCEPTEDARENACHALLENGE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = hasPlayerAcceptedArenaChallenge(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HANDLEDARKCOUNCILINCAP__CREATUREOBJECT_CREATUREOBJECT_:
		{
			CreatureObject* killer = static_cast<CreatureObject*>(inv->getObjectParameter());
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = handleDarkCouncilIncap(killer, victim);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HANDLEDARKCOUNCILDEATH__CREATUREOBJECT_CREATUREOBJECT_BOOL_:
		{
			CreatureObject* killer = static_cast<CreatureObject*>(inv->getObjectParameter());
			CreatureObject* victim = static_cast<CreatureObject*>(inv->getObjectParameter());
			bool forfeit = inv->getBooleanParameter();
			
			bool _m_res = handleDarkCouncilDeath(killer, victim, forfeit);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HANDLELEFTARENA__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			handleLeftArena(player);
			
		}
		break;
	case RPC_SENDARENACHALLENGESUI__CREATUREOBJECT_SCENEOBJECT_SHORT_SHORT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			short suiType = inv->getSignedShortParameter();
			short enclaveType = inv->getSignedShortParameter();
			
			sendArenaChallengeSUI(player, terminal, suiType, enclaveType);
			
		}
		break;
	case RPC_HANDLEARENACHALLENGEVIEWSUI__CREATUREOBJECT_SCENEOBJECT_SUIBOX_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			SceneObject* terminal = static_cast<SceneObject*>(inv->getObjectParameter());
			SuiBox* suiBox = static_cast<SuiBox*>(inv->getObjectParameter());
			int index = inv->getSignedIntParameter();
			
			handleArenaChallengeViewSui(player, terminal, suiBox, index);
			
		}
		break;
	case RPC_HANDLEARENACHALLENGEISSUESUI__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			handleArenaChallengeIssueSui(player);
			
		}
		break;
	case RPC_ISSUEARENACHALLENGE__CREATUREOBJECT_INT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			int rank = inv->getSignedIntParameter();
			
			issueArenaChallenge(player, rank);
			
		}
		break;
	case RPC_ACCEPTARENACHALLENGE__CREATUREOBJECT_LONG_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			unsigned long long challengerID = inv->getUnsignedLongParameter();
			
			acceptArenaChallenge(player, challengerID);
			
		}
		break;
	case RPC_RANKHASOPENCHALLENGES__INT_:
		{
			int rank = inv->getSignedIntParameter();
			
			bool _m_res = rankHasOpenChallenges(rank);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISARENAOPEN__:
		{
			
			bool _m_res = isArenaOpen();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_WIPEARENACHALLENGES__:
		{
			
			wipeArenaChallenges();
			
		}
		break;
	case RPC_FORCEARENAOPEN__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			forceArenaOpen(player);
			
		}
		break;
	case RPC_ISPLAYERFIGHTINGINARENA__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = isPlayerFightingInArena(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CANPLAYERACCEPTARENACHALLENGE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = canPlayerAcceptArenaChallenge(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CANPLAYERISSUEARENACHALLENGE__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = canPlayerIssueArenaChallenge(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETUPSUDDENDEATH__FRSRANK_BOOL_:
		{
			FrsRank* rankData = static_cast<FrsRank*>(inv->getObjectParameter());
			bool endPhase = inv->getBooleanParameter();
			
			setupSuddenDeath(rankData, endPhase);
			
		}
		break;
	case RPC_MODIFYSUDDENDEATHFLAGS__CREATUREOBJECT_FRSRANK_BOOL_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			FrsRank* rankData = static_cast<FrsRank*>(inv->getObjectParameter());
			bool doRemove = inv->getBooleanParameter();
			
			modifySuddenDeathFlags(player, rankData, doRemove);
			
		}
		break;
	case RPC_CANCELTASKS__:
		{
			
			cancelTasks();
			
		}
		break;
	default:
		ManagedServiceAdapter::invokeMethod(methid, inv);
	}
}

void FrsManagerAdapter::initialize() {
	(static_cast<FrsManager*>(stub))->initialize();
}

void FrsManagerAdapter::loadLuaConfig() {
	(static_cast<FrsManager*>(stub))->loadLuaConfig();
}

void FrsManagerAdapter::loadFrsData() {
	(static_cast<FrsManager*>(stub))->loadFrsData();
}

void FrsManagerAdapter::setupEnclaves() {
	(static_cast<FrsManager*>(stub))->setupEnclaves();
}

void FrsManagerAdapter::setupEnclaveRooms(BuildingObject* enclaveBuilding, const String& groupName) {
	(static_cast<FrsManager*>(stub))->setupEnclaveRooms(enclaveBuilding, groupName);
}

void FrsManagerAdapter::setPlayerRank(CreatureObject* player, int rank) {
	(static_cast<FrsManager*>(stub))->setPlayerRank(player, rank);
}

void FrsManagerAdapter::playerLoggedIn(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->playerLoggedIn(player);
}

void FrsManagerAdapter::validatePlayerData(CreatureObject* player, bool verifyBan) {
	(static_cast<FrsManager*>(stub))->validatePlayerData(player, verifyBan);
}

bool FrsManagerAdapter::isBanned(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->isBanned(player);
}

void FrsManagerAdapter::removeFromFrs(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->removeFromFrs(player);
}

void FrsManagerAdapter::handleSkillRevoked(CreatureObject* player, const String& skillName) {
	(static_cast<FrsManager*>(stub))->handleSkillRevoked(player, skillName);
}

int FrsManagerAdapter::getSkillRank(const String& skillName, int councilType) {
	return (static_cast<FrsManager*>(stub))->getSkillRank(skillName, councilType);
}

void FrsManagerAdapter::updatePlayerSkills(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->updatePlayerSkills(player);
}

void FrsManagerAdapter::demotePlayer(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->demotePlayer(player);
}

void FrsManagerAdapter::promotePlayer(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->promotePlayer(player);
}

void FrsManagerAdapter::adjustFrsExperience(CreatureObject* player, int amount, bool sendSystemMessage) {
	(static_cast<FrsManager*>(stub))->adjustFrsExperience(player, amount, sendSystemMessage);
}

void FrsManagerAdapter::deductMaintenanceXp(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->deductMaintenanceXp(player);
}

void FrsManagerAdapter::addExperienceDebt(CreatureObject* player, int amount) {
	(static_cast<FrsManager*>(stub))->addExperienceDebt(player, amount);
}

void FrsManagerAdapter::verifyRoomAccess(CreatureObject* player, int playerRank) {
	(static_cast<FrsManager*>(stub))->verifyRoomAccess(player, playerRank);
}

bool FrsManagerAdapter::isValidFrsBattle(CreatureObject* attacker, CreatureObject* victim) {
	return (static_cast<FrsManager*>(stub))->isValidFrsBattle(attacker, victim);
}

int FrsManagerAdapter::calculatePvpExperienceChange(CreatureObject* attacker, CreatureObject* victim, float contribution, bool isVictim) {
	return (static_cast<FrsManager*>(stub))->calculatePvpExperienceChange(attacker, victim, contribution, isVictim);
}

int FrsManagerAdapter::getBaseExperienceGain(PlayerObject* playerGhost, PlayerObject* opponentGhost, bool playerWon) {
	return (static_cast<FrsManager*>(stub))->getBaseExperienceGain(playerGhost, opponentGhost, playerWon);
}

int FrsManagerAdapter::getAvailableRankSlots(FrsRank* rankInfo) {
	return (static_cast<FrsManager*>(stub))->getAvailableRankSlots(rankInfo);
}

void FrsManagerAdapter::sendVoteSUI(CreatureObject* player, SceneObject* terminal, short suiType, short enclaveType) {
	(static_cast<FrsManager*>(stub))->sendVoteSUI(player, terminal, suiType, enclaveType);
}

void FrsManagerAdapter::handleVoteStatusSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	(static_cast<FrsManager*>(stub))->handleVoteStatusSui(player, terminal, enclaveType, rank);
}

void FrsManagerAdapter::sendVoteRecordSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	(static_cast<FrsManager*>(stub))->sendVoteRecordSui(player, terminal, enclaveType, rank);
}

void FrsManagerAdapter::handleVoteRecordSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank, unsigned long long petitionerID) {
	(static_cast<FrsManager*>(stub))->handleVoteRecordSui(player, terminal, enclaveType, rank, petitionerID);
}

void FrsManagerAdapter::handleAcceptPromotionSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	(static_cast<FrsManager*>(stub))->handleAcceptPromotionSui(player, terminal, enclaveType, rank);
}

void FrsManagerAdapter::handleVotePetitionSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	(static_cast<FrsManager*>(stub))->handleVotePetitionSui(player, terminal, enclaveType, rank);
}

void FrsManagerAdapter::sendVoteDemoteSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank) {
	(static_cast<FrsManager*>(stub))->sendVoteDemoteSui(player, terminal, enclaveType, rank);
}

void FrsManagerAdapter::handleVoteDemoteSui(CreatureObject* player, SceneObject* terminal, short enclaveType, int rank, unsigned long long playerID) {
	(static_cast<FrsManager*>(stub))->handleVoteDemoteSui(player, terminal, enclaveType, rank, playerID);
}

void FrsManagerAdapter::sendChallengeVoteSUI(CreatureObject* player, SceneObject* terminal, short suiType, short enclaveType) {
	(static_cast<FrsManager*>(stub))->sendChallengeVoteSUI(player, terminal, suiType, enclaveType);
}

void FrsManagerAdapter::handleChallengeVoteIssueSui(CreatureObject* player, SceneObject* terminal, unsigned long long challengedID) {
	(static_cast<FrsManager*>(stub))->handleChallengeVoteIssueSui(player, terminal, challengedID);
}

void FrsManagerAdapter::handleChallengeVoteStatusSui(CreatureObject* player, SceneObject* terminal, unsigned long long challengedID) {
	(static_cast<FrsManager*>(stub))->handleChallengeVoteStatusSui(player, terminal, challengedID);
}

void FrsManagerAdapter::handleChallengeVoteRecordSui(CreatureObject* player, SceneObject* terminal, unsigned long long challengedID) {
	(static_cast<FrsManager*>(stub))->handleChallengeVoteRecordSui(player, terminal, challengedID);
}

void FrsManagerAdapter::handleChallengeVoteRecordConfirmSui(CreatureObject* player, SceneObject* terminal, int index, unsigned long long challengedID) {
	(static_cast<FrsManager*>(stub))->handleChallengeVoteRecordConfirmSui(player, terminal, index, challengedID);
}

int FrsManagerAdapter::getVoteWeight(int playerRank, int voteRank) {
	return (static_cast<FrsManager*>(stub))->getVoteWeight(playerRank, voteRank);
}

int FrsManagerAdapter::getChallengeVoteWeight(int playerRank, int challengedRank) {
	return (static_cast<FrsManager*>(stub))->getChallengeVoteWeight(playerRank, challengedRank);
}

int FrsManagerAdapter::getRankTier(int rank) {
	return (static_cast<FrsManager*>(stub))->getRankTier(rank);
}

bool FrsManagerAdapter::hasPlayerVoted(CreatureObject* player, FrsRank* rankData) {
	return (static_cast<FrsManager*>(stub))->hasPlayerVoted(player, rankData);
}

void FrsManagerAdapter::runVotingUpdate(FrsRank* rankInfo) {
	(static_cast<FrsManager*>(stub))->runVotingUpdate(rankInfo);
}

void FrsManagerAdapter::runChallengeVoteUpdate() {
	(static_cast<FrsManager*>(stub))->runChallengeVoteUpdate();
}

void FrsManagerAdapter::checkForMissedVotes(FrsRank* rankInfo) {
	(static_cast<FrsManager*>(stub))->checkForMissedVotes(rankInfo);
}

short FrsManagerAdapter::getEnclaveType(BuildingObject* enclave) {
	return (static_cast<FrsManager*>(stub))->getEnclaveType(enclave);
}

bool FrsManagerAdapter::isEligibleForPromotion(CreatureObject* player, int rank) {
	return (static_cast<FrsManager*>(stub))->isEligibleForPromotion(player, rank);
}

String FrsManagerAdapter::getTimeString(unsigned long long timestamp) {
	return (static_cast<FrsManager*>(stub))->getTimeString(timestamp);
}

void FrsManagerAdapter::deductDebtExperience(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->deductDebtExperience(player);
}

int FrsManagerAdapter::getRoomRequirement(unsigned long long cellID) {
	return (static_cast<FrsManager*>(stub))->getRoomRequirement(cellID);
}

int FrsManagerAdapter::getMaintenanceInterval() const {
	return (static_cast<FrsManager*>(stub))->getMaintenanceInterval();
}

ZoneServer* FrsManagerAdapter::getZoneServer() {
	return (static_cast<FrsManager*>(stub))->getZoneServer();
}

bool FrsManagerAdapter::isFrsEnabled() const {
	return (static_cast<FrsManager*>(stub))->isFrsEnabled();
}

unsigned long long FrsManagerAdapter::getVotingInterval(short status) {
	return (static_cast<FrsManager*>(stub))->getVotingInterval(status);
}

void FrsManagerAdapter::updateLastMaintenance() {
	(static_cast<FrsManager*>(stub))->updateLastMaintenance();
}

void FrsManagerAdapter::updateLastVoteStatus() {
	(static_cast<FrsManager*>(stub))->updateLastVoteStatus();
}

int FrsManagerAdapter::getArenaStatus() {
	return (static_cast<FrsManager*>(stub))->getArenaStatus();
}

bool FrsManagerAdapter::isFightingInArena(unsigned long long playerID) {
	return (static_cast<FrsManager*>(stub))->isFightingInArena(playerID);
}

void FrsManagerAdapter::performArenaMaintenance() {
	(static_cast<FrsManager*>(stub))->performArenaMaintenance();
}

void FrsManagerAdapter::updateArenaScores() {
	(static_cast<FrsManager*>(stub))->updateArenaScores();
}

void FrsManagerAdapter::forcePhaseChange(CreatureObject* player, short enclaveType, int rank) {
	(static_cast<FrsManager*>(stub))->forcePhaseChange(player, enclaveType, rank);
}

void FrsManagerAdapter::recoverJediItems(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->recoverJediItems(player);
}

bool FrsManagerAdapter::isPlayerInEnclave(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->isPlayerInEnclave(player);
}

bool FrsManagerAdapter::isPlayerInDarkArena(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->isPlayerInDarkArena(player);
}

void FrsManagerAdapter::teleportPlayerToDarkArena(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->teleportPlayerToDarkArena(player);
}

void FrsManagerAdapter::sendRankPlayerList(CreatureObject* player, int councilType, int rank) {
	(static_cast<FrsManager*>(stub))->sendRankPlayerList(player, councilType, rank);
}

int FrsManagerAdapter::getTotalOpenArenaChallenges(int rank) {
	return (static_cast<FrsManager*>(stub))->getTotalOpenArenaChallenges(rank);
}

bool FrsManagerAdapter::playerAbleToChallenge(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->playerAbleToChallenge(player);
}

bool FrsManagerAdapter::hasPlayerAcceptedArenaChallenge(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->hasPlayerAcceptedArenaChallenge(player);
}

bool FrsManagerAdapter::handleDarkCouncilIncap(CreatureObject* killer, CreatureObject* victim) {
	return (static_cast<FrsManager*>(stub))->handleDarkCouncilIncap(killer, victim);
}

bool FrsManagerAdapter::handleDarkCouncilDeath(CreatureObject* killer, CreatureObject* victim, bool forfeit) {
	return (static_cast<FrsManager*>(stub))->handleDarkCouncilDeath(killer, victim, forfeit);
}

void FrsManagerAdapter::handleLeftArena(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->handleLeftArena(player);
}

void FrsManagerAdapter::sendArenaChallengeSUI(CreatureObject* player, SceneObject* terminal, short suiType, short enclaveType) {
	(static_cast<FrsManager*>(stub))->sendArenaChallengeSUI(player, terminal, suiType, enclaveType);
}

void FrsManagerAdapter::handleArenaChallengeViewSui(CreatureObject* player, SceneObject* terminal, SuiBox* suiBox, int index) {
	(static_cast<FrsManager*>(stub))->handleArenaChallengeViewSui(player, terminal, suiBox, index);
}

void FrsManagerAdapter::handleArenaChallengeIssueSui(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->handleArenaChallengeIssueSui(player);
}

void FrsManagerAdapter::issueArenaChallenge(CreatureObject* player, int rank) {
	(static_cast<FrsManager*>(stub))->issueArenaChallenge(player, rank);
}

void FrsManagerAdapter::acceptArenaChallenge(CreatureObject* player, unsigned long long challengerID) {
	(static_cast<FrsManager*>(stub))->acceptArenaChallenge(player, challengerID);
}

bool FrsManagerAdapter::rankHasOpenChallenges(int rank) {
	return (static_cast<FrsManager*>(stub))->rankHasOpenChallenges(rank);
}

bool FrsManagerAdapter::isArenaOpen() {
	return (static_cast<FrsManager*>(stub))->isArenaOpen();
}

void FrsManagerAdapter::wipeArenaChallenges() {
	(static_cast<FrsManager*>(stub))->wipeArenaChallenges();
}

void FrsManagerAdapter::forceArenaOpen(CreatureObject* player) {
	(static_cast<FrsManager*>(stub))->forceArenaOpen(player);
}

bool FrsManagerAdapter::isPlayerFightingInArena(unsigned long long playerID) {
	return (static_cast<FrsManager*>(stub))->isPlayerFightingInArena(playerID);
}

bool FrsManagerAdapter::canPlayerAcceptArenaChallenge(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->canPlayerAcceptArenaChallenge(player);
}

bool FrsManagerAdapter::canPlayerIssueArenaChallenge(CreatureObject* player) {
	return (static_cast<FrsManager*>(stub))->canPlayerIssueArenaChallenge(player);
}

void FrsManagerAdapter::setupSuddenDeath(FrsRank* rankData, bool endPhase) {
	(static_cast<FrsManager*>(stub))->setupSuddenDeath(rankData, endPhase);
}

void FrsManagerAdapter::modifySuddenDeathFlags(CreatureObject* player, FrsRank* rankData, bool doRemove) {
	(static_cast<FrsManager*>(stub))->modifySuddenDeathFlags(player, rankData, doRemove);
}

void FrsManagerAdapter::cancelTasks() {
	(static_cast<FrsManager*>(stub))->cancelTasks();
}

/*
 *	FrsManagerHelper
 */

FrsManagerHelper* FrsManagerHelper::staticInitializer = FrsManagerHelper::instance();

FrsManagerHelper::FrsManagerHelper() {
	className = "FrsManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void FrsManagerHelper::finalizeHelper() {
	FrsManagerHelper::finalize();
}

DistributedObject* FrsManagerHelper::instantiateObject() {
	return new FrsManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* FrsManagerHelper::instantiateServant() {
	return new FrsManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* FrsManagerHelper::instantiatePOD() {
	return new FrsManagerPOD();
}

DistributedObjectAdapter* FrsManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FrsManagerAdapter(static_cast<FrsManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FrsManagerPOD
 */

FrsManagerPOD::~FrsManagerPOD() {
}

FrsManagerPOD::FrsManagerPOD(void) {
	_className = "FrsManager";
}


void FrsManagerPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsManagerPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsManagerPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServicePOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (lightEnclave) {
	_nameHashCode = 0x46c5c52e; //FrsManager.lightEnclave
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<BuildingObjectPOD* > >::toBinaryStream(&lightEnclave.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (darkEnclave) {
	_nameHashCode = 0x99e5e6e4; //FrsManager.darkEnclave
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<BuildingObjectPOD* > >::toBinaryStream(&darkEnclave.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool FrsManagerPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServicePOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x46c5c52e: //FrsManager.lightEnclave
		{
			ManagedWeakReference<BuildingObjectPOD* > _mnlightEnclave;
			TypeInfo<ManagedWeakReference<BuildingObjectPOD* > >::parseFromBinaryStream(&_mnlightEnclave, stream);
			lightEnclave = std::move(_mnlightEnclave);
		}
		return true;

	case 0x99e5e6e4: //FrsManager.darkEnclave
		{
			ManagedWeakReference<BuildingObjectPOD* > _mndarkEnclave;
			TypeInfo<ManagedWeakReference<BuildingObjectPOD* > >::parseFromBinaryStream(&_mndarkEnclave, stream);
			darkEnclave = std::move(_mndarkEnclave);
		}
		return true;

	}

	return false;
}

void FrsManagerPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsManagerPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void FrsManagerPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedServicePOD::writeObjectCompact(stream);

	TypeInfo<ManagedWeakReference<BuildingObjectPOD* > >::toBinaryStream(&lightEnclave.value(), stream);

	TypeInfo<ManagedWeakReference<BuildingObjectPOD* > >::toBinaryStream(&darkEnclave.value(), stream);


}

