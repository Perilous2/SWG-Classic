/*
 *	autogen/server/zone/managers/frs/ArenaChallengeData.cpp generated by engine3 IDL compiler 0.70
 */

#include "ArenaChallengeData.h"

/*
 *	ArenaChallengeDataStub
 */

enum {RPC_GETCHALLENGESTART__ = 3934489673,RPC_GETCHALLENGEACCEPTERID__,RPC_SETCHALLENGEACCEPTERID__LONG_,RPC_GETCHALLENGERID__,RPC_GETCHALLENGERANK__,RPC_ISCHALLENGECOMPLETED__,RPC_SETCHALLENGECOMPLETED__};

ArenaChallengeData::ArenaChallengeData(unsigned long long player, int rank) : ManagedObject(DummyConstructorParameter::instance()) {
	ArenaChallengeDataImplementation* _implementation = new ArenaChallengeDataImplementation(player, rank);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ArenaChallengeData");
}

ArenaChallengeData::ArenaChallengeData(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("ArenaChallengeData");
}

ArenaChallengeData::~ArenaChallengeData() {
}



unsigned long long ArenaChallengeData::getChallengeStart() const {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGESTART__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getChallengeStart();
	}
}

unsigned long long ArenaChallengeData::getChallengeAccepterID() const {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGEACCEPTERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getChallengeAccepterID();
	}
}

void ArenaChallengeData::setChallengeAccepterID(unsigned long long newID) {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHALLENGEACCEPTERID__LONG_);
		method.addUnsignedLongParameter(newID);

		method.executeWithVoidReturn();
	} else {
		_implementation->setChallengeAccepterID(newID);
	}
}

unsigned long long ArenaChallengeData::getChallengerID() const {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getChallengerID();
	}
}

int ArenaChallengeData::getChallengeRank() const {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGERANK__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getChallengeRank();
	}
}

bool ArenaChallengeData::isChallengeCompleted() const {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCHALLENGECOMPLETED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isChallengeCompleted();
	}
}

void ArenaChallengeData::setChallengeCompleted() {
	ArenaChallengeDataImplementation* _implementation = static_cast<ArenaChallengeDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHALLENGECOMPLETED__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setChallengeCompleted();
	}
}

DistributedObjectServant* ArenaChallengeData::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ArenaChallengeData::_getImplementationForRead() const {
	return _impl;
}

void ArenaChallengeData::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ArenaChallengeDataImplementation
 */

ArenaChallengeDataImplementation::ArenaChallengeDataImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ArenaChallengeDataImplementation::~ArenaChallengeDataImplementation() {
}


void ArenaChallengeDataImplementation::finalize() {
}

void ArenaChallengeDataImplementation::_initializeImplementation() {
	_setClassHelper(ArenaChallengeDataHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ArenaChallengeDataImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ArenaChallengeData*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ArenaChallengeDataImplementation::_getStub() {
	return _this.get();
}

ArenaChallengeDataImplementation::operator const ArenaChallengeData*() {
	return _this.get();
}

void ArenaChallengeDataImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ArenaChallengeDataImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ArenaChallengeDataImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ArenaChallengeDataImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ArenaChallengeDataImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ArenaChallengeDataImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ArenaChallengeDataImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ArenaChallengeDataImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ArenaChallengeData");

}

void ArenaChallengeDataImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ArenaChallengeDataImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ArenaChallengeDataImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6ecf795: //ArenaChallengeData.challengeStart
		TypeInfo<Time >::parseFromBinaryStream(&challengeStart, stream);
		return true;

	case 0x53a52d0c: //ArenaChallengeData.challengerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&challengerID, stream);
		return true;

	case 0xcea211e0: //ArenaChallengeData.challengeAccepterID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&challengeAccepterID, stream);
		return true;

	case 0x10044525: //ArenaChallengeData.challengeCompleted
		TypeInfo<bool >::parseFromBinaryStream(&challengeCompleted, stream);
		return true;

	case 0x33c09531: //ArenaChallengeData.challengeRank
		TypeInfo<int >::parseFromBinaryStream(&challengeRank, stream);
		return true;

	}

	return false;
}

void ArenaChallengeDataImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ArenaChallengeDataImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ArenaChallengeDataImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6ecf795; //ArenaChallengeData.challengeStart
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&challengeStart, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x53a52d0c; //ArenaChallengeData.challengerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&challengerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xcea211e0; //ArenaChallengeData.challengeAccepterID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&challengeAccepterID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x10044525; //ArenaChallengeData.challengeCompleted
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&challengeCompleted, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x33c09531; //ArenaChallengeData.challengeRank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&challengeRank, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void ArenaChallengeDataImplementation::writeJSON(nlohmann::json& j) {
	ManagedObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["challengeStart"] = challengeStart;

	thisObject["challengerID"] = challengerID;

	thisObject["challengeAccepterID"] = challengeAccepterID;

	thisObject["challengeCompleted"] = challengeCompleted;

	thisObject["challengeRank"] = challengeRank;

	j["ArenaChallengeData"] = thisObject;
}

ArenaChallengeDataImplementation::ArenaChallengeDataImplementation(unsigned long long player, int rank) {
	_initializeImplementation();
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengerID = player;
	challengerID = player;
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengeRank = rank;
	challengeRank = rank;
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengeCompleted = false;
	challengeCompleted = false;
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengeAccepterID = 0;
	challengeAccepterID = 0;
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengeStart.updateToCurrentTime();
	(&challengeStart)->updateToCurrentTime();
}

unsigned long long ArenaChallengeDataImplementation::getChallengeStart() const{
	// server/zone/managers/frs/ArenaChallengeData.idl():  		return challengeStart.getMiliTime();
	return (&challengeStart)->getMiliTime();
}

unsigned long long ArenaChallengeDataImplementation::getChallengeAccepterID() const{
	// server/zone/managers/frs/ArenaChallengeData.idl():  		return challengeAccepterID;
	return challengeAccepterID;
}

void ArenaChallengeDataImplementation::setChallengeAccepterID(unsigned long long newID) {
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengeAccepterID = newID;
	challengeAccepterID = newID;
}

unsigned long long ArenaChallengeDataImplementation::getChallengerID() const{
	// server/zone/managers/frs/ArenaChallengeData.idl():  		return challengerID;
	return challengerID;
}

int ArenaChallengeDataImplementation::getChallengeRank() const{
	// server/zone/managers/frs/ArenaChallengeData.idl():  		return challengeRank;
	return challengeRank;
}

bool ArenaChallengeDataImplementation::isChallengeCompleted() const{
	// server/zone/managers/frs/ArenaChallengeData.idl():  		return challengeCompleted;
	return challengeCompleted;
}

void ArenaChallengeDataImplementation::setChallengeCompleted() {
	// server/zone/managers/frs/ArenaChallengeData.idl():  		challengeCompleted = true;
	challengeCompleted = true;
}

/*
 *	ArenaChallengeDataAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ArenaChallengeDataAdapter::ArenaChallengeDataAdapter(ArenaChallengeData* obj) : ManagedObjectAdapter(obj) {
}

void ArenaChallengeDataAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETCHALLENGESTART__:
		{
			
			unsigned long long _m_res = getChallengeStart();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETCHALLENGEACCEPTERID__:
		{
			
			unsigned long long _m_res = getChallengeAccepterID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETCHALLENGEACCEPTERID__LONG_:
		{
			unsigned long long newID = inv->getUnsignedLongParameter();
			
			setChallengeAccepterID(newID);
			
		}
		break;
	case RPC_GETCHALLENGERID__:
		{
			
			unsigned long long _m_res = getChallengerID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETCHALLENGERANK__:
		{
			
			int _m_res = getChallengeRank();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISCHALLENGECOMPLETED__:
		{
			
			bool _m_res = isChallengeCompleted();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETCHALLENGECOMPLETED__:
		{
			
			setChallengeCompleted();
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

unsigned long long ArenaChallengeDataAdapter::getChallengeStart() const {
	return (static_cast<ArenaChallengeData*>(stub))->getChallengeStart();
}

unsigned long long ArenaChallengeDataAdapter::getChallengeAccepterID() const {
	return (static_cast<ArenaChallengeData*>(stub))->getChallengeAccepterID();
}

void ArenaChallengeDataAdapter::setChallengeAccepterID(unsigned long long newID) {
	(static_cast<ArenaChallengeData*>(stub))->setChallengeAccepterID(newID);
}

unsigned long long ArenaChallengeDataAdapter::getChallengerID() const {
	return (static_cast<ArenaChallengeData*>(stub))->getChallengerID();
}

int ArenaChallengeDataAdapter::getChallengeRank() const {
	return (static_cast<ArenaChallengeData*>(stub))->getChallengeRank();
}

bool ArenaChallengeDataAdapter::isChallengeCompleted() const {
	return (static_cast<ArenaChallengeData*>(stub))->isChallengeCompleted();
}

void ArenaChallengeDataAdapter::setChallengeCompleted() {
	(static_cast<ArenaChallengeData*>(stub))->setChallengeCompleted();
}

/*
 *	ArenaChallengeDataHelper
 */

ArenaChallengeDataHelper* ArenaChallengeDataHelper::staticInitializer = ArenaChallengeDataHelper::instance();

ArenaChallengeDataHelper::ArenaChallengeDataHelper() {
	className = "ArenaChallengeData";

	Core::getObjectBroker()->registerClass(className, this);
}

void ArenaChallengeDataHelper::finalizeHelper() {
	ArenaChallengeDataHelper::finalize();
}

DistributedObject* ArenaChallengeDataHelper::instantiateObject() {
	return new ArenaChallengeData(DummyConstructorParameter::instance());
}

DistributedObjectServant* ArenaChallengeDataHelper::instantiateServant() {
	return new ArenaChallengeDataImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* ArenaChallengeDataHelper::instantiatePOD() {
	return new ArenaChallengeDataPOD();
}

DistributedObjectAdapter* ArenaChallengeDataHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ArenaChallengeDataAdapter(static_cast<ArenaChallengeData*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ArenaChallengeDataPOD
 */

ArenaChallengeDataPOD::~ArenaChallengeDataPOD() {
}

ArenaChallengeDataPOD::ArenaChallengeDataPOD(void) {
	_className = "ArenaChallengeData";
}


void ArenaChallengeDataPOD::writeJSON(nlohmann::json& j) {
	ManagedObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (challengeStart)
		thisObject["challengeStart"] = challengeStart.value();

	if (challengerID)
		thisObject["challengerID"] = challengerID.value();

	if (challengeAccepterID)
		thisObject["challengeAccepterID"] = challengeAccepterID.value();

	if (challengeCompleted)
		thisObject["challengeCompleted"] = challengeCompleted.value();

	if (challengeRank)
		thisObject["challengeRank"] = challengeRank.value();

	j["ArenaChallengeData"] = thisObject;
}


void ArenaChallengeDataPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ArenaChallengeDataPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ArenaChallengeDataPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (challengeStart) {
	_nameHashCode = 0x6ecf795; //ArenaChallengeData.challengeStart
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&challengeStart.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (challengerID) {
	_nameHashCode = 0x53a52d0c; //ArenaChallengeData.challengerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&challengerID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (challengeAccepterID) {
	_nameHashCode = 0xcea211e0; //ArenaChallengeData.challengeAccepterID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&challengeAccepterID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (challengeCompleted) {
	_nameHashCode = 0x10044525; //ArenaChallengeData.challengeCompleted
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&challengeCompleted.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (challengeRank) {
	_nameHashCode = 0x33c09531; //ArenaChallengeData.challengeRank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&challengeRank.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool ArenaChallengeDataPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6ecf795: //ArenaChallengeData.challengeStart
		{
			Time _mnchallengeStart;
			TypeInfo<Time >::parseFromBinaryStream(&_mnchallengeStart, stream);
			challengeStart = std::move(_mnchallengeStart);
		}
		return true;

	case 0x53a52d0c: //ArenaChallengeData.challengerID
		{
			unsigned long long _mnchallengerID;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnchallengerID, stream);
			challengerID = std::move(_mnchallengerID);
		}
		return true;

	case 0xcea211e0: //ArenaChallengeData.challengeAccepterID
		{
			unsigned long long _mnchallengeAccepterID;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnchallengeAccepterID, stream);
			challengeAccepterID = std::move(_mnchallengeAccepterID);
		}
		return true;

	case 0x10044525: //ArenaChallengeData.challengeCompleted
		{
			bool _mnchallengeCompleted;
			TypeInfo<bool >::parseFromBinaryStream(&_mnchallengeCompleted, stream);
			challengeCompleted = std::move(_mnchallengeCompleted);
		}
		return true;

	case 0x33c09531: //ArenaChallengeData.challengeRank
		{
			int _mnchallengeRank;
			TypeInfo<int >::parseFromBinaryStream(&_mnchallengeRank, stream);
			challengeRank = std::move(_mnchallengeRank);
		}
		return true;

	}

	return false;
}

void ArenaChallengeDataPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ArenaChallengeDataPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ArenaChallengeDataPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<Time >::toBinaryStream(&challengeStart.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&challengerID.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&challengeAccepterID.value(), stream);

	TypeInfo<bool >::toBinaryStream(&challengeCompleted.value(), stream);

	TypeInfo<int >::toBinaryStream(&challengeRank.value(), stream);


}

