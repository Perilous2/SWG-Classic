/*
 *	autogen/server/zone/managers/frs/FrsRank.cpp generated by engine3 IDL compiler 0.70
 */

#include "FrsRank.h"

/*
 *	FrsRankStub
 */

enum {RPC_GETRANK__ = 2006151079,RPC_GETCOUNCILTYPE__,RPC_ADDTOPLAYERLIST__LONG_,RPC_REMOVEFROMPLAYERLIST__LONG_,RPC_GETTOTALPLAYERSINRANK__,RPC_ISONPLAYERLIST__LONG_,RPC_ADDTOPETITIONERLIST__LONG_INT_,RPC_ISONPETITIONERLIST__LONG_,RPC_GETPETITIONERVOTES__LONG_,RPC_GETTOTALPETITIONERS__,RPC_CLEARPETITIONERLIST__,RPC_REMOVEFROMPETITIONERLIST__LONG_,RPC_ADDTOVOTEDLIST__LONG_,RPC_REMOVEFROMVOTEDLIST__LONG_,RPC_CLEARVOTEDLIST__,RPC_ISONVOTEDLIST__LONG_,RPC_ADDTOWINNERLIST__LONG_,RPC_REMOVEFROMWINNERLIST__LONG_,RPC_GETTOTALWINNERS__,RPC_ISONWINNERLIST__LONG_,RPC_CLEARWINNERLIST__,RPC_UPDATELASTTICK__,RPC_GETLASTUPDATETICKDIFF__,RPC_GETVOTESTATUS__,RPC_SETVOTESTATUS__INT_,RPC_RESETVOTINGDATA__,RPC_GETARENACHALLENGESTHISPHASE__,RPC_SETARENACHALLENGESTHISPHASE__INT_,RPC_GETARENACHALLENGESACCEPTEDTHISPHASE__,RPC_SETARENACHALLENGESACCEPTEDTHISPHASE__INT_,RPC_GETARENACHALLENGESCORE__,RPC_SETARENACHALLENGESCORE__INT_};

FrsRank::FrsRank(short rankType, short rankNum, short status) : ManagedObject(DummyConstructorParameter::instance()) {
	FrsRankImplementation* _implementation = new FrsRankImplementation(rankType, rankNum, status);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FrsRank");
}

FrsRank::FrsRank(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("FrsRank");
}

FrsRank::~FrsRank() {
}



short FrsRank::getRank() const {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANK__);

		return method.executeWithSignedShortReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getRank();
	}
}

short FrsRank::getCouncilType() const {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOUNCILTYPE__);

		return method.executeWithSignedShortReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getCouncilType();
	}
}

void FrsRank::addToPlayerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOPLAYERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToPlayerList(id);
	}
}

void FrsRank::removeFromPlayerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMPLAYERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeFromPlayerList(id);
	}
}

int FrsRank::getTotalPlayersInRank() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALPLAYERSINRANK__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalPlayersInRank();
	}
}

bool FrsRank::isOnPlayerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONPLAYERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnPlayerList(id);
	}
}

SortedVector<unsigned long long>* FrsRank::getPlayerList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getPlayerList();
	}
}

VectorMap<unsigned long long, int>* FrsRank::getPetitionerList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getPetitionerList();
	}
}

void FrsRank::addToPetitionerList(unsigned long long playerID, int votes) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOPETITIONERLIST__LONG_INT_);
		method.addUnsignedLongParameter(playerID);
		method.addSignedIntParameter(votes);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToPetitionerList(playerID, votes);
	}
}

bool FrsRank::isOnPetitionerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONPETITIONERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnPetitionerList(id);
	}
}

int FrsRank::getPetitionerVotes(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPETITIONERVOTES__LONG_);
		method.addUnsignedLongParameter(id);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPetitionerVotes(id);
	}
}

int FrsRank::getTotalPetitioners() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALPETITIONERS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalPetitioners();
	}
}

void FrsRank::clearPetitionerList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARPETITIONERLIST__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearPetitionerList();
	}
}

void FrsRank::removeFromPetitionerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMPETITIONERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeFromPetitionerList(id);
	}
}

void FrsRank::addToVotedList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOVOTEDLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToVotedList(id);
	}
}

void FrsRank::removeFromVotedList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMVOTEDLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeFromVotedList(id);
	}
}

void FrsRank::clearVotedList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARVOTEDLIST__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearVotedList();
	}
}

bool FrsRank::isOnVotedList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONVOTEDLIST__LONG_);
		method.addUnsignedLongParameter(id);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnVotedList(id);
	}
}

SortedVector<unsigned long long>* FrsRank::getVotedList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getVotedList();
	}
}

void FrsRank::addToWinnerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOWINNERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addToWinnerList(id);
	}
}

void FrsRank::removeFromWinnerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMWINNERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeFromWinnerList(id);
	}
}

int FrsRank::getTotalWinners() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALWINNERS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalWinners();
	}
}

bool FrsRank::isOnWinnerList(unsigned long long id) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONWINNERLIST__LONG_);
		method.addUnsignedLongParameter(id);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnWinnerList(id);
	}
}

void FrsRank::clearWinnerList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARWINNERLIST__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->clearWinnerList();
	}
}

SortedVector<unsigned long long>* FrsRank::getWinnerList() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getWinnerList();
	}
}

void FrsRank::updateLastTick() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTTICK__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateLastTick();
	}
}

unsigned long long FrsRank::getLastUpdateTickDiff() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTUPDATETICKDIFF__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getLastUpdateTickDiff();
	}
}

short FrsRank::getVoteStatus() const {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVOTESTATUS__);

		return method.executeWithSignedShortReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getVoteStatus();
	}
}

void FrsRank::setVoteStatus(int newStatus) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETVOTESTATUS__INT_);
		method.addSignedIntParameter(newStatus);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setVoteStatus(newStatus);
	}
}

void FrsRank::resetVotingData() {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETVOTINGDATA__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->resetVotingData();
	}
}

int FrsRank::getArenaChallengesThisPhase() const {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARENACHALLENGESTHISPHASE__);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaChallengesThisPhase();
	}
}

void FrsRank::setArenaChallengesThisPhase(int chal) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARENACHALLENGESTHISPHASE__INT_);
		method.addSignedIntParameter(chal);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setArenaChallengesThisPhase(chal);
	}
}

int FrsRank::getArenaChallengesAcceptedThisPhase() const {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARENACHALLENGESACCEPTEDTHISPHASE__);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaChallengesAcceptedThisPhase();
	}
}

void FrsRank::setArenaChallengesAcceptedThisPhase(int chal) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARENACHALLENGESACCEPTEDTHISPHASE__INT_);
		method.addSignedIntParameter(chal);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setArenaChallengesAcceptedThisPhase(chal);
	}
}

int FrsRank::getArenaChallengeScore() const {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARENACHALLENGESCORE__);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaChallengeScore();
	}
}

void FrsRank::setArenaChallengeScore(int chal) {
	FrsRankImplementation* _implementation = static_cast<FrsRankImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARENACHALLENGESCORE__INT_);
		method.addSignedIntParameter(chal);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setArenaChallengeScore(chal);
	}
}

DistributedObjectServant* FrsRank::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FrsRank::_getImplementationForRead() const {
	return _impl;
}

void FrsRank::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FrsRankImplementation
 */

FrsRankImplementation::FrsRankImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


FrsRankImplementation::~FrsRankImplementation() {
}


void FrsRankImplementation::finalize() {
}

void FrsRankImplementation::_initializeImplementation() {
	_setClassHelper(FrsRankHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FrsRankImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FrsRank*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FrsRankImplementation::_getStub() {
	return _this.get();
}

FrsRankImplementation::operator const FrsRank*() {
	return _this.get();
}

void FrsRankImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FrsRankImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FrsRankImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FrsRankImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FrsRankImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FrsRankImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FrsRankImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FrsRankImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("FrsRank");

}

void FrsRankImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsRankImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FrsRankImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf2e0e34b: //FrsRank.type
		TypeInfo<short >::parseFromBinaryStream(&type, stream);
		return true;

	case 0x6201ec32: //FrsRank.rank
		TypeInfo<short >::parseFromBinaryStream(&rank, stream);
		return true;

	case 0xd327ec06: //FrsRank.voteStatus
		TypeInfo<short >::parseFromBinaryStream(&voteStatus, stream);
		return true;

	case 0x94cdb989: //FrsRank.playerList
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&playerList, stream);
		return true;

	case 0x4cfed00b: //FrsRank.votedList
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&votedList, stream);
		return true;

	case 0x982c481a: //FrsRank.petitionerList
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&petitionerList, stream);
		return true;

	case 0x7103ffb1: //FrsRank.winnerList
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&winnerList, stream);
		return true;

	case 0xa494d564: //FrsRank.lastUpdateTick
		TypeInfo<Time >::parseFromBinaryStream(&lastUpdateTick, stream);
		return true;

	case 0xf94f6a65: //FrsRank.arenaChallengeScore
		TypeInfo<int >::parseFromBinaryStream(&arenaChallengeScore, stream);
		return true;

	case 0x8536cecd: //FrsRank.arenaChallengesThisPhase
		TypeInfo<int >::parseFromBinaryStream(&arenaChallengesThisPhase, stream);
		return true;

	case 0x6d8612f8: //FrsRank.arenaChallengesAcceptedThisPhase
		TypeInfo<int >::parseFromBinaryStream(&arenaChallengesAcceptedThisPhase, stream);
		return true;

	}

	return false;
}

void FrsRankImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsRankImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsRankImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xf2e0e34b; //FrsRank.type
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&type, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x6201ec32; //FrsRank.rank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&rank, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xd327ec06; //FrsRank.voteStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&voteStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x94cdb989; //FrsRank.playerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&playerList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x4cfed00b; //FrsRank.votedList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&votedList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x982c481a; //FrsRank.petitionerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&petitionerList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x7103ffb1; //FrsRank.winnerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&winnerList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa494d564; //FrsRank.lastUpdateTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastUpdateTick, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf94f6a65; //FrsRank.arenaChallengeScore
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&arenaChallengeScore, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x8536cecd; //FrsRank.arenaChallengesThisPhase
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&arenaChallengesThisPhase, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x6d8612f8; //FrsRank.arenaChallengesAcceptedThisPhase
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&arenaChallengesAcceptedThisPhase, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void FrsRankImplementation::writeJSON(nlohmann::json& j) {
	ManagedObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["type"] = type;

	thisObject["rank"] = rank;

	thisObject["voteStatus"] = voteStatus;

	thisObject["playerList"] = playerList;

	thisObject["votedList"] = votedList;

	thisObject["petitionerList"] = petitionerList;

	thisObject["winnerList"] = winnerList;

	thisObject["lastUpdateTick"] = lastUpdateTick;

	thisObject["arenaChallengeScore"] = arenaChallengeScore;

	thisObject["arenaChallengesThisPhase"] = arenaChallengesThisPhase;

	thisObject["arenaChallengesAcceptedThisPhase"] = arenaChallengesAcceptedThisPhase;

	j["FrsRank"] = thisObject;
}

FrsRankImplementation::FrsRankImplementation(short rankType, short rankNum, short status) {
	_initializeImplementation();
	// server/zone/managers/frs/FrsRank.idl():  		type = rankType;
	type = rankType;
	// server/zone/managers/frs/FrsRank.idl():  		rank = rankNum;
	rank = rankNum;
	// server/zone/managers/frs/FrsRank.idl():  		voteStatus = status;
	voteStatus = status;
	// server/zone/managers/frs/FrsRank.idl():  		arenaChallengeScore = 0;
	arenaChallengeScore = 0;
	// server/zone/managers/frs/FrsRank.idl():  		arenaChallengesThisPhase = 0;
	arenaChallengesThisPhase = 0;
	// server/zone/managers/frs/FrsRank.idl():  		arenaChallengesAcceptedThisPhase = 0;
	arenaChallengesAcceptedThisPhase = 0;
	// server/zone/managers/frs/FrsRank.idl():  		playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/zone/managers/frs/FrsRank.idl():  		votedList.setNoDuplicateInsertPlan();
	(&votedList)->setNoDuplicateInsertPlan();
	// server/zone/managers/frs/FrsRank.idl():  		petitionerList.setAllowOverwriteInsertPlan();
	(&petitionerList)->setAllowOverwriteInsertPlan();
}

short FrsRankImplementation::getRank() const{
	// server/zone/managers/frs/FrsRank.idl():  		return rank;
	return rank;
}

short FrsRankImplementation::getCouncilType() const{
	// server/zone/managers/frs/FrsRank.idl():  		return type;
	return type;
}

void FrsRankImplementation::addToPlayerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		playerList.put(id);
	(&playerList)->put(id);
}

void FrsRankImplementation::removeFromPlayerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		playerList.drop(id);
	(&playerList)->drop(id);
	// server/zone/managers/frs/FrsRank.idl():  		petitionerList.drop(id);
	(&petitionerList)->drop(id);
	// server/zone/managers/frs/FrsRank.idl():  		winnerList.drop(id);
	(&winnerList)->drop(id);
}

int FrsRankImplementation::getTotalPlayersInRank() {
	// server/zone/managers/frs/FrsRank.idl():  		return playerList.size();
	return (&playerList)->size();
}

bool FrsRankImplementation::isOnPlayerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		return playerList.contains(id);
	return (&playerList)->contains(id);
}

SortedVector<unsigned long long>* FrsRankImplementation::getPlayerList() {
	// server/zone/managers/frs/FrsRank.idl():  		return playerList;
	return (&playerList);
}

VectorMap<unsigned long long, int>* FrsRankImplementation::getPetitionerList() {
	// server/zone/managers/frs/FrsRank.idl():  		return petitionerList;
	return (&petitionerList);
}

void FrsRankImplementation::addToPetitionerList(unsigned long long playerID, int votes) {
	// server/zone/managers/frs/FrsRank.idl():  		petitionerList.put(playerID, votes);
	(&petitionerList)->put(playerID, votes);
}

bool FrsRankImplementation::isOnPetitionerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		return petitionerList.contains(id);
	return (&petitionerList)->contains(id);
}

int FrsRankImplementation::getPetitionerVotes(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		return petitionerList.get(id);
	return (&petitionerList)->get(id);
}

int FrsRankImplementation::getTotalPetitioners() {
	// server/zone/managers/frs/FrsRank.idl():  		return petitionerList.size();
	return (&petitionerList)->size();
}

void FrsRankImplementation::clearPetitionerList() {
	// server/zone/managers/frs/FrsRank.idl():  		petitionerList.removeAll();
	(&petitionerList)->removeAll();
}

void FrsRankImplementation::removeFromPetitionerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		petitionerList.drop(id);
	(&petitionerList)->drop(id);
}

void FrsRankImplementation::addToVotedList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		votedList.put(id);
	(&votedList)->put(id);
}

void FrsRankImplementation::removeFromVotedList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		votedList.drop(id);
	(&votedList)->drop(id);
}

void FrsRankImplementation::clearVotedList() {
	// server/zone/managers/frs/FrsRank.idl():  		votedList.removeAll();
	(&votedList)->removeAll();
}

bool FrsRankImplementation::isOnVotedList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		return votedList.contains(id);
	return (&votedList)->contains(id);
}

SortedVector<unsigned long long>* FrsRankImplementation::getVotedList() {
	// server/zone/managers/frs/FrsRank.idl():  		return votedList;
	return (&votedList);
}

void FrsRankImplementation::addToWinnerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		winnerList.put(id);
	(&winnerList)->put(id);
}

void FrsRankImplementation::removeFromWinnerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		winnerList.drop(id);
	(&winnerList)->drop(id);
}

int FrsRankImplementation::getTotalWinners() {
	// server/zone/managers/frs/FrsRank.idl():  		return winnerList.size();
	return (&winnerList)->size();
}

bool FrsRankImplementation::isOnWinnerList(unsigned long long id) {
	// server/zone/managers/frs/FrsRank.idl():  		return winnerList.contains(id);
	return (&winnerList)->contains(id);
}

void FrsRankImplementation::clearWinnerList() {
	// server/zone/managers/frs/FrsRank.idl():  		winnerList.removeAll();
	(&winnerList)->removeAll();
}

SortedVector<unsigned long long>* FrsRankImplementation::getWinnerList() {
	// server/zone/managers/frs/FrsRank.idl():  		return winnerList;
	return (&winnerList);
}

void FrsRankImplementation::updateLastTick() {
	// server/zone/managers/frs/FrsRank.idl():  		lastUpdateTick.updateToCurrentTime();
	(&lastUpdateTick)->updateToCurrentTime();
}

unsigned long long FrsRankImplementation::getLastUpdateTickDiff() {
	// server/zone/managers/frs/FrsRank.idl():  		return lastUpdateTick.miliDifference();
	return (&lastUpdateTick)->miliDifference();
}

short FrsRankImplementation::getVoteStatus() const{
	// server/zone/managers/frs/FrsRank.idl():  		return voteStatus;
	return voteStatus;
}

void FrsRankImplementation::setVoteStatus(int newStatus) {
	// server/zone/managers/frs/FrsRank.idl():  		voteStatus = newStatus;
	voteStatus = newStatus;
}

void FrsRankImplementation::resetVotingData() {
	// server/zone/managers/frs/FrsRank.idl():  		clearVotedList();
	clearVotedList();
	// server/zone/managers/frs/FrsRank.idl():  		clearPetitionerList();
	clearPetitionerList();
	// server/zone/managers/frs/FrsRank.idl():  		clearWinnerList();
	clearWinnerList();
}

int FrsRankImplementation::getArenaChallengesThisPhase() const{
	// server/zone/managers/frs/FrsRank.idl():  		return arenaChallengesThisPhase;
	return arenaChallengesThisPhase;
}

void FrsRankImplementation::setArenaChallengesThisPhase(int chal) {
	// server/zone/managers/frs/FrsRank.idl():  		arenaChallengesThisPhase = chal;
	arenaChallengesThisPhase = chal;
}

int FrsRankImplementation::getArenaChallengesAcceptedThisPhase() const{
	// server/zone/managers/frs/FrsRank.idl():  		return arenaChallengesAcceptedThisPhase;
	return arenaChallengesAcceptedThisPhase;
}

void FrsRankImplementation::setArenaChallengesAcceptedThisPhase(int chal) {
	// server/zone/managers/frs/FrsRank.idl():  		arenaChallengesAcceptedThisPhase = chal;
	arenaChallengesAcceptedThisPhase = chal;
}

int FrsRankImplementation::getArenaChallengeScore() const{
	// server/zone/managers/frs/FrsRank.idl():  		return arenaChallengeScore;
	return arenaChallengeScore;
}

void FrsRankImplementation::setArenaChallengeScore(int chal) {
	// server/zone/managers/frs/FrsRank.idl():  		arenaChallengeScore = chal;
	arenaChallengeScore = chal;
}

/*
 *	FrsRankAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FrsRankAdapter::FrsRankAdapter(FrsRank* obj) : ManagedObjectAdapter(obj) {
}

void FrsRankAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETRANK__:
		{
			
			short _m_res = getRank();
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_GETCOUNCILTYPE__:
		{
			
			short _m_res = getCouncilType();
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_ADDTOPLAYERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			addToPlayerList(id);
			
		}
		break;
	case RPC_REMOVEFROMPLAYERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			removeFromPlayerList(id);
			
		}
		break;
	case RPC_GETTOTALPLAYERSINRANK__:
		{
			
			int _m_res = getTotalPlayersInRank();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISONPLAYERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnPlayerList(id);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDTOPETITIONERLIST__LONG_INT_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			int votes = inv->getSignedIntParameter();
			
			addToPetitionerList(playerID, votes);
			
		}
		break;
	case RPC_ISONPETITIONERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnPetitionerList(id);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETPETITIONERVOTES__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			int _m_res = getPetitionerVotes(id);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETTOTALPETITIONERS__:
		{
			
			int _m_res = getTotalPetitioners();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CLEARPETITIONERLIST__:
		{
			
			clearPetitionerList();
			
		}
		break;
	case RPC_REMOVEFROMPETITIONERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			removeFromPetitionerList(id);
			
		}
		break;
	case RPC_ADDTOVOTEDLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			addToVotedList(id);
			
		}
		break;
	case RPC_REMOVEFROMVOTEDLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			removeFromVotedList(id);
			
		}
		break;
	case RPC_CLEARVOTEDLIST__:
		{
			
			clearVotedList();
			
		}
		break;
	case RPC_ISONVOTEDLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnVotedList(id);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDTOWINNERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			addToWinnerList(id);
			
		}
		break;
	case RPC_REMOVEFROMWINNERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			removeFromWinnerList(id);
			
		}
		break;
	case RPC_GETTOTALWINNERS__:
		{
			
			int _m_res = getTotalWinners();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISONWINNERLIST__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			bool _m_res = isOnWinnerList(id);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CLEARWINNERLIST__:
		{
			
			clearWinnerList();
			
		}
		break;
	case RPC_UPDATELASTTICK__:
		{
			
			updateLastTick();
			
		}
		break;
	case RPC_GETLASTUPDATETICKDIFF__:
		{
			
			unsigned long long _m_res = getLastUpdateTickDiff();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETVOTESTATUS__:
		{
			
			short _m_res = getVoteStatus();
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_SETVOTESTATUS__INT_:
		{
			int newStatus = inv->getSignedIntParameter();
			
			setVoteStatus(newStatus);
			
		}
		break;
	case RPC_RESETVOTINGDATA__:
		{
			
			resetVotingData();
			
		}
		break;
	case RPC_GETARENACHALLENGESTHISPHASE__:
		{
			
			int _m_res = getArenaChallengesThisPhase();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETARENACHALLENGESTHISPHASE__INT_:
		{
			int chal = inv->getSignedIntParameter();
			
			setArenaChallengesThisPhase(chal);
			
		}
		break;
	case RPC_GETARENACHALLENGESACCEPTEDTHISPHASE__:
		{
			
			int _m_res = getArenaChallengesAcceptedThisPhase();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETARENACHALLENGESACCEPTEDTHISPHASE__INT_:
		{
			int chal = inv->getSignedIntParameter();
			
			setArenaChallengesAcceptedThisPhase(chal);
			
		}
		break;
	case RPC_GETARENACHALLENGESCORE__:
		{
			
			int _m_res = getArenaChallengeScore();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETARENACHALLENGESCORE__INT_:
		{
			int chal = inv->getSignedIntParameter();
			
			setArenaChallengeScore(chal);
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

short FrsRankAdapter::getRank() const {
	return (static_cast<FrsRank*>(stub))->getRank();
}

short FrsRankAdapter::getCouncilType() const {
	return (static_cast<FrsRank*>(stub))->getCouncilType();
}

void FrsRankAdapter::addToPlayerList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->addToPlayerList(id);
}

void FrsRankAdapter::removeFromPlayerList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->removeFromPlayerList(id);
}

int FrsRankAdapter::getTotalPlayersInRank() {
	return (static_cast<FrsRank*>(stub))->getTotalPlayersInRank();
}

bool FrsRankAdapter::isOnPlayerList(unsigned long long id) {
	return (static_cast<FrsRank*>(stub))->isOnPlayerList(id);
}

void FrsRankAdapter::addToPetitionerList(unsigned long long playerID, int votes) {
	(static_cast<FrsRank*>(stub))->addToPetitionerList(playerID, votes);
}

bool FrsRankAdapter::isOnPetitionerList(unsigned long long id) {
	return (static_cast<FrsRank*>(stub))->isOnPetitionerList(id);
}

int FrsRankAdapter::getPetitionerVotes(unsigned long long id) {
	return (static_cast<FrsRank*>(stub))->getPetitionerVotes(id);
}

int FrsRankAdapter::getTotalPetitioners() {
	return (static_cast<FrsRank*>(stub))->getTotalPetitioners();
}

void FrsRankAdapter::clearPetitionerList() {
	(static_cast<FrsRank*>(stub))->clearPetitionerList();
}

void FrsRankAdapter::removeFromPetitionerList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->removeFromPetitionerList(id);
}

void FrsRankAdapter::addToVotedList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->addToVotedList(id);
}

void FrsRankAdapter::removeFromVotedList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->removeFromVotedList(id);
}

void FrsRankAdapter::clearVotedList() {
	(static_cast<FrsRank*>(stub))->clearVotedList();
}

bool FrsRankAdapter::isOnVotedList(unsigned long long id) {
	return (static_cast<FrsRank*>(stub))->isOnVotedList(id);
}

void FrsRankAdapter::addToWinnerList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->addToWinnerList(id);
}

void FrsRankAdapter::removeFromWinnerList(unsigned long long id) {
	(static_cast<FrsRank*>(stub))->removeFromWinnerList(id);
}

int FrsRankAdapter::getTotalWinners() {
	return (static_cast<FrsRank*>(stub))->getTotalWinners();
}

bool FrsRankAdapter::isOnWinnerList(unsigned long long id) {
	return (static_cast<FrsRank*>(stub))->isOnWinnerList(id);
}

void FrsRankAdapter::clearWinnerList() {
	(static_cast<FrsRank*>(stub))->clearWinnerList();
}

void FrsRankAdapter::updateLastTick() {
	(static_cast<FrsRank*>(stub))->updateLastTick();
}

unsigned long long FrsRankAdapter::getLastUpdateTickDiff() {
	return (static_cast<FrsRank*>(stub))->getLastUpdateTickDiff();
}

short FrsRankAdapter::getVoteStatus() const {
	return (static_cast<FrsRank*>(stub))->getVoteStatus();
}

void FrsRankAdapter::setVoteStatus(int newStatus) {
	(static_cast<FrsRank*>(stub))->setVoteStatus(newStatus);
}

void FrsRankAdapter::resetVotingData() {
	(static_cast<FrsRank*>(stub))->resetVotingData();
}

int FrsRankAdapter::getArenaChallengesThisPhase() const {
	return (static_cast<FrsRank*>(stub))->getArenaChallengesThisPhase();
}

void FrsRankAdapter::setArenaChallengesThisPhase(int chal) {
	(static_cast<FrsRank*>(stub))->setArenaChallengesThisPhase(chal);
}

int FrsRankAdapter::getArenaChallengesAcceptedThisPhase() const {
	return (static_cast<FrsRank*>(stub))->getArenaChallengesAcceptedThisPhase();
}

void FrsRankAdapter::setArenaChallengesAcceptedThisPhase(int chal) {
	(static_cast<FrsRank*>(stub))->setArenaChallengesAcceptedThisPhase(chal);
}

int FrsRankAdapter::getArenaChallengeScore() const {
	return (static_cast<FrsRank*>(stub))->getArenaChallengeScore();
}

void FrsRankAdapter::setArenaChallengeScore(int chal) {
	(static_cast<FrsRank*>(stub))->setArenaChallengeScore(chal);
}

/*
 *	FrsRankHelper
 */

FrsRankHelper* FrsRankHelper::staticInitializer = FrsRankHelper::instance();

FrsRankHelper::FrsRankHelper() {
	className = "FrsRank";

	Core::getObjectBroker()->registerClass(className, this);
}

void FrsRankHelper::finalizeHelper() {
	FrsRankHelper::finalize();
}

DistributedObject* FrsRankHelper::instantiateObject() {
	return new FrsRank(DummyConstructorParameter::instance());
}

DistributedObjectServant* FrsRankHelper::instantiateServant() {
	return new FrsRankImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* FrsRankHelper::instantiatePOD() {
	return new FrsRankPOD();
}

DistributedObjectAdapter* FrsRankHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FrsRankAdapter(static_cast<FrsRank*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FrsRankPOD
 */

FrsRankPOD::~FrsRankPOD() {
}

FrsRankPOD::FrsRankPOD(void) {
	_className = "FrsRank";
}


void FrsRankPOD::writeJSON(nlohmann::json& j) {
	ManagedObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (type)
		thisObject["type"] = type.value();

	if (rank)
		thisObject["rank"] = rank.value();

	if (voteStatus)
		thisObject["voteStatus"] = voteStatus.value();

	if (playerList)
		thisObject["playerList"] = playerList.value();

	if (votedList)
		thisObject["votedList"] = votedList.value();

	if (petitionerList)
		thisObject["petitionerList"] = petitionerList.value();

	if (winnerList)
		thisObject["winnerList"] = winnerList.value();

	if (lastUpdateTick)
		thisObject["lastUpdateTick"] = lastUpdateTick.value();

	if (arenaChallengeScore)
		thisObject["arenaChallengeScore"] = arenaChallengeScore.value();

	if (arenaChallengesThisPhase)
		thisObject["arenaChallengesThisPhase"] = arenaChallengesThisPhase.value();

	if (arenaChallengesAcceptedThisPhase)
		thisObject["arenaChallengesAcceptedThisPhase"] = arenaChallengesAcceptedThisPhase.value();

	j["FrsRank"] = thisObject;
}


void FrsRankPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsRankPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsRankPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (type) {
	_nameHashCode = 0xf2e0e34b; //FrsRank.type
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&type.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (rank) {
	_nameHashCode = 0x6201ec32; //FrsRank.rank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&rank.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (voteStatus) {
	_nameHashCode = 0xd327ec06; //FrsRank.voteStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&voteStatus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (playerList) {
	_nameHashCode = 0x94cdb989; //FrsRank.playerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&playerList.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (votedList) {
	_nameHashCode = 0x4cfed00b; //FrsRank.votedList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&votedList.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (petitionerList) {
	_nameHashCode = 0x982c481a; //FrsRank.petitionerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&petitionerList.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (winnerList) {
	_nameHashCode = 0x7103ffb1; //FrsRank.winnerList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&winnerList.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lastUpdateTick) {
	_nameHashCode = 0xa494d564; //FrsRank.lastUpdateTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastUpdateTick.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (arenaChallengeScore) {
	_nameHashCode = 0xf94f6a65; //FrsRank.arenaChallengeScore
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&arenaChallengeScore.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (arenaChallengesThisPhase) {
	_nameHashCode = 0x8536cecd; //FrsRank.arenaChallengesThisPhase
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&arenaChallengesThisPhase.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (arenaChallengesAcceptedThisPhase) {
	_nameHashCode = 0x6d8612f8; //FrsRank.arenaChallengesAcceptedThisPhase
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&arenaChallengesAcceptedThisPhase.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool FrsRankPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf2e0e34b: //FrsRank.type
		{
			short _mntype;
			TypeInfo<short >::parseFromBinaryStream(&_mntype, stream);
			type = std::move(_mntype);
		}
		return true;

	case 0x6201ec32: //FrsRank.rank
		{
			short _mnrank;
			TypeInfo<short >::parseFromBinaryStream(&_mnrank, stream);
			rank = std::move(_mnrank);
		}
		return true;

	case 0xd327ec06: //FrsRank.voteStatus
		{
			short _mnvoteStatus;
			TypeInfo<short >::parseFromBinaryStream(&_mnvoteStatus, stream);
			voteStatus = std::move(_mnvoteStatus);
		}
		return true;

	case 0x94cdb989: //FrsRank.playerList
		{
			SortedVector<unsigned long long> _mnplayerList;
			TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&_mnplayerList, stream);
			playerList = std::move(_mnplayerList);
		}
		return true;

	case 0x4cfed00b: //FrsRank.votedList
		{
			SortedVector<unsigned long long> _mnvotedList;
			TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&_mnvotedList, stream);
			votedList = std::move(_mnvotedList);
		}
		return true;

	case 0x982c481a: //FrsRank.petitionerList
		{
			VectorMap<unsigned long long, int> _mnpetitionerList;
			TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&_mnpetitionerList, stream);
			petitionerList = std::move(_mnpetitionerList);
		}
		return true;

	case 0x7103ffb1: //FrsRank.winnerList
		{
			SortedVector<unsigned long long> _mnwinnerList;
			TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&_mnwinnerList, stream);
			winnerList = std::move(_mnwinnerList);
		}
		return true;

	case 0xa494d564: //FrsRank.lastUpdateTick
		{
			Time _mnlastUpdateTick;
			TypeInfo<Time >::parseFromBinaryStream(&_mnlastUpdateTick, stream);
			lastUpdateTick = std::move(_mnlastUpdateTick);
		}
		return true;

	case 0xf94f6a65: //FrsRank.arenaChallengeScore
		{
			int _mnarenaChallengeScore;
			TypeInfo<int >::parseFromBinaryStream(&_mnarenaChallengeScore, stream);
			arenaChallengeScore = std::move(_mnarenaChallengeScore);
		}
		return true;

	case 0x8536cecd: //FrsRank.arenaChallengesThisPhase
		{
			int _mnarenaChallengesThisPhase;
			TypeInfo<int >::parseFromBinaryStream(&_mnarenaChallengesThisPhase, stream);
			arenaChallengesThisPhase = std::move(_mnarenaChallengesThisPhase);
		}
		return true;

	case 0x6d8612f8: //FrsRank.arenaChallengesAcceptedThisPhase
		{
			int _mnarenaChallengesAcceptedThisPhase;
			TypeInfo<int >::parseFromBinaryStream(&_mnarenaChallengesAcceptedThisPhase, stream);
			arenaChallengesAcceptedThisPhase = std::move(_mnarenaChallengesAcceptedThisPhase);
		}
		return true;

	}

	return false;
}

void FrsRankPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsRankPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void FrsRankPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<short >::toBinaryStream(&type.value(), stream);

	TypeInfo<short >::toBinaryStream(&rank.value(), stream);

	TypeInfo<short >::toBinaryStream(&voteStatus.value(), stream);

	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&playerList.value(), stream);

	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&votedList.value(), stream);

	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&petitionerList.value(), stream);

	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&winnerList.value(), stream);

	TypeInfo<Time >::toBinaryStream(&lastUpdateTick.value(), stream);

	TypeInfo<int >::toBinaryStream(&arenaChallengeScore.value(), stream);

	TypeInfo<int >::toBinaryStream(&arenaChallengesThisPhase.value(), stream);

	TypeInfo<int >::toBinaryStream(&arenaChallengesAcceptedThisPhase.value(), stream);


}

