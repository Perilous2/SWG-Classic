/*
 *	autogen/server/zone/managers/frs/ArenaChallengeData.h generated by engine3 IDL compiler 0.70
 */

#ifndef ARENACHALLENGEDATA_H_
#define ARENACHALLENGEDATA_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "engine/core/ManagedObject.h"

#include "system/util/Vector.h"

#include "system/lang/Time.h"

namespace server {
namespace zone {
namespace managers {
namespace frs {

class ArenaChallengeData : public ManagedObject {
public:
	ArenaChallengeData(unsigned long long player, int rank);

	unsigned long long getChallengeStart() const;

	unsigned long long getChallengeAccepterID() const;

	void setChallengeAccepterID(unsigned long long newID);

	unsigned long long getChallengerID() const;

	int getChallengeRank() const;

	bool isChallengeCompleted() const;

	void setChallengeCompleted();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ArenaChallengeData(DummyConstructorParameter* param);

	virtual ~ArenaChallengeData();

	friend class ArenaChallengeDataHelper;
};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

namespace server {
namespace zone {
namespace managers {
namespace frs {

class ArenaChallengeDataImplementation : public ManagedObjectImplementation {
protected:
	Time challengeStart;

private:
	unsigned long long challengerID;

	unsigned long long challengeAccepterID;

	bool challengeCompleted;

	int challengeRank;

public:
	ArenaChallengeDataImplementation(unsigned long long player, int rank);

	ArenaChallengeDataImplementation(DummyConstructorParameter* param);

	unsigned long long getChallengeStart() const;

	unsigned long long getChallengeAccepterID() const;

	void setChallengeAccepterID(unsigned long long newID);

	unsigned long long getChallengerID() const;

	int getChallengeRank() const;

	bool isChallengeCompleted() const;

	void setChallengeCompleted();

	WeakReference<ArenaChallengeData*> _this;

	operator const ArenaChallengeData*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~ArenaChallengeDataImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ArenaChallengeData;
};

class ArenaChallengeDataAdapter : public ManagedObjectAdapter {
public:
	ArenaChallengeDataAdapter(ArenaChallengeData* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	unsigned long long getChallengeStart() const;

	unsigned long long getChallengeAccepterID() const;

	void setChallengeAccepterID(unsigned long long newID);

	unsigned long long getChallengerID() const;

	int getChallengeRank() const;

	bool isChallengeCompleted() const;

	void setChallengeCompleted();

};

class ArenaChallengeDataHelper : public DistributedObjectClassHelper, public Singleton<ArenaChallengeDataHelper> {
	static ArenaChallengeDataHelper* staticInitializer;

public:
	ArenaChallengeDataHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ArenaChallengeDataHelper>;
};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

namespace server {
namespace zone {
namespace managers {
namespace frs {

class ArenaChallengeDataPOD : public ManagedObjectPOD {
public:
	Optional<Time> challengeStart;

	Optional<unsigned long long> challengerID;

	Optional<unsigned long long> challengeAccepterID;

	Optional<bool> challengeCompleted;

	Optional<int> challengeRank;

	String _className;
	ArenaChallengeDataPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ArenaChallengeDataPOD();

};

} // namespace frs
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::frs;

#endif /*ARENACHALLENGEDATAPOD_H_*/
