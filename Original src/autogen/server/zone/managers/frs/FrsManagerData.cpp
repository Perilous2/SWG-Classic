/*
 *	autogen/server/zone/managers/frs/FrsManagerData.cpp generated by engine3 IDL compiler 0.70
 */

#include "FrsManagerData.h"

/*
 *	FrsManagerDataStub
 */

enum {RPC_GETTOTALLIGHTCHALLENGES__,RPC_ADDLIGHTCHALLENGE__LONG_CHALLENGEVOTEDATA_,RPC_REMOVELIGHTCHALLENGE__LONG_,RPC_HASCHALLENGEDRECENTLY__LONG_LONG_,RPC_GETCHALLENGETIME__LONG_,RPC_GETCHALLENGEDURATION__LONG_,RPC_UPDATECHALLENGETIME__LONG_,RPC_REMOVECHALLENGETIME__LONG_,RPC_REMOVEDEMOTETIME__LONG_,RPC_HASDEMOTEDRECENTLY__LONG_LONG_,RPC_GETDEMOTETIME__LONG_,RPC_GETDEMOTEDURATION__LONG_,RPC_UPDATEDEMOTETIME__LONG_,RPC_UPDATELASTMAINTENANCETICK__,RPC_GETLASTMAINTENANCETICK__,RPC_UPDATELASTVOTESTATUSTICK__,RPC_GETLASTVOTESTATUSTICK__,RPC_GETEXPERIENCEDEBT__LONG_,RPC_SETEXPERIENCEDEBT__LONG_INT_,RPC_REMOVEEXPERIENCEDEBT__LONG_,RPC_GETLASTARENAOPENTIME__,RPC_UPDATELASTARENAOPENTIME__,RPC_GETARENASTATUS__,RPC_SETARENASTATUS__SHORT_,RPC_ADDARENACHALLENGE__LONG_ARENACHALLENGEDATA_,RPC_HASOPENARENACHALLENGE__LONG_,RPC_GETARENACHALLENGE__LONG_,RPC_REMOVEARENACHALLENGE__LONG_,RPC_ADDARENAFIGHTER__LONG_,RPC_REMOVEARENAFIGHTER__LONG_,RPC_ISFIGHTINGINARENA__LONG_,};

FrsManagerData::FrsManagerData() : ManagedObject(DummyConstructorParameter::instance()) {
	FrsManagerDataImplementation* _implementation = new FrsManagerDataImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FrsManagerData");
}

FrsManagerData::FrsManagerData(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("FrsManagerData");
}

FrsManagerData::~FrsManagerData() {
}



Vector<ManagedReference<FrsRank* > >* FrsManagerData::getLightRanks() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getLightRanks();
	}
}

Vector<ManagedReference<FrsRank* > >* FrsManagerData::getDarkRanks() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getDarkRanks();
	}
}

VectorMap<unsigned long long, ManagedReference<ChallengeVoteData* > >* FrsManagerData::getLightChallenges() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getLightChallenges();
	}
}

int FrsManagerData::getTotalLightChallenges() const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALLIGHTCHALLENGES__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getTotalLightChallenges();
	}
}

void FrsManagerData::addLightChallenge(unsigned long long playerID, ChallengeVoteData* voteData) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDLIGHTCHALLENGE__LONG_CHALLENGEVOTEDATA_);
		method.addUnsignedLongParameter(playerID);
		method.addObjectParameter(voteData);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addLightChallenge(playerID, voteData);
	}
}

void FrsManagerData::removeLightChallenge(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVELIGHTCHALLENGE__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeLightChallenge(playerID);
	}
}

ChallengeVoteData* FrsManagerData::getLightChallenge(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getLightChallenge(playerID);
	}
}

bool FrsManagerData::hasChallengedRecently(unsigned long long playerID, unsigned long long challengeCooldown) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASCHALLENGEDRECENTLY__LONG_LONG_);
		method.addUnsignedLongParameter(playerID);
		method.addUnsignedLongParameter(challengeCooldown);

		return method.executeWithBooleanReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->hasChallengedRecently(playerID, challengeCooldown);
	}
}

unsigned long long FrsManagerData::getChallengeTime(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGETIME__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getChallengeTime(playerID);
	}
}

unsigned long long FrsManagerData::getChallengeDuration(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHALLENGEDURATION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getChallengeDuration(playerID);
	}
}

void FrsManagerData::updateChallengeTime(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATECHALLENGETIME__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateChallengeTime(playerID);
	}
}

void FrsManagerData::removeChallengeTime(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECHALLENGETIME__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeChallengeTime(playerID);
	}
}

void FrsManagerData::removeDemoteTime(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDEMOTETIME__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeDemoteTime(playerID);
	}
}

bool FrsManagerData::hasDemotedRecently(unsigned long long playerID, unsigned long long demoteCooldown) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDEMOTEDRECENTLY__LONG_LONG_);
		method.addUnsignedLongParameter(playerID);
		method.addUnsignedLongParameter(demoteCooldown);

		return method.executeWithBooleanReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->hasDemotedRecently(playerID, demoteCooldown);
	}
}

unsigned long long FrsManagerData::getDemoteTime(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEMOTETIME__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getDemoteTime(playerID);
	}
}

unsigned long long FrsManagerData::getDemoteDuration(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEMOTEDURATION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getDemoteDuration(playerID);
	}
}

void FrsManagerData::updateDemoteTime(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEDEMOTETIME__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateDemoteTime(playerID);
	}
}

void FrsManagerData::updateLastMaintenanceTick() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTMAINTENANCETICK__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateLastMaintenanceTick();
	}
}

unsigned long long FrsManagerData::getLastMaintenanceTick() const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTMAINTENANCETICK__);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getLastMaintenanceTick();
	}
}

void FrsManagerData::updateLastVoteStatusTick() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTVOTESTATUSTICK__);

		method.executeWithVoidReturn();
	} else {
		_implementation->updateLastVoteStatusTick();
	}
}

unsigned long long FrsManagerData::getLastVoteStatusTick() const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTVOTESTATUSTICK__);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getLastVoteStatusTick();
	}
}

int FrsManagerData::getExperienceDebt(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEXPERIENCEDEBT__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithSignedIntReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getExperienceDebt(playerID);
	}
}

void FrsManagerData::setExperienceDebt(unsigned long long playerID, int debt) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEXPERIENCEDEBT__LONG_INT_);
		method.addUnsignedLongParameter(playerID);
		method.addSignedIntParameter(debt);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setExperienceDebt(playerID, debt);
	}
}

void FrsManagerData::removeExperienceDebt(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEEXPERIENCEDEBT__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeExperienceDebt(playerID);
	}
}

unsigned long long FrsManagerData::getLastArenaOpenTime() const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTARENAOPENTIME__);

		return method.executeWithUnsignedLongReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getLastArenaOpenTime();
	}
}

void FrsManagerData::updateLastArenaOpenTime() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATELASTARENAOPENTIME__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->updateLastArenaOpenTime();
	}
}

short FrsManagerData::getArenaStatus() const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARENASTATUS__);

		return method.executeWithSignedShortReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaStatus();
	}
}

void FrsManagerData::setArenaStatus(short status) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARENASTATUS__SHORT_);
		method.addSignedShortParameter(status);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setArenaStatus(status);
	}
}

void FrsManagerData::addArenaChallenge(unsigned long long playerID, ArenaChallengeData* data) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDARENACHALLENGE__LONG_ARENACHALLENGEDATA_);
		method.addUnsignedLongParameter(playerID);
		method.addObjectParameter(data);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addArenaChallenge(playerID, data);
	}
}

bool FrsManagerData::hasOpenArenaChallenge(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASOPENARENACHALLENGE__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->hasOpenArenaChallenge(playerID);
	}
}

ArenaChallengeData* FrsManagerData::getArenaChallenge(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARENACHALLENGE__LONG_);
		method.addUnsignedLongParameter(playerID);

		return static_cast<ArenaChallengeData*>(method.executeWithObjectReturn());
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaChallenge(playerID);
	}
}

void FrsManagerData::removeArenaChallenge(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEARENACHALLENGE__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeArenaChallenge(playerID);
	}
}

void FrsManagerData::addArenaFighter(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDARENAFIGHTER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->addArenaFighter(playerID);
	}
}

void FrsManagerData::removeArenaFighter(unsigned long long playerID) {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEARENAFIGHTER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->removeArenaFighter(playerID);
	}
}

bool FrsManagerData::isFightingInArena(unsigned long long playerID) const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFIGHTINGINARENA__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->isFightingInArena(playerID);
	}
}

const SortedVector<unsigned long long>* FrsManagerData::getArenaFighters() const {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaFighters();
	}
}

VectorMap<unsigned long long, ManagedReference<ArenaChallengeData* > >* FrsManagerData::getArenaChallenges() {
	FrsManagerDataImplementation* _implementation = static_cast<FrsManagerDataImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		return _implementation->getArenaChallenges();
	}
}

DistributedObjectServant* FrsManagerData::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FrsManagerData::_getImplementationForRead() const {
	return _impl;
}

void FrsManagerData::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FrsManagerDataImplementation
 */

FrsManagerDataImplementation::FrsManagerDataImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


FrsManagerDataImplementation::~FrsManagerDataImplementation() {
}


void FrsManagerDataImplementation::finalize() {
}

void FrsManagerDataImplementation::_initializeImplementation() {
	_setClassHelper(FrsManagerDataHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FrsManagerDataImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FrsManagerData*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FrsManagerDataImplementation::_getStub() {
	return _this.get();
}

FrsManagerDataImplementation::operator const FrsManagerData*() {
	return _this.get();
}

void FrsManagerDataImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FrsManagerDataImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FrsManagerDataImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FrsManagerDataImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FrsManagerDataImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FrsManagerDataImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FrsManagerDataImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FrsManagerDataImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("FrsManagerData");

}

void FrsManagerDataImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsManagerDataImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FrsManagerDataImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xb16c72d3: //FrsManagerData.lastVoteStatusTick
		TypeInfo<Time >::parseFromBinaryStream(&lastVoteStatusTick, stream);
		return true;

	case 0x9aa9ef69: //FrsManagerData.lastMaintenanceTick
		TypeInfo<Time >::parseFromBinaryStream(&lastMaintenanceTick, stream);
		return true;

	case 0x2f140207: //FrsManagerData.lastArenaOpenTime
		TypeInfo<Time >::parseFromBinaryStream(&lastArenaOpenTime, stream);
		return true;

	case 0x20984f62: //FrsManagerData.experienceDebt
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&experienceDebt, stream);
		return true;

	case 0xaeae46af: //FrsManagerData.lightChallenges
		TypeInfo<VectorMap<unsigned long long, ManagedReference<ChallengeVoteData* > > >::parseFromBinaryStream(&lightChallenges, stream);
		return true;

	case 0x2e895480: //FrsManagerData.challengeTimes
		TypeInfo<FrsTimeMap >::parseFromBinaryStream(&challengeTimes, stream);
		return true;

	case 0x2b003bce: //FrsManagerData.demoteTimes
		TypeInfo<FrsTimeMap >::parseFromBinaryStream(&demoteTimes, stream);
		return true;

	case 0x1f1d407c: //FrsManagerData.arenaChallenges
		TypeInfo<VectorMap<unsigned long long, ManagedReference<ArenaChallengeData* > > >::parseFromBinaryStream(&arenaChallenges, stream);
		return true;

	case 0x33073d0f: //FrsManagerData.arenaFighters
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&arenaFighters, stream);
		return true;

	case 0x51b751ac: //FrsManagerData.lightRanks
		TypeInfo<Vector<ManagedReference<FrsRank* > > >::parseFromBinaryStream(&lightRanks, stream);
		return true;

	case 0xdee47ebb: //FrsManagerData.darkRanks
		TypeInfo<Vector<ManagedReference<FrsRank* > > >::parseFromBinaryStream(&darkRanks, stream);
		return true;

	case 0xa10fba33: //FrsManagerData.arenaStatus
		TypeInfo<short >::parseFromBinaryStream(&arenaStatus, stream);
		return true;

	}

	return false;
}

void FrsManagerDataImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsManagerDataImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsManagerDataImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xb16c72d3; //FrsManagerData.lastVoteStatusTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastVoteStatusTick, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x9aa9ef69; //FrsManagerData.lastMaintenanceTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTick, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x2f140207; //FrsManagerData.lastArenaOpenTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastArenaOpenTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x20984f62; //FrsManagerData.experienceDebt
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&experienceDebt, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xaeae46af; //FrsManagerData.lightChallenges
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<ChallengeVoteData* > > >::toBinaryStream(&lightChallenges, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x2e895480; //FrsManagerData.challengeTimes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<FrsTimeMap >::toBinaryStream(&challengeTimes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x2b003bce; //FrsManagerData.demoteTimes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<FrsTimeMap >::toBinaryStream(&demoteTimes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1f1d407c; //FrsManagerData.arenaChallenges
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<ArenaChallengeData* > > >::toBinaryStream(&arenaChallenges, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x33073d0f; //FrsManagerData.arenaFighters
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&arenaFighters, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x51b751ac; //FrsManagerData.lightRanks
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<FrsRank* > > >::toBinaryStream(&lightRanks, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xdee47ebb; //FrsManagerData.darkRanks
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<FrsRank* > > >::toBinaryStream(&darkRanks, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa10fba33; //FrsManagerData.arenaStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&arenaStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void FrsManagerDataImplementation::writeJSON(nlohmann::json& j) {
	ManagedObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["lastVoteStatusTick"] = lastVoteStatusTick;

	thisObject["lastMaintenanceTick"] = lastMaintenanceTick;

	thisObject["lastArenaOpenTime"] = lastArenaOpenTime;

	thisObject["experienceDebt"] = experienceDebt;

	thisObject["lightChallenges"] = lightChallenges;

	thisObject["challengeTimes"] = challengeTimes;

	thisObject["demoteTimes"] = demoteTimes;

	thisObject["arenaChallenges"] = arenaChallenges;

	thisObject["arenaFighters"] = arenaFighters;

	thisObject["lightRanks"] = lightRanks;

	thisObject["darkRanks"] = darkRanks;

	thisObject["arenaStatus"] = arenaStatus;

	j["FrsManagerData"] = thisObject;
}

FrsManagerDataImplementation::FrsManagerDataImplementation() {
	_initializeImplementation();
	// server/zone/managers/frs/FrsManagerData.idl():  		experienceDebt.setAllowOverwriteInsertPlan();
	(&experienceDebt)->setAllowOverwriteInsertPlan();
	// server/zone/managers/frs/FrsManagerData.idl():  		experienceDebt.setNullValue(0);
	(&experienceDebt)->setNullValue(0);
	// server/zone/managers/frs/FrsManagerData.idl():  		arenaStatus = 0;
	arenaStatus = 0;
}

Vector<ManagedReference<FrsRank* > >* FrsManagerDataImplementation::getLightRanks() {
	// server/zone/managers/frs/FrsManagerData.idl():  		return lightRanks;
	return (&lightRanks);
}

Vector<ManagedReference<FrsRank* > >* FrsManagerDataImplementation::getDarkRanks() {
	// server/zone/managers/frs/FrsManagerData.idl():  		return darkRanks;
	return (&darkRanks);
}

VectorMap<unsigned long long, ManagedReference<ChallengeVoteData* > >* FrsManagerDataImplementation::getLightChallenges() {
	// server/zone/managers/frs/FrsManagerData.idl():  		return lightChallenges;
	return (&lightChallenges);
}

int FrsManagerDataImplementation::getTotalLightChallenges() const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return lightChallenges.size();
	return (&lightChallenges)->size();
}

void FrsManagerDataImplementation::addLightChallenge(unsigned long long playerID, ChallengeVoteData* voteData) {
	// server/zone/managers/frs/FrsManagerData.idl():  		lightChallenges.put(playerID, voteData);
	(&lightChallenges)->put(playerID, voteData);
}

void FrsManagerDataImplementation::removeLightChallenge(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  	}
	if ((&lightChallenges)->contains(playerID))	// server/zone/managers/frs/FrsManagerData.idl():  			lightChallenges.drop(playerID);
	(&lightChallenges)->drop(playerID);
}

ChallengeVoteData* FrsManagerDataImplementation::getLightChallenge(unsigned long long playerID) const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return lightChallenges.get(playerID);
	return (&lightChallenges)->get(playerID);
}

void FrsManagerDataImplementation::removeChallengeTime(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  	}
	if ((&challengeTimes)->contains(playerID))	// server/zone/managers/frs/FrsManagerData.idl():  			challengeTimes.drop(playerID);
	(&challengeTimes)->drop(playerID);
}

void FrsManagerDataImplementation::removeDemoteTime(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  	}
	if ((&demoteTimes)->contains(playerID))	// server/zone/managers/frs/FrsManagerData.idl():  			demoteTimes.drop(playerID);
	(&demoteTimes)->drop(playerID);
}

void FrsManagerDataImplementation::updateLastMaintenanceTick() {
	// server/zone/managers/frs/FrsManagerData.idl():  		lastMaintenanceTick.updateToCurrentTime();
	(&lastMaintenanceTick)->updateToCurrentTime();
}

unsigned long long FrsManagerDataImplementation::getLastMaintenanceTick() const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return lastMaintenanceTick.getMiliTime();
	return (&lastMaintenanceTick)->getMiliTime();
}

void FrsManagerDataImplementation::updateLastVoteStatusTick() {
	// server/zone/managers/frs/FrsManagerData.idl():  		lastVoteStatusTick.updateToCurrentTime();
	(&lastVoteStatusTick)->updateToCurrentTime();
}

unsigned long long FrsManagerDataImplementation::getLastVoteStatusTick() const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return lastVoteStatusTick.getMiliTime();
	return (&lastVoteStatusTick)->getMiliTime();
}

int FrsManagerDataImplementation::getExperienceDebt(unsigned long long playerID) const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return 
	if ((&experienceDebt)->contains(playerID))	// server/zone/managers/frs/FrsManagerData.idl():  			return experienceDebt.get(playerID);
	return (&experienceDebt)->get(playerID);
	// server/zone/managers/frs/FrsManagerData.idl():  		return 0;
	return 0;
}

void FrsManagerDataImplementation::setExperienceDebt(unsigned long long playerID, int debt) {
	// server/zone/managers/frs/FrsManagerData.idl():  		experienceDebt.put(playerID, debt);
	(&experienceDebt)->put(playerID, debt);
}

void FrsManagerDataImplementation::removeExperienceDebt(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  		experienceDebt.drop(playerID);
	(&experienceDebt)->drop(playerID);
}

unsigned long long FrsManagerDataImplementation::getLastArenaOpenTime() const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return lastArenaOpenTime.getMiliTime();
	return (&lastArenaOpenTime)->getMiliTime();
}

void FrsManagerDataImplementation::updateLastArenaOpenTime() {
	// server/zone/managers/frs/FrsManagerData.idl():  		lastArenaOpenTime.updateToCurrentTime();
	(&lastArenaOpenTime)->updateToCurrentTime();
}

short FrsManagerDataImplementation::getArenaStatus() const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return arenaStatus;
	return arenaStatus;
}

void FrsManagerDataImplementation::setArenaStatus(short status) {
	// server/zone/managers/frs/FrsManagerData.idl():  		arenaStatus = status;
	arenaStatus = status;
}

void FrsManagerDataImplementation::addArenaChallenge(unsigned long long playerID, ArenaChallengeData* data) {
	// server/zone/managers/frs/FrsManagerData.idl():  		arenaChallenges.put(playerID, data);
	(&arenaChallenges)->put(playerID, data);
}

bool FrsManagerDataImplementation::hasOpenArenaChallenge(unsigned long long playerID) const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return arenaChallenges.contains(playerID);
	return (&arenaChallenges)->contains(playerID);
}

ArenaChallengeData* FrsManagerDataImplementation::getArenaChallenge(unsigned long long playerID) const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return arenaChallenges.get(playerID);
	return (&arenaChallenges)->get(playerID);
}

void FrsManagerDataImplementation::removeArenaChallenge(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  		arenaChallenges.drop(playerID);
	(&arenaChallenges)->drop(playerID);
}

void FrsManagerDataImplementation::addArenaFighter(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  		arenaFighters.put(playerID);
	(&arenaFighters)->put(playerID);
}

void FrsManagerDataImplementation::removeArenaFighter(unsigned long long playerID) {
	// server/zone/managers/frs/FrsManagerData.idl():  	}
	if ((&arenaFighters)->contains(playerID))	// server/zone/managers/frs/FrsManagerData.idl():  			arenaFighters.drop(playerID);
	(&arenaFighters)->drop(playerID);
}

bool FrsManagerDataImplementation::isFightingInArena(unsigned long long playerID) const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return arenaFighters.contains(playerID);
	return (&arenaFighters)->contains(playerID);
}

const SortedVector<unsigned long long>* FrsManagerDataImplementation::getArenaFighters() const{
	// server/zone/managers/frs/FrsManagerData.idl():  		return arenaFighters;
	return (&arenaFighters);
}

VectorMap<unsigned long long, ManagedReference<ArenaChallengeData* > >* FrsManagerDataImplementation::getArenaChallenges() {
	// server/zone/managers/frs/FrsManagerData.idl():  		return arenaChallenges;
	return (&arenaChallenges);
}

/*
 *	FrsManagerDataAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FrsManagerDataAdapter::FrsManagerDataAdapter(FrsManagerData* obj) : ManagedObjectAdapter(obj) {
}

void FrsManagerDataAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETTOTALLIGHTCHALLENGES__:
		{
			
			int _m_res = getTotalLightChallenges();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDLIGHTCHALLENGE__LONG_CHALLENGEVOTEDATA_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			ChallengeVoteData* voteData = static_cast<ChallengeVoteData*>(inv->getObjectParameter());
			
			addLightChallenge(playerID, voteData);
			
		}
		break;
	case RPC_REMOVELIGHTCHALLENGE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeLightChallenge(playerID);
			
		}
		break;
	case RPC_HASCHALLENGEDRECENTLY__LONG_LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			unsigned long long challengeCooldown = inv->getUnsignedLongParameter();
			
			bool _m_res = hasChallengedRecently(playerID, challengeCooldown);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETCHALLENGETIME__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			unsigned long long _m_res = getChallengeTime(playerID);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETCHALLENGEDURATION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			unsigned long long _m_res = getChallengeDuration(playerID);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_UPDATECHALLENGETIME__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			updateChallengeTime(playerID);
			
		}
		break;
	case RPC_REMOVECHALLENGETIME__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeChallengeTime(playerID);
			
		}
		break;
	case RPC_REMOVEDEMOTETIME__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeDemoteTime(playerID);
			
		}
		break;
	case RPC_HASDEMOTEDRECENTLY__LONG_LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			unsigned long long demoteCooldown = inv->getUnsignedLongParameter();
			
			bool _m_res = hasDemotedRecently(playerID, demoteCooldown);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETDEMOTETIME__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			unsigned long long _m_res = getDemoteTime(playerID);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETDEMOTEDURATION__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			unsigned long long _m_res = getDemoteDuration(playerID);
			resp->insertLong(_m_res);
		}
		break;
	case RPC_UPDATEDEMOTETIME__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			updateDemoteTime(playerID);
			
		}
		break;
	case RPC_UPDATELASTMAINTENANCETICK__:
		{
			
			updateLastMaintenanceTick();
			
		}
		break;
	case RPC_GETLASTMAINTENANCETICK__:
		{
			
			unsigned long long _m_res = getLastMaintenanceTick();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_UPDATELASTVOTESTATUSTICK__:
		{
			
			updateLastVoteStatusTick();
			
		}
		break;
	case RPC_GETLASTVOTESTATUSTICK__:
		{
			
			unsigned long long _m_res = getLastVoteStatusTick();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETEXPERIENCEDEBT__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			int _m_res = getExperienceDebt(playerID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETEXPERIENCEDEBT__LONG_INT_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			int debt = inv->getSignedIntParameter();
			
			setExperienceDebt(playerID, debt);
			
		}
		break;
	case RPC_REMOVEEXPERIENCEDEBT__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeExperienceDebt(playerID);
			
		}
		break;
	case RPC_GETLASTARENAOPENTIME__:
		{
			
			unsigned long long _m_res = getLastArenaOpenTime();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_UPDATELASTARENAOPENTIME__:
		{
			
			updateLastArenaOpenTime();
			
		}
		break;
	case RPC_GETARENASTATUS__:
		{
			
			short _m_res = getArenaStatus();
			resp->insertSignedShort(_m_res);
		}
		break;
	case RPC_SETARENASTATUS__SHORT_:
		{
			short status = inv->getSignedShortParameter();
			
			setArenaStatus(status);
			
		}
		break;
	case RPC_ADDARENACHALLENGE__LONG_ARENACHALLENGEDATA_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			ArenaChallengeData* data = static_cast<ArenaChallengeData*>(inv->getObjectParameter());
			
			addArenaChallenge(playerID, data);
			
		}
		break;
	case RPC_HASOPENARENACHALLENGE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = hasOpenArenaChallenge(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETARENACHALLENGE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			DistributedObject* _m_res = getArenaChallenge(playerID);
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_REMOVEARENACHALLENGE__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeArenaChallenge(playerID);
			
		}
		break;
	case RPC_ADDARENAFIGHTER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			addArenaFighter(playerID);
			
		}
		break;
	case RPC_REMOVEARENAFIGHTER__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			removeArenaFighter(playerID);
			
		}
		break;
	case RPC_ISFIGHTINGINARENA__LONG_:
		{
			unsigned long long playerID = inv->getUnsignedLongParameter();
			
			bool _m_res = isFightingInArena(playerID);
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

int FrsManagerDataAdapter::getTotalLightChallenges() const {
	return (static_cast<FrsManagerData*>(stub))->getTotalLightChallenges();
}

void FrsManagerDataAdapter::addLightChallenge(unsigned long long playerID, ChallengeVoteData* voteData) {
	(static_cast<FrsManagerData*>(stub))->addLightChallenge(playerID, voteData);
}

void FrsManagerDataAdapter::removeLightChallenge(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->removeLightChallenge(playerID);
}

bool FrsManagerDataAdapter::hasChallengedRecently(unsigned long long playerID, unsigned long long challengeCooldown) {
	return (static_cast<FrsManagerData*>(stub))->hasChallengedRecently(playerID, challengeCooldown);
}

unsigned long long FrsManagerDataAdapter::getChallengeTime(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->getChallengeTime(playerID);
}

unsigned long long FrsManagerDataAdapter::getChallengeDuration(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->getChallengeDuration(playerID);
}

void FrsManagerDataAdapter::updateChallengeTime(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->updateChallengeTime(playerID);
}

void FrsManagerDataAdapter::removeChallengeTime(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->removeChallengeTime(playerID);
}

void FrsManagerDataAdapter::removeDemoteTime(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->removeDemoteTime(playerID);
}

bool FrsManagerDataAdapter::hasDemotedRecently(unsigned long long playerID, unsigned long long demoteCooldown) {
	return (static_cast<FrsManagerData*>(stub))->hasDemotedRecently(playerID, demoteCooldown);
}

unsigned long long FrsManagerDataAdapter::getDemoteTime(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->getDemoteTime(playerID);
}

unsigned long long FrsManagerDataAdapter::getDemoteDuration(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->getDemoteDuration(playerID);
}

void FrsManagerDataAdapter::updateDemoteTime(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->updateDemoteTime(playerID);
}

void FrsManagerDataAdapter::updateLastMaintenanceTick() {
	(static_cast<FrsManagerData*>(stub))->updateLastMaintenanceTick();
}

unsigned long long FrsManagerDataAdapter::getLastMaintenanceTick() const {
	return (static_cast<FrsManagerData*>(stub))->getLastMaintenanceTick();
}

void FrsManagerDataAdapter::updateLastVoteStatusTick() {
	(static_cast<FrsManagerData*>(stub))->updateLastVoteStatusTick();
}

unsigned long long FrsManagerDataAdapter::getLastVoteStatusTick() const {
	return (static_cast<FrsManagerData*>(stub))->getLastVoteStatusTick();
}

int FrsManagerDataAdapter::getExperienceDebt(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->getExperienceDebt(playerID);
}

void FrsManagerDataAdapter::setExperienceDebt(unsigned long long playerID, int debt) {
	(static_cast<FrsManagerData*>(stub))->setExperienceDebt(playerID, debt);
}

void FrsManagerDataAdapter::removeExperienceDebt(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->removeExperienceDebt(playerID);
}

unsigned long long FrsManagerDataAdapter::getLastArenaOpenTime() const {
	return (static_cast<FrsManagerData*>(stub))->getLastArenaOpenTime();
}

void FrsManagerDataAdapter::updateLastArenaOpenTime() {
	(static_cast<FrsManagerData*>(stub))->updateLastArenaOpenTime();
}

short FrsManagerDataAdapter::getArenaStatus() const {
	return (static_cast<FrsManagerData*>(stub))->getArenaStatus();
}

void FrsManagerDataAdapter::setArenaStatus(short status) {
	(static_cast<FrsManagerData*>(stub))->setArenaStatus(status);
}

void FrsManagerDataAdapter::addArenaChallenge(unsigned long long playerID, ArenaChallengeData* data) {
	(static_cast<FrsManagerData*>(stub))->addArenaChallenge(playerID, data);
}

bool FrsManagerDataAdapter::hasOpenArenaChallenge(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->hasOpenArenaChallenge(playerID);
}

ArenaChallengeData* FrsManagerDataAdapter::getArenaChallenge(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->getArenaChallenge(playerID);
}

void FrsManagerDataAdapter::removeArenaChallenge(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->removeArenaChallenge(playerID);
}

void FrsManagerDataAdapter::addArenaFighter(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->addArenaFighter(playerID);
}

void FrsManagerDataAdapter::removeArenaFighter(unsigned long long playerID) {
	(static_cast<FrsManagerData*>(stub))->removeArenaFighter(playerID);
}

bool FrsManagerDataAdapter::isFightingInArena(unsigned long long playerID) const {
	return (static_cast<FrsManagerData*>(stub))->isFightingInArena(playerID);
}

/*
 *	FrsManagerDataHelper
 */

FrsManagerDataHelper* FrsManagerDataHelper::staticInitializer = FrsManagerDataHelper::instance();

FrsManagerDataHelper::FrsManagerDataHelper() {
	className = "FrsManagerData";

	Core::getObjectBroker()->registerClass(className, this);
}

void FrsManagerDataHelper::finalizeHelper() {
	FrsManagerDataHelper::finalize();
}

DistributedObject* FrsManagerDataHelper::instantiateObject() {
	return new FrsManagerData(DummyConstructorParameter::instance());
}

DistributedObjectServant* FrsManagerDataHelper::instantiateServant() {
	return new FrsManagerDataImplementation();
}

DistributedObjectPOD* FrsManagerDataHelper::instantiatePOD() {
	return new FrsManagerDataPOD();
}

DistributedObjectAdapter* FrsManagerDataHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FrsManagerDataAdapter(static_cast<FrsManagerData*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FrsManagerDataPOD
 */

FrsManagerDataPOD::~FrsManagerDataPOD() {
}

FrsManagerDataPOD::FrsManagerDataPOD(void) {
	_className = "FrsManagerData";
}


void FrsManagerDataPOD::writeJSON(nlohmann::json& j) {
	ManagedObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (lastVoteStatusTick)
		thisObject["lastVoteStatusTick"] = lastVoteStatusTick.value();

	if (lastMaintenanceTick)
		thisObject["lastMaintenanceTick"] = lastMaintenanceTick.value();

	if (lastArenaOpenTime)
		thisObject["lastArenaOpenTime"] = lastArenaOpenTime.value();

	if (experienceDebt)
		thisObject["experienceDebt"] = experienceDebt.value();

	if (lightChallenges)
		thisObject["lightChallenges"] = lightChallenges.value();

	if (challengeTimes)
		thisObject["challengeTimes"] = challengeTimes.value();

	if (demoteTimes)
		thisObject["demoteTimes"] = demoteTimes.value();

	if (arenaChallenges)
		thisObject["arenaChallenges"] = arenaChallenges.value();

	if (arenaFighters)
		thisObject["arenaFighters"] = arenaFighters.value();

	if (lightRanks)
		thisObject["lightRanks"] = lightRanks.value();

	if (darkRanks)
		thisObject["darkRanks"] = darkRanks.value();

	if (arenaStatus)
		thisObject["arenaStatus"] = arenaStatus.value();

	j["FrsManagerData"] = thisObject;
}


void FrsManagerDataPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FrsManagerDataPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FrsManagerDataPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (lastVoteStatusTick) {
	_nameHashCode = 0xb16c72d3; //FrsManagerData.lastVoteStatusTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastVoteStatusTick.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lastMaintenanceTick) {
	_nameHashCode = 0x9aa9ef69; //FrsManagerData.lastMaintenanceTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTick.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lastArenaOpenTime) {
	_nameHashCode = 0x2f140207; //FrsManagerData.lastArenaOpenTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastArenaOpenTime.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (experienceDebt) {
	_nameHashCode = 0x20984f62; //FrsManagerData.experienceDebt
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&experienceDebt.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lightChallenges) {
	_nameHashCode = 0xaeae46af; //FrsManagerData.lightChallenges
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<ChallengeVoteDataPOD* > > >::toBinaryStream(&lightChallenges.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (challengeTimes) {
	_nameHashCode = 0x2e895480; //FrsManagerData.challengeTimes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<FrsTimeMap >::toBinaryStream(&challengeTimes.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (demoteTimes) {
	_nameHashCode = 0x2b003bce; //FrsManagerData.demoteTimes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<FrsTimeMap >::toBinaryStream(&demoteTimes.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (arenaChallenges) {
	_nameHashCode = 0x1f1d407c; //FrsManagerData.arenaChallenges
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<ArenaChallengeDataPOD* > > >::toBinaryStream(&arenaChallenges.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (arenaFighters) {
	_nameHashCode = 0x33073d0f; //FrsManagerData.arenaFighters
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&arenaFighters.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lightRanks) {
	_nameHashCode = 0x51b751ac; //FrsManagerData.lightRanks
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<FrsRankPOD* > > >::toBinaryStream(&lightRanks.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (darkRanks) {
	_nameHashCode = 0xdee47ebb; //FrsManagerData.darkRanks
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<FrsRankPOD* > > >::toBinaryStream(&darkRanks.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (arenaStatus) {
	_nameHashCode = 0xa10fba33; //FrsManagerData.arenaStatus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&arenaStatus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool FrsManagerDataPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xb16c72d3: //FrsManagerData.lastVoteStatusTick
		{
			Time _mnlastVoteStatusTick;
			TypeInfo<Time >::parseFromBinaryStream(&_mnlastVoteStatusTick, stream);
			lastVoteStatusTick = std::move(_mnlastVoteStatusTick);
		}
		return true;

	case 0x9aa9ef69: //FrsManagerData.lastMaintenanceTick
		{
			Time _mnlastMaintenanceTick;
			TypeInfo<Time >::parseFromBinaryStream(&_mnlastMaintenanceTick, stream);
			lastMaintenanceTick = std::move(_mnlastMaintenanceTick);
		}
		return true;

	case 0x2f140207: //FrsManagerData.lastArenaOpenTime
		{
			Time _mnlastArenaOpenTime;
			TypeInfo<Time >::parseFromBinaryStream(&_mnlastArenaOpenTime, stream);
			lastArenaOpenTime = std::move(_mnlastArenaOpenTime);
		}
		return true;

	case 0x20984f62: //FrsManagerData.experienceDebt
		{
			VectorMap<unsigned long long, int> _mnexperienceDebt;
			TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&_mnexperienceDebt, stream);
			experienceDebt = std::move(_mnexperienceDebt);
		}
		return true;

	case 0xaeae46af: //FrsManagerData.lightChallenges
		{
			VectorMap<unsigned long long, ManagedReference<ChallengeVoteDataPOD* > > _mnlightChallenges;
			TypeInfo<VectorMap<unsigned long long, ManagedReference<ChallengeVoteDataPOD* > > >::parseFromBinaryStream(&_mnlightChallenges, stream);
			lightChallenges = std::move(_mnlightChallenges);
		}
		return true;

	case 0x2e895480: //FrsManagerData.challengeTimes
		{
			FrsTimeMap _mnchallengeTimes;
			TypeInfo<FrsTimeMap >::parseFromBinaryStream(&_mnchallengeTimes, stream);
			challengeTimes = std::move(_mnchallengeTimes);
		}
		return true;

	case 0x2b003bce: //FrsManagerData.demoteTimes
		{
			FrsTimeMap _mndemoteTimes;
			TypeInfo<FrsTimeMap >::parseFromBinaryStream(&_mndemoteTimes, stream);
			demoteTimes = std::move(_mndemoteTimes);
		}
		return true;

	case 0x1f1d407c: //FrsManagerData.arenaChallenges
		{
			VectorMap<unsigned long long, ManagedReference<ArenaChallengeDataPOD* > > _mnarenaChallenges;
			TypeInfo<VectorMap<unsigned long long, ManagedReference<ArenaChallengeDataPOD* > > >::parseFromBinaryStream(&_mnarenaChallenges, stream);
			arenaChallenges = std::move(_mnarenaChallenges);
		}
		return true;

	case 0x33073d0f: //FrsManagerData.arenaFighters
		{
			SortedVector<unsigned long long> _mnarenaFighters;
			TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&_mnarenaFighters, stream);
			arenaFighters = std::move(_mnarenaFighters);
		}
		return true;

	case 0x51b751ac: //FrsManagerData.lightRanks
		{
			Vector<ManagedReference<FrsRankPOD* > > _mnlightRanks;
			TypeInfo<Vector<ManagedReference<FrsRankPOD* > > >::parseFromBinaryStream(&_mnlightRanks, stream);
			lightRanks = std::move(_mnlightRanks);
		}
		return true;

	case 0xdee47ebb: //FrsManagerData.darkRanks
		{
			Vector<ManagedReference<FrsRankPOD* > > _mndarkRanks;
			TypeInfo<Vector<ManagedReference<FrsRankPOD* > > >::parseFromBinaryStream(&_mndarkRanks, stream);
			darkRanks = std::move(_mndarkRanks);
		}
		return true;

	case 0xa10fba33: //FrsManagerData.arenaStatus
		{
			short _mnarenaStatus;
			TypeInfo<short >::parseFromBinaryStream(&_mnarenaStatus, stream);
			arenaStatus = std::move(_mnarenaStatus);
		}
		return true;

	}

	return false;
}

void FrsManagerDataPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FrsManagerDataPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void FrsManagerDataPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<Time >::toBinaryStream(&lastVoteStatusTick.value(), stream);

	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTick.value(), stream);

	TypeInfo<Time >::toBinaryStream(&lastArenaOpenTime.value(), stream);

	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&experienceDebt.value(), stream);

	TypeInfo<VectorMap<unsigned long long, ManagedReference<ChallengeVoteDataPOD* > > >::toBinaryStream(&lightChallenges.value(), stream);

	TypeInfo<FrsTimeMap >::toBinaryStream(&challengeTimes.value(), stream);

	TypeInfo<FrsTimeMap >::toBinaryStream(&demoteTimes.value(), stream);

	TypeInfo<VectorMap<unsigned long long, ManagedReference<ArenaChallengeDataPOD* > > >::toBinaryStream(&arenaChallenges.value(), stream);

	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&arenaFighters.value(), stream);

	TypeInfo<Vector<ManagedReference<FrsRankPOD* > > >::toBinaryStream(&lightRanks.value(), stream);

	TypeInfo<Vector<ManagedReference<FrsRankPOD* > > >::toBinaryStream(&darkRanks.value(), stream);

	TypeInfo<short >::toBinaryStream(&arenaStatus.value(), stream);


}

