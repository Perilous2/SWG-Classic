/*
 *	autogen/server/zone/managers/director/ScreenPlayObserver.cpp generated by engine3 IDL compiler 0.70
 */

#include "ScreenPlayObserver.h"

/*
 *	ScreenPlayObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 1468633181,RPC_STOREFLOATVALUE__STRING_FLOAT_,RPC_SETSCREENPLAY__STRING_,RPC_SETSCREENKEY__STRING_,RPC_GETSCREENPLAY__,RPC_GETSCREENKEY__,RPC_GETFLOATVALUE__LONG_};

ScreenPlayObserver::ScreenPlayObserver() : Observer(DummyConstructorParameter::instance()) {
	ScreenPlayObserverImplementation* _implementation = new ScreenPlayObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ScreenPlayObserver");
}

ScreenPlayObserver::ScreenPlayObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("ScreenPlayObserver");
}

ScreenPlayObserver::~ScreenPlayObserver() {
}



int ScreenPlayObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

void ScreenPlayObserver::storeFloatValue(const String& dataKey, float dataVal) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOREFLOATVALUE__STRING_FLOAT_);
		method.addAsciiParameter(dataKey);
		method.addFloatParameter(dataVal);

		method.executeWithVoidReturn();
	} else {
		_implementation->storeFloatValue(dataKey, dataVal);
	}
}

void ScreenPlayObserver::setScreenPlay(const String& screen) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSCREENPLAY__STRING_);
		method.addAsciiParameter(screen);

		method.executeWithVoidReturn();
	} else {
		_implementation->setScreenPlay(screen);
	}
}

void ScreenPlayObserver::setScreenKey(const String& screenKey) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSCREENKEY__STRING_);
		method.addAsciiParameter(screenKey);

		method.executeWithVoidReturn();
	} else {
		_implementation->setScreenKey(screenKey);
	}
}

String ScreenPlayObserver::getScreenPlay() {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSCREENPLAY__);

		String _return_getScreenPlay;
		method.executeWithAsciiReturn(_return_getScreenPlay);
		return _return_getScreenPlay;
	} else {
		return _implementation->getScreenPlay();
	}
}

String ScreenPlayObserver::getScreenKey() {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSCREENKEY__);

		String _return_getScreenKey;
		method.executeWithAsciiReturn(_return_getScreenKey);
		return _return_getScreenKey;
	} else {
		return _implementation->getScreenKey();
	}
}

float ScreenPlayObserver::getFloatValue(unsigned long long dataKey) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFLOATVALUE__LONG_);
		method.addUnsignedLongParameter(dataKey);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getFloatValue(dataKey);
	}
}

DistributedObjectServant* ScreenPlayObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ScreenPlayObserver::_getImplementationForRead() const {
	return _impl;
}

void ScreenPlayObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ScreenPlayObserverImplementation
 */

ScreenPlayObserverImplementation::ScreenPlayObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


ScreenPlayObserverImplementation::~ScreenPlayObserverImplementation() {
}


void ScreenPlayObserverImplementation::finalize() {
}

void ScreenPlayObserverImplementation::_initializeImplementation() {
	_setClassHelper(ScreenPlayObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ScreenPlayObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ScreenPlayObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* ScreenPlayObserverImplementation::_getStub() {
	return _this.get();
}

ScreenPlayObserverImplementation::operator const ScreenPlayObserver*() {
	return _this.get();
}

void ScreenPlayObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ScreenPlayObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ScreenPlayObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ScreenPlayObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ScreenPlayObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ScreenPlayObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ScreenPlayObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ScreenPlayObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("ScreenPlayObserver");

}

void ScreenPlayObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ScreenPlayObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ScreenPlayObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf15f2260: //ScreenPlayObserver.play
		TypeInfo<String >::parseFromBinaryStream(&play, stream);
		return true;

	case 0x9c694938: //ScreenPlayObserver.key
		TypeInfo<String >::parseFromBinaryStream(&key, stream);
		return true;

	case 0xbd967ee2: //ScreenPlayObserver.floatData
		TypeInfo<VectorMap<unsigned long long, float> >::parseFromBinaryStream(&floatData, stream);
		return true;

	}

	return false;
}

void ScreenPlayObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ScreenPlayObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ScreenPlayObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xf15f2260; //ScreenPlayObserver.play
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&play, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x9c694938; //ScreenPlayObserver.key
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&key, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xbd967ee2; //ScreenPlayObserver.floatData
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, float> >::toBinaryStream(&floatData, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void ScreenPlayObserverImplementation::writeJSON(nlohmann::json& j) {
	ObserverImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["play"] = play;

	thisObject["key"] = key;

	thisObject["floatData"] = floatData;

	j["ScreenPlayObserver"] = thisObject;
}

ScreenPlayObserverImplementation::ScreenPlayObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/director/ScreenPlayObserver.idl():  		play = "";
	play = "";
	// server/zone/managers/director/ScreenPlayObserver.idl():  		key = "";
	key = "";
	// server/zone/managers/director/ScreenPlayObserver.idl():  		floatData.setNoDuplicateInsertPlan();
	(&floatData)->setNoDuplicateInsertPlan();
}

void ScreenPlayObserverImplementation::setScreenPlay(const String& screen) {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		play = screen;
	play = screen;
}

void ScreenPlayObserverImplementation::setScreenKey(const String& screenKey) {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		key = screenKey;
	key = screenKey;
}

String ScreenPlayObserverImplementation::getScreenPlay() {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		return play;
	return play;
}

String ScreenPlayObserverImplementation::getScreenKey() {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		return key;
	return key;
}

float ScreenPlayObserverImplementation::getFloatValue(unsigned long long dataKey) {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		return floatData.get(dataKey);
	return (&floatData)->get(dataKey);
}

/*
 *	ScreenPlayObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ScreenPlayObserverAdapter::ScreenPlayObserverAdapter(ScreenPlayObserver* obj) : ObserverAdapter(obj) {
}

void ScreenPlayObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_STOREFLOATVALUE__STRING_FLOAT_:
		{
			 String dataKey; inv->getAsciiParameter(dataKey);
			float dataVal = inv->getFloatParameter();
			
			storeFloatValue(dataKey, dataVal);
			
		}
		break;
	case RPC_SETSCREENPLAY__STRING_:
		{
			 String screen; inv->getAsciiParameter(screen);
			
			setScreenPlay(screen);
			
		}
		break;
	case RPC_SETSCREENKEY__STRING_:
		{
			 String screenKey; inv->getAsciiParameter(screenKey);
			
			setScreenKey(screenKey);
			
		}
		break;
	case RPC_GETSCREENPLAY__:
		{
			
			String _m_res = getScreenPlay();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETSCREENKEY__:
		{
			
			String _m_res = getScreenKey();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETFLOATVALUE__LONG_:
		{
			unsigned long long dataKey = inv->getUnsignedLongParameter();
			
			float _m_res = getFloatValue(dataKey);
			resp->insertFloat(_m_res);
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int ScreenPlayObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<ScreenPlayObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void ScreenPlayObserverAdapter::storeFloatValue(const String& dataKey, float dataVal) {
	(static_cast<ScreenPlayObserver*>(stub))->storeFloatValue(dataKey, dataVal);
}

void ScreenPlayObserverAdapter::setScreenPlay(const String& screen) {
	(static_cast<ScreenPlayObserver*>(stub))->setScreenPlay(screen);
}

void ScreenPlayObserverAdapter::setScreenKey(const String& screenKey) {
	(static_cast<ScreenPlayObserver*>(stub))->setScreenKey(screenKey);
}

String ScreenPlayObserverAdapter::getScreenPlay() {
	return (static_cast<ScreenPlayObserver*>(stub))->getScreenPlay();
}

String ScreenPlayObserverAdapter::getScreenKey() {
	return (static_cast<ScreenPlayObserver*>(stub))->getScreenKey();
}

float ScreenPlayObserverAdapter::getFloatValue(unsigned long long dataKey) {
	return (static_cast<ScreenPlayObserver*>(stub))->getFloatValue(dataKey);
}

/*
 *	ScreenPlayObserverHelper
 */

ScreenPlayObserverHelper* ScreenPlayObserverHelper::staticInitializer = ScreenPlayObserverHelper::instance();

ScreenPlayObserverHelper::ScreenPlayObserverHelper() {
	className = "ScreenPlayObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void ScreenPlayObserverHelper::finalizeHelper() {
	ScreenPlayObserverHelper::finalize();
}

DistributedObject* ScreenPlayObserverHelper::instantiateObject() {
	return new ScreenPlayObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* ScreenPlayObserverHelper::instantiateServant() {
	return new ScreenPlayObserverImplementation();
}

DistributedObjectPOD* ScreenPlayObserverHelper::instantiatePOD() {
	return new ScreenPlayObserverPOD();
}

DistributedObjectAdapter* ScreenPlayObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ScreenPlayObserverAdapter(static_cast<ScreenPlayObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaScreenPlayObserver::className[] = "LuaScreenPlayObserver";

Luna<LuaScreenPlayObserver>::RegType LuaScreenPlayObserver::Register[] = {
	{ "_setObject", &LuaScreenPlayObserver::_setObject },
	{ "_getObject", &LuaScreenPlayObserver::_getObject },
	{ "notifyObserverEvent", &LuaScreenPlayObserver::notifyObserverEvent },
	{ "storeFloatValue", &LuaScreenPlayObserver::storeFloatValue },
	{ "setScreenPlay", &LuaScreenPlayObserver::setScreenPlay },
	{ "setScreenKey", &LuaScreenPlayObserver::setScreenKey },
	{ "getScreenPlay", &LuaScreenPlayObserver::getScreenPlay },
	{ "getScreenKey", &LuaScreenPlayObserver::getScreenKey },
	{ "getFloatValue", &LuaScreenPlayObserver::getFloatValue },
	{ 0, 0 }
};

LuaScreenPlayObserver::LuaScreenPlayObserver(lua_State *L) {
	realObject = static_cast<ScreenPlayObserver*>(lua_touserdata(L, 1));
}

LuaScreenPlayObserver::~LuaScreenPlayObserver() {
}

int LuaScreenPlayObserver::_setObject(lua_State* L) {
	realObject = static_cast<ScreenPlayObserver*>(lua_touserdata(L, -1));

	return 0;
}

int LuaScreenPlayObserver::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaScreenPlayObserver::notifyObserverEvent(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (lua_isuserdata(L, -3)) {
				if (lua_isnumber(L, -4)) {
					if (parameterCount == 4) {
						unsigned int eventType = lua_tointeger(L, -4);
						Observable* observable = static_cast<Observable*>(lua_touserdata(L, -3));
						ManagedObject* arg1 = static_cast<ManagedObject*>(lua_touserdata(L, -2));
						long long arg2 = lua_tointeger(L, -1);

						int result = realObject->notifyObserverEvent(eventType, observable, arg1, arg2);

						lua_pushinteger(L, result);
						return 1;
					} else {
						throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:notifyObserverEvent(integer, userdata, userdata, integer)'");
					}
				} else {
					throw LuaCallbackException(L, "invalid argument at 3 for lua method 'ScreenPlayObserver:notifyObserverEvent(integer, userdata, userdata, integer)'");
				}
			} else {
				throw LuaCallbackException(L, "invalid argument at 2 for lua method 'ScreenPlayObserver:notifyObserverEvent(integer, userdata, userdata, integer)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'ScreenPlayObserver:notifyObserverEvent(integer, userdata, userdata, integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ScreenPlayObserver:notifyObserverEvent(integer, userdata, userdata, integer)'");
	}
	return 0;
}

int LuaScreenPlayObserver::storeFloatValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (lua_isstring(L, -2)) {
			if (parameterCount == 2) {
				const String dataKey = lua_tostring(L, -2);
				float dataVal = lua_tonumber(L, -1);

				realObject->storeFloatValue(dataKey, dataVal);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:storeFloatValue(string, number)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'ScreenPlayObserver:storeFloatValue(string, number)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ScreenPlayObserver:storeFloatValue(string, number)'");
	}
	return 0;
}

int LuaScreenPlayObserver::setScreenPlay(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String screen = lua_tostring(L, -1);

			realObject->setScreenPlay(screen);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:setScreenPlay(string)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ScreenPlayObserver:setScreenPlay(string)'");
	}
	return 0;
}

int LuaScreenPlayObserver::setScreenKey(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String screenKey = lua_tostring(L, -1);

			realObject->setScreenKey(screenKey);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:setScreenKey(string)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ScreenPlayObserver:setScreenKey(string)'");
	}
	return 0;
}

int LuaScreenPlayObserver::getScreenPlay(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		String result = realObject->getScreenPlay();

		lua_pushstring(L, result.toCharArray());
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:getScreenPlay()'");
	}
	return 0;
}

int LuaScreenPlayObserver::getScreenKey(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		String result = realObject->getScreenKey();

		lua_pushstring(L, result.toCharArray());
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:getScreenKey()'");
	}
	return 0;
}

int LuaScreenPlayObserver::getFloatValue(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			unsigned long long dataKey = lua_tointeger(L, -1);

			float result = realObject->getFloatValue(dataKey);

			lua_pushnumber(L, result);
			return 1;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ScreenPlayObserver:getFloatValue(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ScreenPlayObserver:getFloatValue(integer)'");
	}
	return 0;
}

/*
 *	ScreenPlayObserverPOD
 */

ScreenPlayObserverPOD::~ScreenPlayObserverPOD() {
}

ScreenPlayObserverPOD::ScreenPlayObserverPOD(void) {
	_className = "ScreenPlayObserver";
}


void ScreenPlayObserverPOD::writeJSON(nlohmann::json& j) {
	ObserverPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (play)
		thisObject["play"] = play.value();

	if (key)
		thisObject["key"] = key.value();

	if (floatData)
		thisObject["floatData"] = floatData.value();

	j["ScreenPlayObserver"] = thisObject;
}


void ScreenPlayObserverPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ScreenPlayObserverPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ScreenPlayObserverPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (play) {
	_nameHashCode = 0xf15f2260; //ScreenPlayObserver.play
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&play.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (key) {
	_nameHashCode = 0x9c694938; //ScreenPlayObserver.key
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&key.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (floatData) {
	_nameHashCode = 0xbd967ee2; //ScreenPlayObserver.floatData
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, float> >::toBinaryStream(&floatData.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool ScreenPlayObserverPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf15f2260: //ScreenPlayObserver.play
		{
			String _mnplay;
			TypeInfo<String >::parseFromBinaryStream(&_mnplay, stream);
			play = std::move(_mnplay);
		}
		return true;

	case 0x9c694938: //ScreenPlayObserver.key
		{
			String _mnkey;
			TypeInfo<String >::parseFromBinaryStream(&_mnkey, stream);
			key = std::move(_mnkey);
		}
		return true;

	case 0xbd967ee2: //ScreenPlayObserver.floatData
		{
			VectorMap<unsigned long long, float> _mnfloatData;
			TypeInfo<VectorMap<unsigned long long, float> >::parseFromBinaryStream(&_mnfloatData, stream);
			floatData = std::move(_mnfloatData);
		}
		return true;

	}

	return false;
}

void ScreenPlayObserverPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ScreenPlayObserverPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ScreenPlayObserverPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);

	TypeInfo<String >::toBinaryStream(&play.value(), stream);

	TypeInfo<String >::toBinaryStream(&key.value(), stream);

	TypeInfo<VectorMap<unsigned long long, float> >::toBinaryStream(&floatData.value(), stream);


}

