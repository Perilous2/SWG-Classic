/*
 *	autogen/server/zone/ZoneClientSession.cpp generated by engine3 IDL compiler 0.70
 */

#include "ZoneClientSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	ZoneClientSessionStub
 */

enum {RPC_DISCONNECT__ = 1805730903,RPC_DISCONNECT__BOOL_,RPC_BALANCEPACKETCHECKUPTIME__,RPC_RESETPACKETCHECKUPTIME__,RPC_CLOSECONNECTION__BOOL_BOOL_,RPC_SETUPLOGGING__,RPC_INFO__STRING_BOOL_,RPC_DEBUG__STRING_,RPC_ERROR__STRING_,RPC_GETADDRESS__,RPC_GETIPADDRESS__,RPC_SETPLAYER__CREATUREOBJECT_,RPC_SETSESSIONID__STRING_,RPC_SETACCOUNTID__INT_,RPC_GETCOMMANDCOUNT__,RPC_INCREASECOMMANDCOUNT__,RPC_RESETCOMMANDCOUNT__,RPC_GETPLAYER__,RPC_GETSESSIONID__,RPC_GETACCOUNTID__,RPC_HASCHARACTER__LONG_INT_,RPC_ADDCHARACTER__LONG_INT_,RPC_ADDBANNEDCHARACTER__LONG_INT_,RPC_GETCHARACTERCOUNT__,RPC_GETCHARACTERCOUNT__INT_,RPC_RESETCHARACTERS__};

ZoneClientSession::ZoneClientSession(BaseClientProxy* session) : ManagedObject(DummyConstructorParameter::instance()) {
	ZoneClientSessionImplementation* _implementation = new ZoneClientSessionImplementation(session);
	_impl = _implementation;
	_implementation->_initializeImplementation();
	_impl->_setStub(this);
	_setClassName("ZoneClientSession");
}

ZoneClientSession::ZoneClientSession(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("ZoneClientSession");
}

ZoneClientSession::~ZoneClientSession() {
}



void ZoneClientSession::disconnect() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DISCONNECT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->disconnect();
	}
}

void ZoneClientSession::disconnect(bool doLock) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DISCONNECT__BOOL_);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else {
		_implementation->disconnect(doLock);
	}
}

void ZoneClientSession::sendMessage(BasePacket* msg) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->sendMessage(msg);
	}
}

void ZoneClientSession::balancePacketCheckupTime() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BALANCEPACKETCHECKUPTIME__);

		method.executeWithVoidReturn();
	} else {
		_implementation->balancePacketCheckupTime();
	}
}

void ZoneClientSession::resetPacketCheckupTime() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETPACKETCHECKUPTIME__);

		method.executeWithVoidReturn();
	} else {
		_implementation->resetPacketCheckupTime();
	}
}

void ZoneClientSession::closeConnection(bool lockPlayer, bool doLock) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSECONNECTION__BOOL_BOOL_);
		method.addBooleanParameter(lockPlayer);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else {
		_implementation->closeConnection(lockPlayer, doLock);
	}
}

void ZoneClientSession::setupLogging() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUPLOGGING__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setupLogging();
	}
}

void ZoneClientSession::info(const String& msg, bool force) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFO__STRING_BOOL_);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(force);

		method.executeWithVoidReturn();
	} else {
		_implementation->info(msg, force);
	}
}

void ZoneClientSession::debug(const String& msg) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEBUG__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->debug(msg);
	}
}

void ZoneClientSession::error(const String& msg) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ERROR__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else {
		_implementation->error(msg);
	}
}

void ZoneClientSession::executeOrderedTask(Task* task) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->executeOrderedTask(task);
	}
}

PendingTasksMap* ZoneClientSession::getPendingTasks() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPendingTasks();
	}
}

LoggerHelperStream ZoneClientSession::info(int forced) const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->info(forced);
	}
}

LoggerHelperStream ZoneClientSession::error() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->error();
	}
}

LoggerHelperStream ZoneClientSession::debug() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->debug();
	}
}

String ZoneClientSession::getAddress() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETADDRESS__);

		String _return_getAddress;
		method.executeWithAsciiReturn(_return_getAddress);
		return _return_getAddress;
	} else {
		return _implementation->getAddress();
	}
}

String ZoneClientSession::getIPAddress() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETIPADDRESS__);

		String _return_getIPAddress;
		method.executeWithAsciiReturn(_return_getIPAddress);
		return _return_getIPAddress;
	} else {
		return _implementation->getIPAddress();
	}
}

void ZoneClientSession::setPlayer(CreatureObject* playerCreature) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(playerCreature);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPlayer(playerCreature);
	}
}

void ZoneClientSession::setSessionID(const String& id) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSESSIONID__STRING_);
		method.addAsciiParameter(id);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSessionID(id);
	}
}

void ZoneClientSession::setAccountID(unsigned int acc) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACCOUNTID__INT_);
		method.addUnsignedIntParameter(acc);

		method.executeWithVoidReturn();
	} else {
		_implementation->setAccountID(acc);
	}
}

int ZoneClientSession::getCommandCount() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMMANDCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCommandCount();
	}
}

void ZoneClientSession::increaseCommandCount() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREASECOMMANDCOUNT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->increaseCommandCount();
	}
}

void ZoneClientSession::resetCommandCount() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETCOMMANDCOUNT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->resetCommandCount();
	}
}

const Time* ZoneClientSession::getCommandSpamCooldown() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCommandSpamCooldown();
	}
}

Time* ZoneClientSession::getCommandSpamCooldown() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCommandSpamCooldown();
	}
}

BaseClientProxy* ZoneClientSession::getSession() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getSession();
	}
}

Reference<CreatureObject* > ZoneClientSession::getPlayer() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPlayer();
	}
}

String ZoneClientSession::getSessionID() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSESSIONID__);

		String _return_getSessionID;
		method.executeWithAsciiReturn(_return_getSessionID);
		return _return_getSessionID;
	} else {
		return _implementation->getSessionID();
	}
}

unsigned int ZoneClientSession::getAccountID() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACCOUNTID__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getAccountID();
	}
}

bool ZoneClientSession::hasCharacter(unsigned long long cid, unsigned int galaxyId) const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASCHARACTER__LONG_INT_);
		method.addUnsignedLongParameter(cid);
		method.addUnsignedIntParameter(galaxyId);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasCharacter(cid, galaxyId);
	}
}

void ZoneClientSession::addCharacter(unsigned long long cid, unsigned int galaxyId) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCHARACTER__LONG_INT_);
		method.addUnsignedLongParameter(cid);
		method.addUnsignedIntParameter(galaxyId);

		method.executeWithVoidReturn();
	} else {
		_implementation->addCharacter(cid, galaxyId);
	}
}

void ZoneClientSession::addBannedCharacter(unsigned long long cid, unsigned int galaxyId) {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBANNEDCHARACTER__LONG_INT_);
		method.addUnsignedLongParameter(cid);
		method.addUnsignedIntParameter(galaxyId);

		method.executeWithVoidReturn();
	} else {
		_implementation->addBannedCharacter(cid, galaxyId);
	}
}

int ZoneClientSession::getCharacterCount() const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHARACTERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCharacterCount();
	}
}

int ZoneClientSession::getCharacterCount(int galaxyId) const {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHARACTERCOUNT__INT_);
		method.addSignedIntParameter(galaxyId);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCharacterCount(galaxyId);
	}
}

void ZoneClientSession::resetCharacters() {
	ZoneClientSessionImplementation* _implementation = static_cast<ZoneClientSessionImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETCHARACTERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->resetCharacters();
	}
}

DistributedObjectServant* ZoneClientSession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ZoneClientSession::_getImplementationForRead() const {
	return _impl;
}

void ZoneClientSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ZoneClientSessionImplementation
 */

ZoneClientSessionImplementation::ZoneClientSessionImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ZoneClientSessionImplementation::~ZoneClientSessionImplementation() {
}


void ZoneClientSessionImplementation::finalize() {
}

void ZoneClientSessionImplementation::_initializeImplementation() {
	_setClassHelper(ZoneClientSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ZoneClientSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ZoneClientSession*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneClientSessionImplementation::_getStub() {
	return _this.get();
}

ZoneClientSessionImplementation::operator const ZoneClientSession*() {
	return _this.get();
}

void ZoneClientSessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ZoneClientSessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ZoneClientSessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ZoneClientSessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ZoneClientSessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ZoneClientSessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ZoneClientSessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ZoneClientSessionImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ZoneClientSession");

}

void ZoneClientSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ZoneClientSessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ZoneClientSessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x8979a0bb: //ZoneClientSession.ipAddress
		TypeInfo<String >::parseFromBinaryStream(&ipAddress, stream);
		return true;

	case 0xa95d2c6e: //ZoneClientSession.characters
		TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::parseFromBinaryStream(&characters, stream);
		return true;

	case 0xe00b3c8d: //ZoneClientSession.bannedCharacters
		TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::parseFromBinaryStream(&bannedCharacters, stream);
		return true;

	case 0x9b46d0c2: //ZoneClientSession.player
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;

	case 0x7e078577: //ZoneClientSession.sessionID
		TypeInfo<String >::parseFromBinaryStream(&sessionID, stream);
		return true;

	case 0x90088679: //ZoneClientSession.accountID
		TypeInfo<unsigned int >::parseFromBinaryStream(&accountID, stream);
		return true;

	case 0x1da62823: //ZoneClientSession.disconnecting
		TypeInfo<bool >::parseFromBinaryStream(&disconnecting, stream);
		return true;

	case 0xe5829801: //ZoneClientSession.commandSpamCooldown
		TypeInfo<Time >::parseFromBinaryStream(&commandSpamCooldown, stream);
		return true;

	case 0x8d46a189: //ZoneClientSession.commandCount
		TypeInfo<int >::parseFromBinaryStream(&commandCount, stream);
		return true;

	}

	return false;
}

void ZoneClientSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneClientSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneClientSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x8979a0bb; //ZoneClientSession.ipAddress
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&ipAddress, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa95d2c6e; //ZoneClientSession.characters
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::toBinaryStream(&characters, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe00b3c8d; //ZoneClientSession.bannedCharacters
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::toBinaryStream(&bannedCharacters, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x9b46d0c2; //ZoneClientSession.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x7e078577; //ZoneClientSession.sessionID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&sessionID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x90088679; //ZoneClientSession.accountID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&accountID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1da62823; //ZoneClientSession.disconnecting
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&disconnecting, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe5829801; //ZoneClientSession.commandSpamCooldown
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&commandSpamCooldown, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x8d46a189; //ZoneClientSession.commandCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&commandCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void ZoneClientSessionImplementation::executeOrderedTask(Task* task) {
	// server/zone/ZoneClientSession.idl():  		pendingTasks.putOrdered(task, this);
	pendingTasks->putOrdered(task, _this.getReferenceUnsafeStaticCast());
}

PendingTasksMap* ZoneClientSessionImplementation::getPendingTasks() {
	// server/zone/ZoneClientSession.idl():  		return pendingTasks;
	return pendingTasks;
}

LoggerHelperStream ZoneClientSessionImplementation::info(int forced) const{
	// server/zone/ZoneClientSession.idl():  		return session.info(forced);
	return session->info(forced);
}

LoggerHelperStream ZoneClientSessionImplementation::error() const{
	// server/zone/ZoneClientSession.idl():  		return session.error();
	return session->error();
}

LoggerHelperStream ZoneClientSessionImplementation::debug() const{
	// server/zone/ZoneClientSession.idl():  		return session.debug();
	return session->debug();
}

void ZoneClientSessionImplementation::setSessionID(const String& id) {
	// server/zone/ZoneClientSession.idl():  		sessionID = id;
	sessionID = id;
}

int ZoneClientSessionImplementation::getCommandCount() const{
	// server/zone/ZoneClientSession.idl():  		return commandCount;
	return commandCount;
}

void ZoneClientSessionImplementation::increaseCommandCount() {
	// server/zone/ZoneClientSession.idl():  		commandCount = commandCount + 1;
	commandCount = commandCount + 1;
}

void ZoneClientSessionImplementation::resetCommandCount() {
	// server/zone/ZoneClientSession.idl():  		commandCount = 0;
	commandCount = 0;
}

const Time* ZoneClientSessionImplementation::getCommandSpamCooldown() const{
	// server/zone/ZoneClientSession.idl():  		return commandSpamCooldown;
	return (&commandSpamCooldown);
}

Time* ZoneClientSessionImplementation::getCommandSpamCooldown() {
	// server/zone/ZoneClientSession.idl():  		return commandSpamCooldown;
	return (&commandSpamCooldown);
}

String ZoneClientSessionImplementation::getSessionID() const{
	// server/zone/ZoneClientSession.idl():  		return sessionID;
	return sessionID;
}

unsigned int ZoneClientSessionImplementation::getAccountID() const{
	// server/zone/ZoneClientSession.idl():  		return accountID;
	return accountID;
}

void ZoneClientSessionImplementation::addCharacter(unsigned long long cid, unsigned int galaxyId) {
	// server/zone/ZoneClientSession.idl():  		characters.put(galaxyId, cid);
	(&characters)->put(galaxyId, cid);
}

void ZoneClientSessionImplementation::addBannedCharacter(unsigned long long cid, unsigned int galaxyId) {
	// server/zone/ZoneClientSession.idl():  		bannedCharacters.put(galaxyId, cid);
	(&bannedCharacters)->put(galaxyId, cid);
}

int ZoneClientSessionImplementation::getCharacterCount() const{
	// server/zone/ZoneClientSession.idl():  		return characters.size() + bannedCharacters.size();
	return (&characters)->size() + (&bannedCharacters)->size();
}

void ZoneClientSessionImplementation::resetCharacters() {
	// server/zone/ZoneClientSession.idl():  		characters.removeAll();
	(&characters)->removeAll();
	// server/zone/ZoneClientSession.idl():  		bannedCharacters.removeAll();
	(&bannedCharacters)->removeAll();
}

/*
 *	ZoneClientSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ZoneClientSessionAdapter::ZoneClientSessionAdapter(ZoneClientSession* obj) : ManagedObjectAdapter(obj) {
}

void ZoneClientSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_DISCONNECT__:
		{
			
			disconnect();
			
		}
		break;
	case RPC_DISCONNECT__BOOL_:
		{
			bool doLock = inv->getBooleanParameter();
			
			disconnect(doLock);
			
		}
		break;
	case RPC_BALANCEPACKETCHECKUPTIME__:
		{
			
			balancePacketCheckupTime();
			
		}
		break;
	case RPC_RESETPACKETCHECKUPTIME__:
		{
			
			resetPacketCheckupTime();
			
		}
		break;
	case RPC_CLOSECONNECTION__BOOL_BOOL_:
		{
			bool lockPlayer = inv->getBooleanParameter();
			bool doLock = inv->getBooleanParameter();
			
			closeConnection(lockPlayer, doLock);
			
		}
		break;
	case RPC_SETUPLOGGING__:
		{
			
			setupLogging();
			
		}
		break;
	case RPC_INFO__STRING_BOOL_:
		{
			 String msg; inv->getAsciiParameter(msg);
			bool force = inv->getBooleanParameter();
			
			info(msg, force);
			
		}
		break;
	case RPC_DEBUG__STRING_:
		{
			 String msg; inv->getAsciiParameter(msg);
			
			debug(msg);
			
		}
		break;
	case RPC_ERROR__STRING_:
		{
			 String msg; inv->getAsciiParameter(msg);
			
			error(msg);
			
		}
		break;
	case RPC_GETADDRESS__:
		{
			
			String _m_res = getAddress();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETIPADDRESS__:
		{
			
			String _m_res = getIPAddress();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* playerCreature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			setPlayer(playerCreature);
			
		}
		break;
	case RPC_SETSESSIONID__STRING_:
		{
			 String id; inv->getAsciiParameter(id);
			
			setSessionID(id);
			
		}
		break;
	case RPC_SETACCOUNTID__INT_:
		{
			unsigned int acc = inv->getUnsignedIntParameter();
			
			setAccountID(acc);
			
		}
		break;
	case RPC_GETCOMMANDCOUNT__:
		{
			
			int _m_res = getCommandCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_INCREASECOMMANDCOUNT__:
		{
			
			increaseCommandCount();
			
		}
		break;
	case RPC_RESETCOMMANDCOUNT__:
		{
			
			resetCommandCount();
			
		}
		break;
	case RPC_GETPLAYER__:
		{
			
			DistributedObject* _m_res = getPlayer();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETSESSIONID__:
		{
			
			String _m_res = getSessionID();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETACCOUNTID__:
		{
			
			unsigned int _m_res = getAccountID();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_HASCHARACTER__LONG_INT_:
		{
			unsigned long long cid = inv->getUnsignedLongParameter();
			unsigned int galaxyId = inv->getUnsignedIntParameter();
			
			bool _m_res = hasCharacter(cid, galaxyId);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDCHARACTER__LONG_INT_:
		{
			unsigned long long cid = inv->getUnsignedLongParameter();
			unsigned int galaxyId = inv->getUnsignedIntParameter();
			
			addCharacter(cid, galaxyId);
			
		}
		break;
	case RPC_ADDBANNEDCHARACTER__LONG_INT_:
		{
			unsigned long long cid = inv->getUnsignedLongParameter();
			unsigned int galaxyId = inv->getUnsignedIntParameter();
			
			addBannedCharacter(cid, galaxyId);
			
		}
		break;
	case RPC_GETCHARACTERCOUNT__:
		{
			
			int _m_res = getCharacterCount();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCHARACTERCOUNT__INT_:
		{
			int galaxyId = inv->getSignedIntParameter();
			
			int _m_res = getCharacterCount(galaxyId);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_RESETCHARACTERS__:
		{
			
			resetCharacters();
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void ZoneClientSessionAdapter::disconnect() {
	(static_cast<ZoneClientSession*>(stub))->disconnect();
}

void ZoneClientSessionAdapter::disconnect(bool doLock) {
	(static_cast<ZoneClientSession*>(stub))->disconnect(doLock);
}

void ZoneClientSessionAdapter::balancePacketCheckupTime() {
	(static_cast<ZoneClientSession*>(stub))->balancePacketCheckupTime();
}

void ZoneClientSessionAdapter::resetPacketCheckupTime() {
	(static_cast<ZoneClientSession*>(stub))->resetPacketCheckupTime();
}

void ZoneClientSessionAdapter::closeConnection(bool lockPlayer, bool doLock) {
	(static_cast<ZoneClientSession*>(stub))->closeConnection(lockPlayer, doLock);
}

void ZoneClientSessionAdapter::setupLogging() {
	(static_cast<ZoneClientSession*>(stub))->setupLogging();
}

void ZoneClientSessionAdapter::info(const String& msg, bool force) {
	(static_cast<ZoneClientSession*>(stub))->info(msg, force);
}

void ZoneClientSessionAdapter::debug(const String& msg) {
	(static_cast<ZoneClientSession*>(stub))->debug(msg);
}

void ZoneClientSessionAdapter::error(const String& msg) {
	(static_cast<ZoneClientSession*>(stub))->error(msg);
}

String ZoneClientSessionAdapter::getAddress() const {
	return (static_cast<ZoneClientSession*>(stub))->getAddress();
}

String ZoneClientSessionAdapter::getIPAddress() const {
	return (static_cast<ZoneClientSession*>(stub))->getIPAddress();
}

void ZoneClientSessionAdapter::setPlayer(CreatureObject* playerCreature) {
	(static_cast<ZoneClientSession*>(stub))->setPlayer(playerCreature);
}

void ZoneClientSessionAdapter::setSessionID(const String& id) {
	(static_cast<ZoneClientSession*>(stub))->setSessionID(id);
}

void ZoneClientSessionAdapter::setAccountID(unsigned int acc) {
	(static_cast<ZoneClientSession*>(stub))->setAccountID(acc);
}

int ZoneClientSessionAdapter::getCommandCount() const {
	return (static_cast<ZoneClientSession*>(stub))->getCommandCount();
}

void ZoneClientSessionAdapter::increaseCommandCount() {
	(static_cast<ZoneClientSession*>(stub))->increaseCommandCount();
}

void ZoneClientSessionAdapter::resetCommandCount() {
	(static_cast<ZoneClientSession*>(stub))->resetCommandCount();
}

Reference<CreatureObject* > ZoneClientSessionAdapter::getPlayer() {
	return (static_cast<ZoneClientSession*>(stub))->getPlayer();
}

String ZoneClientSessionAdapter::getSessionID() const {
	return (static_cast<ZoneClientSession*>(stub))->getSessionID();
}

unsigned int ZoneClientSessionAdapter::getAccountID() const {
	return (static_cast<ZoneClientSession*>(stub))->getAccountID();
}

bool ZoneClientSessionAdapter::hasCharacter(unsigned long long cid, unsigned int galaxyId) const {
	return (static_cast<ZoneClientSession*>(stub))->hasCharacter(cid, galaxyId);
}

void ZoneClientSessionAdapter::addCharacter(unsigned long long cid, unsigned int galaxyId) {
	(static_cast<ZoneClientSession*>(stub))->addCharacter(cid, galaxyId);
}

void ZoneClientSessionAdapter::addBannedCharacter(unsigned long long cid, unsigned int galaxyId) {
	(static_cast<ZoneClientSession*>(stub))->addBannedCharacter(cid, galaxyId);
}

int ZoneClientSessionAdapter::getCharacterCount() const {
	return (static_cast<ZoneClientSession*>(stub))->getCharacterCount();
}

int ZoneClientSessionAdapter::getCharacterCount(int galaxyId) const {
	return (static_cast<ZoneClientSession*>(stub))->getCharacterCount(galaxyId);
}

void ZoneClientSessionAdapter::resetCharacters() {
	(static_cast<ZoneClientSession*>(stub))->resetCharacters();
}

/*
 *	ZoneClientSessionHelper
 */

ZoneClientSessionHelper* ZoneClientSessionHelper::staticInitializer = ZoneClientSessionHelper::instance();

ZoneClientSessionHelper::ZoneClientSessionHelper() {
	className = "ZoneClientSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void ZoneClientSessionHelper::finalizeHelper() {
	ZoneClientSessionHelper::finalize();
}

DistributedObject* ZoneClientSessionHelper::instantiateObject() {
	return new ZoneClientSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneClientSessionHelper::instantiateServant() {
	return new ZoneClientSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* ZoneClientSessionHelper::instantiatePOD() {
	return new ZoneClientSessionPOD();
}

DistributedObjectAdapter* ZoneClientSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneClientSessionAdapter(static_cast<ZoneClientSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ZoneClientSessionPOD
 */

ZoneClientSessionPOD::~ZoneClientSessionPOD() {
}

ZoneClientSessionPOD::ZoneClientSessionPOD(void) {
	_className = "ZoneClientSession";
}


void ZoneClientSessionPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneClientSessionPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneClientSessionPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (ipAddress) {
	_nameHashCode = 0x8979a0bb; //ZoneClientSession.ipAddress
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&ipAddress.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (characters) {
	_nameHashCode = 0xa95d2c6e; //ZoneClientSession.characters
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::toBinaryStream(&characters.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (bannedCharacters) {
	_nameHashCode = 0xe00b3c8d; //ZoneClientSession.bannedCharacters
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::toBinaryStream(&bannedCharacters.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (player) {
	_nameHashCode = 0x9b46d0c2; //ZoneClientSession.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (sessionID) {
	_nameHashCode = 0x7e078577; //ZoneClientSession.sessionID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&sessionID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (accountID) {
	_nameHashCode = 0x90088679; //ZoneClientSession.accountID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&accountID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (disconnecting) {
	_nameHashCode = 0x1da62823; //ZoneClientSession.disconnecting
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&disconnecting.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (commandSpamCooldown) {
	_nameHashCode = 0xe5829801; //ZoneClientSession.commandSpamCooldown
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&commandSpamCooldown.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (commandCount) {
	_nameHashCode = 0x8d46a189; //ZoneClientSession.commandCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&commandCount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool ZoneClientSessionPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x8979a0bb: //ZoneClientSession.ipAddress
		{
			String _mnipAddress;
			TypeInfo<String >::parseFromBinaryStream(&_mnipAddress, stream);
			ipAddress = std::move(_mnipAddress);
		}
		return true;

	case 0xa95d2c6e: //ZoneClientSession.characters
		{
			SynchronizedVectorMap<unsigned int, unsigned long long> _mncharacters;
			TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::parseFromBinaryStream(&_mncharacters, stream);
			characters = std::move(_mncharacters);
		}
		return true;

	case 0xe00b3c8d: //ZoneClientSession.bannedCharacters
		{
			SynchronizedVectorMap<unsigned int, unsigned long long> _mnbannedCharacters;
			TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::parseFromBinaryStream(&_mnbannedCharacters, stream);
			bannedCharacters = std::move(_mnbannedCharacters);
		}
		return true;

	case 0x9b46d0c2: //ZoneClientSession.player
		{
			ManagedWeakReference<CreatureObjectPOD* > _mnplayer;
			TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::parseFromBinaryStream(&_mnplayer, stream);
			player = std::move(_mnplayer);
		}
		return true;

	case 0x7e078577: //ZoneClientSession.sessionID
		{
			String _mnsessionID;
			TypeInfo<String >::parseFromBinaryStream(&_mnsessionID, stream);
			sessionID = std::move(_mnsessionID);
		}
		return true;

	case 0x90088679: //ZoneClientSession.accountID
		{
			unsigned int _mnaccountID;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mnaccountID, stream);
			accountID = std::move(_mnaccountID);
		}
		return true;

	case 0x1da62823: //ZoneClientSession.disconnecting
		{
			bool _mndisconnecting;
			TypeInfo<bool >::parseFromBinaryStream(&_mndisconnecting, stream);
			disconnecting = std::move(_mndisconnecting);
		}
		return true;

	case 0xe5829801: //ZoneClientSession.commandSpamCooldown
		{
			Time _mncommandSpamCooldown;
			TypeInfo<Time >::parseFromBinaryStream(&_mncommandSpamCooldown, stream);
			commandSpamCooldown = std::move(_mncommandSpamCooldown);
		}
		return true;

	case 0x8d46a189: //ZoneClientSession.commandCount
		{
			int _mncommandCount;
			TypeInfo<int >::parseFromBinaryStream(&_mncommandCount, stream);
			commandCount = std::move(_mncommandCount);
		}
		return true;

	}

	return false;
}

void ZoneClientSessionPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ZoneClientSessionPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ZoneClientSessionPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<String >::toBinaryStream(&ipAddress.value(), stream);

	TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::toBinaryStream(&characters.value(), stream);

	TypeInfo<SynchronizedVectorMap<unsigned int, unsigned long long> >::toBinaryStream(&bannedCharacters.value(), stream);

	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);

	TypeInfo<String >::toBinaryStream(&sessionID.value(), stream);

	TypeInfo<unsigned int >::toBinaryStream(&accountID.value(), stream);

	TypeInfo<bool >::toBinaryStream(&disconnecting.value(), stream);

	TypeInfo<Time >::toBinaryStream(&commandSpamCooldown.value(), stream);

	TypeInfo<int >::toBinaryStream(&commandCount.value(), stream);


}

