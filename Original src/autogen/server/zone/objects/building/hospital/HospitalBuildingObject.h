/*
 *	autogen/server/zone/objects/building/hospital/HospitalBuildingObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef HOSPITALBUILDINGOBJECT_H_
#define HOSPITALBUILDINGOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "server/zone/objects/building/BuildingObject.h"

namespace server {
namespace zone {
namespace objects {
namespace building {
namespace hospital {

class HospitalBuildingObject : public BuildingObject {
public:
	HospitalBuildingObject();

	bool isHospitalBuildingObject();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	HospitalBuildingObject(DummyConstructorParameter* param);

	virtual ~HospitalBuildingObject();

	friend class HospitalBuildingObjectHelper;
};

} // namespace hospital
} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building::hospital;

namespace server {
namespace zone {
namespace objects {
namespace building {
namespace hospital {

class HospitalBuildingObjectImplementation : public BuildingObjectImplementation {

public:
	HospitalBuildingObjectImplementation();

	HospitalBuildingObjectImplementation(DummyConstructorParameter* param);

	bool isHospitalBuildingObject();

	WeakReference<HospitalBuildingObject*> _this;

	operator const HospitalBuildingObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~HospitalBuildingObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class HospitalBuildingObject;
};

class HospitalBuildingObjectAdapter : public BuildingObjectAdapter {
public:
	HospitalBuildingObjectAdapter(HospitalBuildingObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isHospitalBuildingObject();

};

class HospitalBuildingObjectHelper : public DistributedObjectClassHelper, public Singleton<HospitalBuildingObjectHelper> {
	static HospitalBuildingObjectHelper* staticInitializer;

public:
	HospitalBuildingObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<HospitalBuildingObjectHelper>;
};

} // namespace hospital
} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building::hospital;

namespace server {
namespace zone {
namespace objects {
namespace building {
namespace hospital {

class HospitalBuildingObjectPOD : public BuildingObjectPOD {
public:

	HospitalBuildingObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~HospitalBuildingObjectPOD();

};

} // namespace hospital
} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building::hospital;

#endif /*HOSPITALBUILDINGOBJECTPOD_H_*/
