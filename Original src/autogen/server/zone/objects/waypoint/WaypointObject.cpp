/*
 *	autogen/server/zone/objects/waypoint/WaypointObject.cpp generated by engine3 IDL compiler 0.70
 */

#include "WaypointObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	WaypointObjectStub
 */

const byte WaypointObject::COLOR_WHITE = 0x00;

const byte WaypointObject::COLOR_BLUE = 0x01;

const byte WaypointObject::COLOR_GREEN = 0x02;

const byte WaypointObject::COLOR_ORANGE = 0x03;

const byte WaypointObject::COLOR_YELLOW = 0x04;

const byte WaypointObject::COLOR_PURPLE = 0x05;

enum {RPC_SETCELLID__INT_,RPC_SETPLANETCRC__INT_,RPC_GETPLANETCRC__,RPC_SETCOLOR__BYTE_,RPC_SETACTIVE__BYTE_,RPC_SETUNKNOWN__LONG_,RPC_SETSPECIALTYPEID__INT_,RPC_GETSPECIALTYPEID__,RPC_TOGGLESTATUS__,RPC_ISACTIVE__,RPC_GETCOLOR__,RPC_GETDETAILEDDESCRIPTION__,RPC_SETDETAILEDDESCRIPTION__STRING_,RPC_SETQUESTDETAILS__STRING_};

WaypointObject::WaypointObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	WaypointObjectImplementation* _implementation = new WaypointObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("WaypointObject");
}

WaypointObject::WaypointObject(DummyConstructorParameter* param) : IntangibleObject(param) {
	_setClassName("WaypointObject");
}

WaypointObject::~WaypointObject() {
}



void WaypointObject::loadTemplateData(SharedObjectTemplate* templateData) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void WaypointObject::insertToMessage(BaseMessage* msg) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->insertToMessage(msg);
	}
}

void WaypointObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void WaypointObject::setCellID(unsigned int id) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCELLID__INT_);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setCellID(id);
	}
}

void WaypointObject::setPlanetCRC(unsigned int crc) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLANETCRC__INT_);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setPlanetCRC(crc);
	}
}

unsigned int WaypointObject::getPlanetCRC() const {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getPlanetCRC();
	}
}

void WaypointObject::setColor(byte newColor) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOLOR__BYTE_);
		method.addByteParameter(newColor);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setColor(newColor);
	}
}

void WaypointObject::setActive(byte newStatus) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACTIVE__BYTE_);
		method.addByteParameter(newStatus);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setActive(newStatus);
	}
}

void WaypointObject::setUnknown(unsigned long long id) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUNKNOWN__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setUnknown(id);
	}
}

void WaypointObject::setSpecialTypeID(int id) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALTYPEID__INT_);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setSpecialTypeID(id);
	}
}

int WaypointObject::getSpecialTypeID() const {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIALTYPEID__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSpecialTypeID();
	}
}

void WaypointObject::toggleStatus() {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLESTATUS__);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->toggleStatus();
	}
}

bool WaypointObject::isActive() const {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISACTIVE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isActive();
	}
}

byte WaypointObject::getColor() const {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOLOR__);

		return method.executeWithByteReturn();
	} else {
		return _implementation->getColor();
	}
}

String WaypointObject::getDetailedDescription() const {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDETAILEDDESCRIPTION__);

		String _return_getDetailedDescription;
		method.executeWithAsciiReturn(_return_getDetailedDescription);
		return _return_getDetailedDescription;
	} else {
		return _implementation->getDetailedDescription();
	}
}

void WaypointObject::setDetailedDescription(const String& desc) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDETAILEDDESCRIPTION__STRING_);
		method.addAsciiParameter(desc);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setDetailedDescription(desc);
	}
}

void WaypointObject::setQuestDetails(const String& detail) {
	WaypointObjectImplementation* _implementation = static_cast<WaypointObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETQUESTDETAILS__STRING_);
		method.addAsciiParameter(detail);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->setQuestDetails(detail);
	}
}

DistributedObjectServant* WaypointObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* WaypointObject::_getImplementationForRead() const {
	return _impl;
}

void WaypointObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	WaypointObjectImplementation
 */

const byte WaypointObjectImplementation::COLOR_WHITE = 0x00;

const byte WaypointObjectImplementation::COLOR_BLUE = 0x01;

const byte WaypointObjectImplementation::COLOR_GREEN = 0x02;

const byte WaypointObjectImplementation::COLOR_ORANGE = 0x03;

const byte WaypointObjectImplementation::COLOR_YELLOW = 0x04;

const byte WaypointObjectImplementation::COLOR_PURPLE = 0x05;

WaypointObjectImplementation::WaypointObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


WaypointObjectImplementation::~WaypointObjectImplementation() {
}


void WaypointObjectImplementation::finalize() {
}

void WaypointObjectImplementation::_initializeImplementation() {
	_setClassHelper(WaypointObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void WaypointObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<WaypointObject*>(stub);
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* WaypointObjectImplementation::_getStub() {
	return _this.get();
}

WaypointObjectImplementation::operator const WaypointObject*() {
	return _this.get();
}

void WaypointObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void WaypointObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void WaypointObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void WaypointObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void WaypointObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void WaypointObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void WaypointObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void WaypointObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("WaypointObject");

}

void WaypointObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WaypointObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool WaypointObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (IntangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6d22ebbe: //WaypointObject.cellID
		TypeInfo<unsigned int >::parseFromBinaryStream(&cellID, stream);
		return true;

	case 0x1101b41e: //WaypointObject.unknown
		TypeInfo<unsigned long long >::parseFromBinaryStream(&unknown, stream);
		return true;

	case 0xa8844442: //WaypointObject.planetCRC
		TypeInfo<unsigned int >::parseFromBinaryStream(&planetCRC, stream);
		return true;

	case 0xfb580469: //WaypointObject.detailedDescription
		TypeInfo<String >::parseFromBinaryStream(&detailedDescription, stream);
		return true;

	case 0x198c440a: //WaypointObject.color
		TypeInfo<byte >::parseFromBinaryStream(&color, stream);
		return true;

	case 0xf04f2daf: //WaypointObject.active
		TypeInfo<byte >::parseFromBinaryStream(&active, stream);
		return true;

	case 0x1af704c5: //WaypointObject.questDetails
		TypeInfo<String >::parseFromBinaryStream(&questDetails, stream);
		return true;

	case 0x7e4c627b: //WaypointObject.specialTypeID
		TypeInfo<int >::parseFromBinaryStream(&specialTypeID, stream);
		return true;

	}

	return false;
}

void WaypointObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WaypointObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WaypointObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = IntangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6d22ebbe; //WaypointObject.cellID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&cellID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1101b41e; //WaypointObject.unknown
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&unknown, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa8844442; //WaypointObject.planetCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&planetCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xfb580469; //WaypointObject.detailedDescription
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&detailedDescription, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x198c440a; //WaypointObject.color
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&color, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf04f2daf; //WaypointObject.active
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&active, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1af704c5; //WaypointObject.questDetails
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&questDetails, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x7e4c627b; //WaypointObject.specialTypeID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&specialTypeID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void WaypointObjectImplementation::writeJSON(nlohmann::json& j) {
	IntangibleObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["cellID"] = cellID;

	thisObject["unknown"] = unknown;

	thisObject["planetCRC"] = planetCRC;

	thisObject["detailedDescription"] = detailedDescription;

	thisObject["color"] = color;

	thisObject["active"] = active;

	thisObject["questDetails"] = questDetails;

	thisObject["specialTypeID"] = specialTypeID;

	j["WaypointObject"] = thisObject;
}

WaypointObjectImplementation::WaypointObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/waypoint/WaypointObject.idl():  		Logger.setLoggingName("WaypointObject");
	Logger::setLoggingName("WaypointObject");
}

void WaypointObjectImplementation::setCellID(unsigned int id) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		cellID = id;
	cellID = id;
}

void WaypointObjectImplementation::setPlanetCRC(unsigned int crc) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		planetCRC = crc;
	planetCRC = crc;
}

unsigned int WaypointObjectImplementation::getPlanetCRC() const{
	// server/zone/objects/waypoint/WaypointObject.idl():  		return planetCRC;
	return planetCRC;
}

void WaypointObjectImplementation::setColor(byte newColor) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		color = newColor;
	color = newColor;
}

void WaypointObjectImplementation::setActive(byte newStatus) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		active = newStatus;
	active = newStatus;
}

void WaypointObjectImplementation::setUnknown(unsigned long long id) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		unknown = id;
	unknown = id;
}

void WaypointObjectImplementation::setSpecialTypeID(int id) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		specialTypeID = id;
	specialTypeID = id;
}

int WaypointObjectImplementation::getSpecialTypeID() const{
	// server/zone/objects/waypoint/WaypointObject.idl():  		return specialTypeID;
	return specialTypeID;
}

void WaypointObjectImplementation::toggleStatus() {
	// server/zone/objects/waypoint/WaypointObject.idl():  		active = !active;
	active = !active;
}

bool WaypointObjectImplementation::isActive() const{
	// server/zone/objects/waypoint/WaypointObject.idl():  		return active;
	return active;
}

byte WaypointObjectImplementation::getColor() const{
	// server/zone/objects/waypoint/WaypointObject.idl():  		return color;
	return color;
}

void WaypointObjectImplementation::setDetailedDescription(const String& desc) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		detailedDescription = desc;
	detailedDescription = desc;
}

void WaypointObjectImplementation::setQuestDetails(const String& detail) {
	// server/zone/objects/waypoint/WaypointObject.idl():  		questDetails = detail;
	questDetails = detail;
}

/*
 *	WaypointObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


WaypointObjectAdapter::WaypointObjectAdapter(WaypointObject* obj) : IntangibleObjectAdapter(obj) {
}

void WaypointObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETCELLID__INT_:
		{
			unsigned int id = inv->getUnsignedIntParameter();
			
			setCellID(id);
			
		}
		break;
	case RPC_SETPLANETCRC__INT_:
		{
			unsigned int crc = inv->getUnsignedIntParameter();
			
			setPlanetCRC(crc);
			
		}
		break;
	case RPC_GETPLANETCRC__:
		{
			
			unsigned int _m_res = getPlanetCRC();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_SETCOLOR__BYTE_:
		{
			byte newColor = inv->getByteParameter();
			
			setColor(newColor);
			
		}
		break;
	case RPC_SETACTIVE__BYTE_:
		{
			byte newStatus = inv->getByteParameter();
			
			setActive(newStatus);
			
		}
		break;
	case RPC_SETUNKNOWN__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			setUnknown(id);
			
		}
		break;
	case RPC_SETSPECIALTYPEID__INT_:
		{
			int id = inv->getSignedIntParameter();
			
			setSpecialTypeID(id);
			
		}
		break;
	case RPC_GETSPECIALTYPEID__:
		{
			
			int _m_res = getSpecialTypeID();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_TOGGLESTATUS__:
		{
			
			toggleStatus();
			
		}
		break;
	case RPC_ISACTIVE__:
		{
			
			bool _m_res = isActive();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETCOLOR__:
		{
			
			byte _m_res = getColor();
			resp->insertByte(_m_res);
		}
		break;
	case RPC_GETDETAILEDDESCRIPTION__:
		{
			
			String _m_res = getDetailedDescription();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETDETAILEDDESCRIPTION__STRING_:
		{
			 String desc; inv->getAsciiParameter(desc);
			
			setDetailedDescription(desc);
			
		}
		break;
	case RPC_SETQUESTDETAILS__STRING_:
		{
			 String detail; inv->getAsciiParameter(detail);
			
			setQuestDetails(detail);
			
		}
		break;
	default:
		IntangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void WaypointObjectAdapter::setCellID(unsigned int id) {
	(static_cast<WaypointObject*>(stub))->setCellID(id);
}

void WaypointObjectAdapter::setPlanetCRC(unsigned int crc) {
	(static_cast<WaypointObject*>(stub))->setPlanetCRC(crc);
}

unsigned int WaypointObjectAdapter::getPlanetCRC() const {
	return (static_cast<WaypointObject*>(stub))->getPlanetCRC();
}

void WaypointObjectAdapter::setColor(byte newColor) {
	(static_cast<WaypointObject*>(stub))->setColor(newColor);
}

void WaypointObjectAdapter::setActive(byte newStatus) {
	(static_cast<WaypointObject*>(stub))->setActive(newStatus);
}

void WaypointObjectAdapter::setUnknown(unsigned long long id) {
	(static_cast<WaypointObject*>(stub))->setUnknown(id);
}

void WaypointObjectAdapter::setSpecialTypeID(int id) {
	(static_cast<WaypointObject*>(stub))->setSpecialTypeID(id);
}

int WaypointObjectAdapter::getSpecialTypeID() const {
	return (static_cast<WaypointObject*>(stub))->getSpecialTypeID();
}

void WaypointObjectAdapter::toggleStatus() {
	(static_cast<WaypointObject*>(stub))->toggleStatus();
}

bool WaypointObjectAdapter::isActive() const {
	return (static_cast<WaypointObject*>(stub))->isActive();
}

byte WaypointObjectAdapter::getColor() const {
	return (static_cast<WaypointObject*>(stub))->getColor();
}

String WaypointObjectAdapter::getDetailedDescription() const {
	return (static_cast<WaypointObject*>(stub))->getDetailedDescription();
}

void WaypointObjectAdapter::setDetailedDescription(const String& desc) {
	(static_cast<WaypointObject*>(stub))->setDetailedDescription(desc);
}

void WaypointObjectAdapter::setQuestDetails(const String& detail) {
	(static_cast<WaypointObject*>(stub))->setQuestDetails(detail);
}

/*
 *	WaypointObjectHelper
 */

WaypointObjectHelper* WaypointObjectHelper::staticInitializer = WaypointObjectHelper::instance();

WaypointObjectHelper::WaypointObjectHelper() {
	className = "WaypointObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void WaypointObjectHelper::finalizeHelper() {
	WaypointObjectHelper::finalize();
}

DistributedObject* WaypointObjectHelper::instantiateObject() {
	return new WaypointObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* WaypointObjectHelper::instantiateServant() {
	return new WaypointObjectImplementation();
}

DistributedObjectPOD* WaypointObjectHelper::instantiatePOD() {
	return new WaypointObjectPOD();
}

DistributedObjectAdapter* WaypointObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WaypointObjectAdapter(static_cast<WaypointObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaWaypointObject::className[] = "LuaWaypointObject";

Luna<LuaWaypointObject>::RegType LuaWaypointObject::Register[] = {
	{ "_setObject", &LuaWaypointObject::_setObject },
	{ "_getObject", &LuaWaypointObject::_getObject },
	{ "loadTemplateData", &LuaWaypointObject::loadTemplateData },
	{ "insertToMessage", &LuaWaypointObject::insertToMessage },
	{ "fillAttributeList", &LuaWaypointObject::fillAttributeList },
	{ "setCellID", &LuaWaypointObject::setCellID },
	{ "setPlanetCRC", &LuaWaypointObject::setPlanetCRC },
	{ "getPlanetCRC", &LuaWaypointObject::getPlanetCRC },
	{ "setColor", &LuaWaypointObject::setColor },
	{ "setActive", &LuaWaypointObject::setActive },
	{ "setUnknown", &LuaWaypointObject::setUnknown },
	{ "setSpecialTypeID", &LuaWaypointObject::setSpecialTypeID },
	{ "getSpecialTypeID", &LuaWaypointObject::getSpecialTypeID },
	{ "toggleStatus", &LuaWaypointObject::toggleStatus },
	{ "isActive", &LuaWaypointObject::isActive },
	{ "getColor", &LuaWaypointObject::getColor },
	{ "getDetailedDescription", &LuaWaypointObject::getDetailedDescription },
	{ "setDetailedDescription", &LuaWaypointObject::setDetailedDescription },
	{ "setQuestDetails", &LuaWaypointObject::setQuestDetails },
	{ 0, 0 }
};

LuaWaypointObject::LuaWaypointObject(lua_State *L) {
	realObject = static_cast<WaypointObject*>(lua_touserdata(L, 1));
}

LuaWaypointObject::~LuaWaypointObject() {
}

int LuaWaypointObject::_setObject(lua_State* L) {
	realObject = static_cast<WaypointObject*>(lua_touserdata(L, -1));

	return 0;
}

int LuaWaypointObject::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaWaypointObject::loadTemplateData(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			SharedObjectTemplate* templateData = static_cast<SharedObjectTemplate*>(lua_touserdata(L, -1));

			realObject->loadTemplateData(templateData);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:loadTemplateData(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:loadTemplateData(userdata)'");
	}
	return 0;
}

int LuaWaypointObject::insertToMessage(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			BaseMessage* msg = static_cast<BaseMessage*>(lua_touserdata(L, -1));

			realObject->insertToMessage(msg);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:insertToMessage(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:insertToMessage(userdata)'");
	}
	return 0;
}

int LuaWaypointObject::fillAttributeList(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (lua_isuserdata(L, -2)) {
			if (parameterCount == 2) {
				AttributeListMessage* msg = static_cast<AttributeListMessage*>(lua_touserdata(L, -2));
				CreatureObject* object = static_cast<CreatureObject*>(lua_touserdata(L, -1));

				realObject->fillAttributeList(msg, object);

				return 0;
			} else {
				throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:fillAttributeList(userdata, userdata)'");
			}
		} else {
			throw LuaCallbackException(L, "invalid argument at 1 for lua method 'WaypointObject:fillAttributeList(userdata, userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:fillAttributeList(userdata, userdata)'");
	}
	return 0;
}

int LuaWaypointObject::setCellID(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			unsigned int id = lua_tointeger(L, -1);

			Locker _guard(realObject);

			realObject->setCellID(id);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setCellID(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setCellID(integer)'");
	}
	return 0;
}

int LuaWaypointObject::setPlanetCRC(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			unsigned int crc = lua_tointeger(L, -1);

			Locker _guard(realObject);

			realObject->setPlanetCRC(crc);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setPlanetCRC(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setPlanetCRC(integer)'");
	}
	return 0;
}

int LuaWaypointObject::getPlanetCRC(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		unsigned int result = realObject->getPlanetCRC();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:getPlanetCRC()'");
	}
	return 0;
}

int LuaWaypointObject::setColor(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			byte newColor = lua_tointeger(L, -1);

			Locker _guard(realObject);

			realObject->setColor(newColor);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setColor(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setColor(integer)'");
	}
	return 0;
}

int LuaWaypointObject::setActive(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			byte newStatus = lua_tointeger(L, -1);

			Locker _guard(realObject);

			realObject->setActive(newStatus);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setActive(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setActive(integer)'");
	}
	return 0;
}

int LuaWaypointObject::setUnknown(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			unsigned long long id = lua_tointeger(L, -1);

			Locker _guard(realObject);

			realObject->setUnknown(id);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setUnknown(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setUnknown(integer)'");
	}
	return 0;
}

int LuaWaypointObject::setSpecialTypeID(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isnumber(L, -1)) {
		if (parameterCount == 1) {
			int id = lua_tointeger(L, -1);

			Locker _guard(realObject);

			realObject->setSpecialTypeID(id);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setSpecialTypeID(integer)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setSpecialTypeID(integer)'");
	}
	return 0;
}

int LuaWaypointObject::getSpecialTypeID(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		int result = realObject->getSpecialTypeID();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:getSpecialTypeID()'");
	}
	return 0;
}

int LuaWaypointObject::toggleStatus(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		Locker _guard(realObject);

		realObject->toggleStatus();

		return 0;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:toggleStatus()'");
	}
	return 0;
}

int LuaWaypointObject::isActive(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isActive();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:isActive()'");
	}
	return 0;
}

int LuaWaypointObject::getColor(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		byte result = realObject->getColor();

		lua_pushinteger(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:getColor()'");
	}
	return 0;
}

int LuaWaypointObject::getDetailedDescription(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		String result = realObject->getDetailedDescription();

		lua_pushstring(L, result.toCharArray());
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:getDetailedDescription()'");
	}
	return 0;
}

int LuaWaypointObject::setDetailedDescription(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String desc = lua_tostring(L, -1);

			Locker _guard(realObject);

			realObject->setDetailedDescription(desc);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setDetailedDescription(string)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setDetailedDescription(string)'");
	}
	return 0;
}

int LuaWaypointObject::setQuestDetails(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isstring(L, -1)) {
		if (parameterCount == 1) {
			const String detail = lua_tostring(L, -1);

			Locker _guard(realObject);

			realObject->setQuestDetails(detail);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'WaypointObject:setQuestDetails(string)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'WaypointObject:setQuestDetails(string)'");
	}
	return 0;
}

/*
 *	WaypointObjectPOD
 */

WaypointObjectPOD::~WaypointObjectPOD() {
	finalize();
}

WaypointObjectPOD::WaypointObjectPOD(void) {
	_className = "WaypointObject";
}


void WaypointObjectPOD::writeJSON(nlohmann::json& j) {
	IntangibleObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (cellID)
		thisObject["cellID"] = cellID.value();

	if (unknown)
		thisObject["unknown"] = unknown.value();

	if (planetCRC)
		thisObject["planetCRC"] = planetCRC.value();

	if (detailedDescription)
		thisObject["detailedDescription"] = detailedDescription.value();

	if (color)
		thisObject["color"] = color.value();

	if (active)
		thisObject["active"] = active.value();

	if (questDetails)
		thisObject["questDetails"] = questDetails.value();

	if (specialTypeID)
		thisObject["specialTypeID"] = specialTypeID.value();

	j["WaypointObject"] = thisObject;
}


void WaypointObjectPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WaypointObjectPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WaypointObjectPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = IntangibleObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (cellID) {
	_nameHashCode = 0x6d22ebbe; //WaypointObject.cellID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&cellID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (unknown) {
	_nameHashCode = 0x1101b41e; //WaypointObject.unknown
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&unknown.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (planetCRC) {
	_nameHashCode = 0xa8844442; //WaypointObject.planetCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&planetCRC.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (detailedDescription) {
	_nameHashCode = 0xfb580469; //WaypointObject.detailedDescription
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&detailedDescription.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (color) {
	_nameHashCode = 0x198c440a; //WaypointObject.color
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&color.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (active) {
	_nameHashCode = 0xf04f2daf; //WaypointObject.active
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&active.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (questDetails) {
	_nameHashCode = 0x1af704c5; //WaypointObject.questDetails
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&questDetails.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (specialTypeID) {
	_nameHashCode = 0x7e4c627b; //WaypointObject.specialTypeID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&specialTypeID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool WaypointObjectPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (IntangibleObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6d22ebbe: //WaypointObject.cellID
		{
			unsigned int _mncellID;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mncellID, stream);
			cellID = std::move(_mncellID);
		}
		return true;

	case 0x1101b41e: //WaypointObject.unknown
		{
			unsigned long long _mnunknown;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnunknown, stream);
			unknown = std::move(_mnunknown);
		}
		return true;

	case 0xa8844442: //WaypointObject.planetCRC
		{
			unsigned int _mnplanetCRC;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mnplanetCRC, stream);
			planetCRC = std::move(_mnplanetCRC);
		}
		return true;

	case 0xfb580469: //WaypointObject.detailedDescription
		{
			String _mndetailedDescription;
			TypeInfo<String >::parseFromBinaryStream(&_mndetailedDescription, stream);
			detailedDescription = std::move(_mndetailedDescription);
		}
		return true;

	case 0x198c440a: //WaypointObject.color
		{
			byte _mncolor;
			TypeInfo<byte >::parseFromBinaryStream(&_mncolor, stream);
			color = std::move(_mncolor);
		}
		return true;

	case 0xf04f2daf: //WaypointObject.active
		{
			byte _mnactive;
			TypeInfo<byte >::parseFromBinaryStream(&_mnactive, stream);
			active = std::move(_mnactive);
		}
		return true;

	case 0x1af704c5: //WaypointObject.questDetails
		{
			String _mnquestDetails;
			TypeInfo<String >::parseFromBinaryStream(&_mnquestDetails, stream);
			questDetails = std::move(_mnquestDetails);
		}
		return true;

	case 0x7e4c627b: //WaypointObject.specialTypeID
		{
			int _mnspecialTypeID;
			TypeInfo<int >::parseFromBinaryStream(&_mnspecialTypeID, stream);
			specialTypeID = std::move(_mnspecialTypeID);
		}
		return true;

	}

	return false;
}

void WaypointObjectPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WaypointObjectPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void WaypointObjectPOD::writeObjectCompact(ObjectOutputStream* stream) {
	IntangibleObjectPOD::writeObjectCompact(stream);

	TypeInfo<unsigned int >::toBinaryStream(&cellID.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&unknown.value(), stream);

	TypeInfo<unsigned int >::toBinaryStream(&planetCRC.value(), stream);

	TypeInfo<String >::toBinaryStream(&detailedDescription.value(), stream);

	TypeInfo<byte >::toBinaryStream(&color.value(), stream);

	TypeInfo<byte >::toBinaryStream(&active.value(), stream);

	TypeInfo<String >::toBinaryStream(&questDetails.value(), stream);

	TypeInfo<int >::toBinaryStream(&specialTypeID.value(), stream);


}

