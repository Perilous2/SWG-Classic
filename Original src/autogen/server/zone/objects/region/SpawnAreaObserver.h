/*
 *	autogen/server/zone/objects/region/SpawnAreaObserver.h generated by engine3 IDL compiler 0.70
 */

#ifndef SPAWNAREAOBSERVER_H_
#define SPAWNAREAOBSERVER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "server/zone/objects/region/SpawnArea.h"

#include "engine/log/Logger.h"

#include "engine/util/Observer.h"

#include "engine/util/Observable.h"

#include "engine/core/ManagedObject.h"

namespace server {
namespace zone {
namespace objects {
namespace region {

class SpawnAreaObserver : public Observer {
public:
	SpawnAreaObserver(SpawnArea* area);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SpawnAreaObserver(DummyConstructorParameter* param);

	virtual ~SpawnAreaObserver();

	friend class SpawnAreaObserverHelper;
};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace region {

class SpawnAreaObserverImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedWeakReference<SpawnArea* > spawnArea;

public:
	SpawnAreaObserverImplementation(SpawnArea* area);

	SpawnAreaObserverImplementation(DummyConstructorParameter* param);

	virtual int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	WeakReference<SpawnAreaObserver*> _this;

	operator const SpawnAreaObserver*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~SpawnAreaObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SpawnAreaObserver;
};

class SpawnAreaObserverAdapter : public ObserverAdapter {
public:
	SpawnAreaObserverAdapter(SpawnAreaObserver* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

};

class SpawnAreaObserverHelper : public DistributedObjectClassHelper, public Singleton<SpawnAreaObserverHelper> {
	static SpawnAreaObserverHelper* staticInitializer;

public:
	SpawnAreaObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SpawnAreaObserverHelper>;
};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace region {

class SpawnAreaObserverPOD : public ObserverPOD {
public:
	Optional<ManagedWeakReference<SpawnAreaPOD* >> spawnArea;

	String _className;
	SpawnAreaObserverPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~SpawnAreaObserverPOD();

};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

#endif /*SPAWNAREAOBSERVERPOD_H_*/
