/*
 *	autogen/server/zone/objects/tangible/weapon/WeaponObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef WEAPONOBJECT_H_
#define WEAPONOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace powerup {

class PowerupObject;

class PowerupObjectPOD;

} // namespace powerup
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::powerup;

#include "gmock/gmock.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/scene/SceneObjectType.h"

#include "templates/SharedObjectTemplate.h"

#include "templates/tangible/SharedWeaponObjectTemplate.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

#include "system/lang/String.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class WeaponObject : public TangibleObject {
public:
	WeaponObject();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendContainerTo(CreatureObject* player);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void notifyLoadFromDatabase();

	/**
	 * Handles creating the Saber inventory.
	 */
	void createChildObjects();

	/**
	 * Returns true if the player has the required certifications for this weapon
	 * @pre { }
	 * @post { }
	 * @param object player object to check against
	 */
	bool isCertifiedFor(CreatureObject* object) const;

	const Vector<String>* getDamageModifiers() const;

	const Vector<String>* getSpeedModifiers() const;

	const Vector<String>* getCreatureAccuracyModifiers() const;

	const Vector<String>* getCreatureAimModifiers() const;

	const Vector<String>* getDefenderDefenseModifiers() const;

	const Vector<String>* getDefenderSecondaryDefenseModifiers() const;

	const Vector<String>* getDefenderToughnessModifiers() const;

	void setCertified(bool cert);

	int getAttackType() const;

	void setAttackType(int a);

	bool isCertified() const;

	bool isEquipped();

	int getPointBlankAccuracy(bool withPup = true) const;

	void setPointBlankAccuracy(int value);

	virtual int getPointBlankRange(bool withPup) const;

	virtual int getPointBlankRange() const;

	virtual int getIdealRange(bool withPup) const;

	virtual int getIdealRange() const;

	void setIdealRange(int value);

	virtual int getMaxRange(bool withPup) const;

	virtual int getMaxRange() const;

	void setMaxRange(int value);

	int getIdealAccuracy(bool withPup = true) const;

	void setIdealAccuracy(int value);

	int getArmorPiercing() const;

	int getMaxRangeAccuracy(bool withPup = true) const;

	void setMaxRangeAccuracy(int value);

	float getAttackSpeed(bool withPup = true) const;

	void setAttackSpeed(float value);

	float getMaxDamage(bool withPup = true) const;

	void setMaxDamage(float value);

	float getMinDamage(bool withPup = true) const;

	void setMinDamage(float value);

	float getWoundsRatio(bool withPup = true) const;

	void setWoundsRatio(float value);

	float getDamageRadius(bool withPup = true) const;

	void setDamageRadius(float value);

	int getHealthAttackCost(bool withPup = true) const;

	void setHealthAttackCost(int value);

	int getActionAttackCost(bool withPup = true) const;

	void setActionAttackCost(int value);

	int getMindAttackCost(bool withPup = true) const;

	void setMindAttackCost(int value);

	float getForceCost() const;

	void setForceCost(float value);

	int getBladeColor() const;

	void setBladeColor(int value);

	int getDamageType() const;

	String getXpType() const;

	int getNumberOfDots() const;

	int getDotType(int index) const;

	int getDotAttribute(int index) const;

	int getDotStrength(int index) const;

	int getDotDuration(int index) const;

	int getDotPotency(int index) const;

	int getDotUses(int index) const;

	void addDotType(int t);

	void addDotAttribute(int a);

	void addDotStrength(int s);

	void addDotDuration(int du);

	void addDotPotency(int po);

	void addDotUses(int u);

	void setDotUses(int u, int index);

	String getWeaponType() const;

	bool isUnarmedWeapon() const;

	bool isMeleeWeapon() const;

	bool isRangedWeapon() const;

	bool isRifleWeapon() const;

	bool isThrownWeapon() const;

	bool isHeavyWeapon() const;

	bool isSpecialHeavyWeapon() const;

	bool isLightningRifle() const;

	bool isFlameThrower() const;

	bool isHeavyAcidRifle() const;

	bool isCarbineWeapon() const;

	bool isPistolWeapon() const;

	bool isOneHandMeleeWeapon() const;

	bool isPolearmWeaponObject() const;

	bool isTwoHandMeleeWeapon() const;

	bool isMineWeapon() const;

	bool isJediWeapon() const;

	bool isJediOneHandedWeapon() const;

	bool isJediTwoHandedWeapon() const;

	bool isJediPolearmWeapon() const;

	unsigned int getWeaponBitmask() const;

	bool isWeaponObject();

	bool hasPowerup() const;

	bool applyPowerup(CreatureObject* player, PowerupObject* pup);

	Reference<PowerupObject* > removePowerup();

	void decreasePowerupUses(CreatureObject* player);

	String repairAttempt(int repairChance);

	void decay(CreatureObject* user);

	void setDamageSlice(float value);

	void setSpeedSlice(float value);

	void applySkillModsTo(CreatureObject* creature) const;

	void removeSkillModsFrom(CreatureObject* creature);

	void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	const VectorMap<String, int>* getWearableSkillMods() const;

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	WeaponObject(DummyConstructorParameter* param);

	virtual ~WeaponObject();

	friend class WeaponObjectHelper;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class WeaponObjectImplementation : public TangibleObjectImplementation {
protected:
	int attackType;

	String weaponEffect;

	int weaponEffectIndex;

	bool certified;

	int armorPiercing;

	int pointBlankAccuracy;

	int pointBlankRange;

	int idealRange;

	int idealAccuracy;

	int maxRange;

	int maxRangeAccuracy;

	int damageType;

	float attackSpeed;

	float minDamage;

	float maxDamage;

	float damageRadius;

	float woundsRatio;

	int healthAttackCost;

	int actionAttackCost;

	int mindAttackCost;

	int forceCost;

	float saberForceCost;

	int bladeColor;

	ManagedReference<PowerupObject* > powerupObject;

	float damageSlice;

	float speedSlice;

	Vector<int> dotType;

	Vector<int> dotAttribute;

	Vector<int> dotStrength;

	Vector<int> dotDuration;

	Vector<int> dotPotency;

	Vector<int> dotUses;

	Reference<SharedWeaponObjectTemplate* > weaponTemplate;

	VectorMap<String, int> wearableSkillMods;

public:
	WeaponObjectImplementation();

	WeaponObjectImplementation(DummyConstructorParameter* param);

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendContainerTo(CreatureObject* player);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void notifyLoadFromDatabase();

	/**
	 * Handles creating the Saber inventory.
	 */
	void createChildObjects();

	/**
	 * Returns true if the player has the required certifications for this weapon
	 * @pre { }
	 * @post { }
	 * @param object player object to check against
	 */
	bool isCertifiedFor(CreatureObject* object) const;

	const Vector<String>* getDamageModifiers() const;

	const Vector<String>* getSpeedModifiers() const;

	const Vector<String>* getCreatureAccuracyModifiers() const;

	const Vector<String>* getCreatureAimModifiers() const;

	const Vector<String>* getDefenderDefenseModifiers() const;

	const Vector<String>* getDefenderSecondaryDefenseModifiers() const;

	const Vector<String>* getDefenderToughnessModifiers() const;

	void setCertified(bool cert);

	int getAttackType() const;

	void setAttackType(int a);

	bool isCertified() const;

	bool isEquipped();

	int getPointBlankAccuracy(bool withPup = true) const;

	void setPointBlankAccuracy(int value);

	virtual int getPointBlankRange(bool withPup) const;

	virtual int getPointBlankRange() const;

	virtual int getIdealRange(bool withPup) const;

	virtual int getIdealRange() const;

	void setIdealRange(int value);

	virtual int getMaxRange(bool withPup) const;

	virtual int getMaxRange() const;

	void setMaxRange(int value);

	int getIdealAccuracy(bool withPup = true) const;

	void setIdealAccuracy(int value);

	int getArmorPiercing() const;

	int getMaxRangeAccuracy(bool withPup = true) const;

	void setMaxRangeAccuracy(int value);

	float getAttackSpeed(bool withPup = true) const;

	void setAttackSpeed(float value);

	float getMaxDamage(bool withPup = true) const;

	void setMaxDamage(float value);

	float getMinDamage(bool withPup = true) const;

	void setMinDamage(float value);

	float getWoundsRatio(bool withPup = true) const;

	void setWoundsRatio(float value);

	float getDamageRadius(bool withPup = true) const;

	void setDamageRadius(float value);

	int getHealthAttackCost(bool withPup = true) const;

	void setHealthAttackCost(int value);

	int getActionAttackCost(bool withPup = true) const;

	void setActionAttackCost(int value);

	int getMindAttackCost(bool withPup = true) const;

	void setMindAttackCost(int value);

	float getForceCost() const;

	void setForceCost(float value);

	int getBladeColor() const;

	void setBladeColor(int value);

	int getDamageType() const;

	String getXpType() const;

	int getNumberOfDots() const;

	int getDotType(int index) const;

	int getDotAttribute(int index) const;

	int getDotStrength(int index) const;

	int getDotDuration(int index) const;

	int getDotPotency(int index) const;

	int getDotUses(int index) const;

	void addDotType(int t);

	void addDotAttribute(int a);

	void addDotStrength(int s);

	void addDotDuration(int du);

	void addDotPotency(int po);

	void addDotUses(int u);

	void setDotUses(int u, int index);

	String getWeaponType() const;

	bool isUnarmedWeapon() const;

	bool isMeleeWeapon() const;

	bool isRangedWeapon() const;

	bool isRifleWeapon() const;

	bool isThrownWeapon() const;

	bool isHeavyWeapon() const;

	bool isSpecialHeavyWeapon() const;

	bool isLightningRifle() const;

	bool isFlameThrower() const;

	bool isHeavyAcidRifle() const;

	bool isCarbineWeapon() const;

	bool isPistolWeapon() const;

	bool isOneHandMeleeWeapon() const;

	bool isPolearmWeaponObject() const;

	bool isTwoHandMeleeWeapon() const;

	bool isMineWeapon() const;

	bool isJediWeapon() const;

	bool isJediOneHandedWeapon() const;

	bool isJediTwoHandedWeapon() const;

	bool isJediPolearmWeapon() const;

	unsigned int getWeaponBitmask() const;

	bool isWeaponObject();

	bool hasPowerup() const;

	bool applyPowerup(CreatureObject* player, PowerupObject* pup);

	Reference<PowerupObject* > removePowerup();

	void decreasePowerupUses(CreatureObject* player);

	String repairAttempt(int repairChance);

	void decay(CreatureObject* user);

	void setDamageSlice(float value);

	void setSpeedSlice(float value);

	virtual void applySkillModsTo(CreatureObject* creature) const;

	virtual void removeSkillModsFrom(CreatureObject* creature);

	virtual void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	const VectorMap<String, int>* getWearableSkillMods() const;

	WeakReference<WeaponObject*> _this;

	operator const WeaponObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~WeaponObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class WeaponObject;
};

class WeaponObjectAdapter : public TangibleObjectAdapter {
public:
	WeaponObjectAdapter(WeaponObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendContainerTo(CreatureObject* player);

	void notifyLoadFromDatabase();

	void createChildObjects();

	bool isCertifiedFor(CreatureObject* object) const;

	void setCertified(bool cert);

	int getAttackType() const;

	void setAttackType(int a);

	bool isCertified() const;

	bool isEquipped();

	int getPointBlankAccuracy(bool withPup) const;

	void setPointBlankAccuracy(int value);

	int getPointBlankRange(bool withPup) const;

	int getPointBlankRange() const;

	int getIdealRange(bool withPup) const;

	int getIdealRange() const;

	void setIdealRange(int value);

	int getMaxRange(bool withPup) const;

	int getMaxRange() const;

	void setMaxRange(int value);

	int getIdealAccuracy(bool withPup) const;

	void setIdealAccuracy(int value);

	int getArmorPiercing() const;

	int getMaxRangeAccuracy(bool withPup) const;

	void setMaxRangeAccuracy(int value);

	float getAttackSpeed(bool withPup) const;

	void setAttackSpeed(float value);

	float getMaxDamage(bool withPup) const;

	void setMaxDamage(float value);

	float getMinDamage(bool withPup) const;

	void setMinDamage(float value);

	float getWoundsRatio(bool withPup) const;

	void setWoundsRatio(float value);

	float getDamageRadius(bool withPup) const;

	void setDamageRadius(float value);

	int getHealthAttackCost(bool withPup) const;

	void setHealthAttackCost(int value);

	int getActionAttackCost(bool withPup) const;

	void setActionAttackCost(int value);

	int getMindAttackCost(bool withPup) const;

	void setMindAttackCost(int value);

	float getForceCost() const;

	void setForceCost(float value);

	int getBladeColor() const;

	void setBladeColor(int value);

	int getDamageType() const;

	String getXpType() const;

	int getNumberOfDots() const;

	int getDotType(int index) const;

	int getDotAttribute(int index) const;

	int getDotStrength(int index) const;

	int getDotDuration(int index) const;

	int getDotPotency(int index) const;

	int getDotUses(int index) const;

	void addDotType(int t);

	void addDotAttribute(int a);

	void addDotStrength(int s);

	void addDotDuration(int du);

	void addDotPotency(int po);

	void addDotUses(int u);

	void setDotUses(int u, int index);

	String getWeaponType() const;

	bool isUnarmedWeapon() const;

	bool isMeleeWeapon() const;

	bool isRangedWeapon() const;

	bool isRifleWeapon() const;

	bool isThrownWeapon() const;

	bool isHeavyWeapon() const;

	bool isSpecialHeavyWeapon() const;

	bool isLightningRifle() const;

	bool isFlameThrower() const;

	bool isHeavyAcidRifle() const;

	bool isCarbineWeapon() const;

	bool isPistolWeapon() const;

	bool isOneHandMeleeWeapon() const;

	bool isPolearmWeaponObject() const;

	bool isTwoHandMeleeWeapon() const;

	bool isMineWeapon() const;

	bool isJediWeapon() const;

	bool isJediOneHandedWeapon() const;

	bool isJediTwoHandedWeapon() const;

	bool isJediPolearmWeapon() const;

	unsigned int getWeaponBitmask() const;

	bool isWeaponObject();

	bool hasPowerup() const;

	bool applyPowerup(CreatureObject* player, PowerupObject* pup);

	Reference<PowerupObject* > removePowerup();

	void decreasePowerupUses(CreatureObject* player);

	String repairAttempt(int repairChance);

	void decay(CreatureObject* user);

	void setDamageSlice(float value);

	void setSpeedSlice(float value);

	void applySkillModsTo(CreatureObject* creature) const;

	void removeSkillModsFrom(CreatureObject* creature);

	void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient);

};

class WeaponObjectHelper : public DistributedObjectClassHelper, public Singleton<WeaponObjectHelper> {
	static WeaponObjectHelper* staticInitializer;

public:
	WeaponObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WeaponObjectHelper>;
};

class MockWeaponObject : public WeaponObject {
public:

	MOCK_METHOD1(getPointBlankRange,int(bool withPup));
	MOCK_METHOD0(getPointBlankRange,int());
	MOCK_METHOD1(getIdealRange,int(bool withPup));
	MOCK_METHOD0(getIdealRange,int());
	MOCK_METHOD1(getMaxRange,int(bool withPup));
	MOCK_METHOD0(getMaxRange,int());
	MOCK_METHOD1(isAttackableBy,bool(CreatureObject* object));
	MOCK_METHOD0(getLevel,int());
	MOCK_METHOD0(isDestroyed,bool());
	MOCK_METHOD0(getThreatMap,ThreatMap*());
	MOCK_METHOD2(isInRange,bool(SceneObject* obj, float range));
	MOCK_METHOD1(getSlottedObjects,void(VectorMap<String, ManagedReference<SceneObject* > >& objects));
	MOCK_METHOD1(getDistanceTo,float(SceneObject* object));
	MOCK_METHOD1(getDistanceTo,float(Coordinate* coordinate));
	MOCK_METHOD0(getZone,Zone*());
	MOCK_METHOD0(getZoneUnsafe,Zone*());
	MOCK_METHOD0(getWorldPositionX,float());
	MOCK_METHOD0(getWorldPositionY,float());
	MOCK_METHOD0(getWorldPositionZ,float());
	MOCK_METHOD0(getWorldPosition,Vector3());
	MOCK_METHOD1(getSlottedObject,Reference<SceneObject* >(const String& slot));
	MOCK_METHOD1(isFacingObject,bool(SceneObject* obj));
	MOCK_METHOD0(getParent,ManagedWeakReference<SceneObject* >());
	MOCK_METHOD0(asCreatureObject,CreatureObject*());
	MOCK_METHOD0(asAiAgent,AiAgent*());
	MOCK_METHOD0(asTangibleObject,TangibleObject*());
	MOCK_METHOD0(getTemplateRadius,float());

};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class WeaponObjectPOD : public TangibleObjectPOD {
public:
	Optional<int> attackType;

	Optional<String> weaponEffect;

	Optional<int> weaponEffectIndex;

	Optional<bool> certified;

	Optional<int> armorPiercing;

	Optional<int> pointBlankAccuracy;

	Optional<int> pointBlankRange;

	Optional<int> idealRange;

	Optional<int> idealAccuracy;

	Optional<int> maxRange;

	Optional<int> maxRangeAccuracy;

	Optional<int> damageType;

	Optional<float> attackSpeed;

	Optional<float> minDamage;

	Optional<float> maxDamage;

	Optional<float> damageRadius;

	Optional<float> woundsRatio;

	Optional<int> healthAttackCost;

	Optional<int> actionAttackCost;

	Optional<int> mindAttackCost;

	Optional<int> forceCost;

	Optional<float> saberForceCost;

	Optional<int> bladeColor;

	Optional<ManagedReference<PowerupObjectPOD* >> powerupObject;

	Optional<float> damageSlice;

	Optional<float> speedSlice;

	Optional<Vector<int>> dotType;

	Optional<Vector<int>> dotAttribute;

	Optional<Vector<int>> dotStrength;

	Optional<Vector<int>> dotDuration;

	Optional<Vector<int>> dotPotency;

	Optional<Vector<int>> dotUses;

	Optional<VectorMap<String, int>> wearableSkillMods;

	String _className;
	WeaponObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~WeaponObjectPOD();

};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

#endif /*WEAPONOBJECTPOD_H_*/
