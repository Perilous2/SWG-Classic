/*
 *	autogen/server/zone/objects/tangible/tool/repair/RepairTool.cpp generated by engine3 IDL compiler 0.70
 */

#include "RepairTool.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	RepairToolStub
 */

enum {RPC_ISREPAIRTOOL__ = 4136788283,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_GETQUALITY__,RPC_SENDREPAIRLISTTO__CREATUREOBJECT_};

RepairTool::RepairTool() : TangibleObject(DummyConstructorParameter::instance()) {
	RepairToolImplementation* _implementation = new RepairToolImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("RepairTool");
}

RepairTool::RepairTool(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("RepairTool");
}

RepairTool::~RepairTool() {
}



bool RepairTool::isRepairTool() {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREPAIRTOOL__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isRepairTool();
	}
}

void RepairTool::loadTemplateData(SharedObjectTemplate* templateData) {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void RepairTool::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

int RepairTool::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void RepairTool::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

float RepairTool::getQuality() {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETQUALITY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getQuality();
	}
}

void RepairTool::sendRepairListTo(CreatureObject* player) {
	RepairToolImplementation* _implementation = static_cast<RepairToolImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDREPAIRLISTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendRepairListTo(player);
	}
}

DistributedObjectServant* RepairTool::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* RepairTool::_getImplementationForRead() const {
	return _impl;
}

void RepairTool::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	RepairToolImplementation
 */

RepairToolImplementation::RepairToolImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


RepairToolImplementation::~RepairToolImplementation() {
}


void RepairToolImplementation::finalize() {
}

void RepairToolImplementation::_initializeImplementation() {
	_setClassHelper(RepairToolHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void RepairToolImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<RepairTool*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RepairToolImplementation::_getStub() {
	return _this.get();
}

RepairToolImplementation::operator const RepairTool*() {
	return _this.get();
}

void RepairToolImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void RepairToolImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void RepairToolImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void RepairToolImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void RepairToolImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void RepairToolImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void RepairToolImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void RepairToolImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("RepairTool");

}

void RepairToolImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(RepairToolImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool RepairToolImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xeebde27: //RepairTool.quality
		TypeInfo<float >::parseFromBinaryStream(&quality, stream);
		return true;

	}

	return false;
}

void RepairToolImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = RepairToolImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int RepairToolImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xeebde27; //RepairTool.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void RepairToolImplementation::writeJSON(nlohmann::json& j) {
	TangibleObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["quality"] = quality;

	j["RepairTool"] = thisObject;
}

RepairToolImplementation::RepairToolImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/repair/RepairTool.idl():  		setLoggingName("RepairTool");
	setLoggingName("RepairTool");
}

bool RepairToolImplementation::isRepairTool() {
	// server/zone/objects/tangible/tool/repair/RepairTool.idl():  		return true;
	return true;
}

float RepairToolImplementation::getQuality() {
	// server/zone/objects/tangible/tool/repair/RepairTool.idl():  		return quality;
	return quality;
}

/*
 *	RepairToolAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


RepairToolAdapter::RepairToolAdapter(RepairTool* obj) : TangibleObjectAdapter(obj) {
}

void RepairToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ISREPAIRTOOL__:
		{
			
			bool _m_res = isRepairTool();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETQUALITY__:
		{
			
			float _m_res = getQuality();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_SENDREPAIRLISTTO__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			sendRepairListTo(player);
			
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

bool RepairToolAdapter::isRepairTool() {
	return (static_cast<RepairTool*>(stub))->isRepairTool();
}

int RepairToolAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<RepairTool*>(stub))->handleObjectMenuSelect(player, selectedID);
}

float RepairToolAdapter::getQuality() {
	return (static_cast<RepairTool*>(stub))->getQuality();
}

void RepairToolAdapter::sendRepairListTo(CreatureObject* player) {
	(static_cast<RepairTool*>(stub))->sendRepairListTo(player);
}

/*
 *	RepairToolHelper
 */

RepairToolHelper* RepairToolHelper::staticInitializer = RepairToolHelper::instance();

RepairToolHelper::RepairToolHelper() {
	className = "RepairTool";

	Core::getObjectBroker()->registerClass(className, this);
}

void RepairToolHelper::finalizeHelper() {
	RepairToolHelper::finalize();
}

DistributedObject* RepairToolHelper::instantiateObject() {
	return new RepairTool(DummyConstructorParameter::instance());
}

DistributedObjectServant* RepairToolHelper::instantiateServant() {
	return new RepairToolImplementation();
}

DistributedObjectPOD* RepairToolHelper::instantiatePOD() {
	return new RepairToolPOD();
}

DistributedObjectAdapter* RepairToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RepairToolAdapter(static_cast<RepairTool*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	RepairToolPOD
 */

RepairToolPOD::~RepairToolPOD() {
	finalize();
}

RepairToolPOD::RepairToolPOD(void) {
	_className = "RepairTool";
}


void RepairToolPOD::writeJSON(nlohmann::json& j) {
	TangibleObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (quality)
		thisObject["quality"] = quality.value();

	j["RepairTool"] = thisObject;
}


void RepairToolPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = RepairToolPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int RepairToolPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (quality) {
	_nameHashCode = 0xeebde27; //RepairTool.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&quality.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool RepairToolPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xeebde27: //RepairTool.quality
		{
			float _mnquality;
			TypeInfo<float >::parseFromBinaryStream(&_mnquality, stream);
			quality = std::move(_mnquality);
		}
		return true;

	}

	return false;
}

void RepairToolPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(RepairToolPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void RepairToolPOD::writeObjectCompact(ObjectOutputStream* stream) {
	TangibleObjectPOD::writeObjectCompact(stream);

	TypeInfo<float >::toBinaryStream(&quality.value(), stream);


}

