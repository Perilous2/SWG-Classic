/*
 *	autogen/server/zone/objects/tangible/component/dna/DnaComponent.h generated by engine3 IDL compiler 0.70
 */

#ifndef DNACOMPONENT_H_
#define DNACOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/tangible/component/Component.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace component {
namespace dna {

class DnaComponent : public Component {
public:
	DnaComponent();

	void setStats(float clever, float endur, float fierc, float pow, float intel, float cour, float depend, float dext, float fort, float hardi);

	void setSpecialResist(int type);

	bool isSpecialResist(int type);

	void setCleverness(float value);

	float getCleverness();

	void setLevel(int value);

	int getLevel();

	void setEndurance(float value);

	float getEndurance();

	void setFierceness(float value);

	float getFierceness();

	void setPower(float value);

	float getPower();

	void setIntellect(float value);

	float getIntellect();

	void setCourage(float value);

	float getCourage();

	void setDependability(float value);

	float getDependability();

	void setDexterity(float value);

	float getDexterity();

	void setFortitude(float value);

	float getFortitude();

	void setHardiness(float value);

	float getHardiness();

	void setEnergy(float value);

	float getEnergy();

	void setBlast(float value);

	float getBlast();

	void setCold(float value);

	float getCold();

	void setHeat(float value);

	float getHeat();

	void setElectric(float value);

	float getElectric();

	void setAcid(float value);

	float getAcid();

	void setStun(float value);

	float getStun();

	void setSaber(float value);

	float getSaber();

	void setArmorRating(int rating);

	void setKinetic(float value);

	float getKinetic();

	void setSource(const String& src);

	void setSpecialAttackOne(const String& atk);

	String getSpecialAttackOne();

	void setSpecialAttackTwo(const String& atk);

	String getSpecialAttackTwo();

	void setRanged(bool b);

	bool isRanged();

	void setQuality(int qual);

	unsigned int getQuality();

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	void initializeTransientMembers();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	String convertSpecialAttack(String& attackName);

	String resistValue(float input);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	DnaComponent(DummyConstructorParameter* param);

	virtual ~DnaComponent();

	friend class DnaComponentHelper;
};

} // namespace dna
} // namespace component
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::component::dna;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace component {
namespace dna {

class DnaComponentImplementation : public ComponentImplementation {
protected:
	int cleverness;

	int endurance;

	int fierceness;

	int power;

	int intelligence;

	int intellect;

	int courage;

	int dependency;

	int dependability;

	int dexterity;

	int fortitude;

	int hardiness;

	String source;

	String special1;

	String special2;

	bool ranged;

	int quality;

	int armorRating;

	float kinResist;

	float energyResist;

	float blastResist;

	float coldResist;

	float heatResist;

	float elecResist;

	float acidResist;

	float stunResist;

	float saberResist;

	int sourceLevel;

	int specialResists;

public:
	DnaComponentImplementation();

	DnaComponentImplementation(DummyConstructorParameter* param);

	void setStats(float clever, float endur, float fierc, float pow, float intel, float cour, float depend, float dext, float fort, float hardi);

	void setSpecialResist(int type);

	bool isSpecialResist(int type);

	void setCleverness(float value);

	float getCleverness();

	void setLevel(int value);

	int getLevel();

	void setEndurance(float value);

	float getEndurance();

	void setFierceness(float value);

	float getFierceness();

	void setPower(float value);

	float getPower();

	void setIntellect(float value);

	float getIntellect();

	void setCourage(float value);

	float getCourage();

	void setDependability(float value);

	float getDependability();

	void setDexterity(float value);

	float getDexterity();

	void setFortitude(float value);

	float getFortitude();

	void setHardiness(float value);

	float getHardiness();

	void setEnergy(float value);

	float getEnergy();

	void setBlast(float value);

	float getBlast();

	void setCold(float value);

	float getCold();

	void setHeat(float value);

	float getHeat();

	void setElectric(float value);

	float getElectric();

	void setAcid(float value);

	float getAcid();

	void setStun(float value);

	float getStun();

	void setSaber(float value);

	float getSaber();

	void setArmorRating(int rating);

	void setKinetic(float value);

	float getKinetic();

	void setSource(const String& src);

	void setSpecialAttackOne(const String& atk);

	String getSpecialAttackOne();

	void setSpecialAttackTwo(const String& atk);

	String getSpecialAttackTwo();

	void setRanged(bool b);

	bool isRanged();

	void setQuality(int qual);

	unsigned int getQuality();

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	void initializeTransientMembers();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	String convertSpecialAttack(String& attackName);

	String resistValue(float input);

	WeakReference<DnaComponent*> _this;

	operator const DnaComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~DnaComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class DnaComponent;
};

class DnaComponentAdapter : public ComponentAdapter {
public:
	DnaComponentAdapter(DnaComponent* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setStats(float clever, float endur, float fierc, float pow, float intel, float cour, float depend, float dext, float fort, float hardi);

	void setSpecialResist(int type);

	bool isSpecialResist(int type);

	void setCleverness(float value);

	float getCleverness();

	void setLevel(int value);

	int getLevel();

	void setEndurance(float value);

	float getEndurance();

	void setFierceness(float value);

	float getFierceness();

	void setPower(float value);

	float getPower();

	void setIntellect(float value);

	float getIntellect();

	void setCourage(float value);

	float getCourage();

	void setDependability(float value);

	float getDependability();

	void setDexterity(float value);

	float getDexterity();

	void setFortitude(float value);

	float getFortitude();

	void setHardiness(float value);

	float getHardiness();

	void setEnergy(float value);

	float getEnergy();

	void setBlast(float value);

	float getBlast();

	void setCold(float value);

	float getCold();

	void setHeat(float value);

	float getHeat();

	void setElectric(float value);

	float getElectric();

	void setAcid(float value);

	float getAcid();

	void setStun(float value);

	float getStun();

	void setSaber(float value);

	float getSaber();

	void setArmorRating(int rating);

	void setKinetic(float value);

	float getKinetic();

	void setSource(const String& src);

	void setSpecialAttackOne(const String& atk);

	String getSpecialAttackOne();

	void setSpecialAttackTwo(const String& atk);

	String getSpecialAttackTwo();

	void setRanged(bool b);

	bool isRanged();

	void setQuality(int qual);

	unsigned int getQuality();

	void initializeTransientMembers();

	String convertSpecialAttack(String& attackName);

	String resistValue(float input);

};

class DnaComponentHelper : public DistributedObjectClassHelper, public Singleton<DnaComponentHelper> {
	static DnaComponentHelper* staticInitializer;

public:
	DnaComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<DnaComponentHelper>;
};

} // namespace dna
} // namespace component
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::component::dna;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace component {
namespace dna {

class DnaComponentPOD : public ComponentPOD {
public:
	Optional<int> cleverness;

	Optional<int> endurance;

	Optional<int> fierceness;

	Optional<int> power;

	Optional<int> intelligence;

	Optional<int> intellect;

	Optional<int> courage;

	Optional<int> dependency;

	Optional<int> dependability;

	Optional<int> dexterity;

	Optional<int> fortitude;

	Optional<int> hardiness;

	Optional<String> source;

	Optional<String> special1;

	Optional<String> special2;

	Optional<bool> ranged;

	Optional<int> quality;

	Optional<int> armorRating;

	Optional<float> kinResist;

	Optional<float> energyResist;

	Optional<float> blastResist;

	Optional<float> coldResist;

	Optional<float> heatResist;

	Optional<float> elecResist;

	Optional<float> acidResist;

	Optional<float> stunResist;

	Optional<float> saberResist;

	Optional<int> sourceLevel;

	Optional<int> specialResists;

	String _className;
	DnaComponentPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~DnaComponentPOD();

};

} // namespace dna
} // namespace component
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::component::dna;

#endif /*DNACOMPONENTPOD_H_*/
