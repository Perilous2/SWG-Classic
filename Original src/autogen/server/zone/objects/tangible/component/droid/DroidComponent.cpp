/*
 *	autogen/server/zone/objects/tangible/component/droid/DroidComponent.cpp generated by engine3 IDL compiler 0.70
 */

#include "DroidComponent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	DroidComponentStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 662433442,};

DroidComponent::DroidComponent() : Component(DummyConstructorParameter::instance()) {
	DroidComponentImplementation* _implementation = new DroidComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DroidComponent");
}

DroidComponent::DroidComponent(DummyConstructorParameter* param) : Component(param) {
	_setClassName("DroidComponent");
}

DroidComponent::~DroidComponent() {
}



void DroidComponent::initializeTransientMembers() {
	DroidComponentImplementation* _implementation = static_cast<DroidComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void DroidComponent::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	DroidComponentImplementation* _implementation = static_cast<DroidComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

void DroidComponent::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	DroidComponentImplementation* _implementation = static_cast<DroidComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

bool DroidComponent::isSocketCluster() {
	DroidComponentImplementation* _implementation = static_cast<DroidComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isSocketCluster();
	}
}

DistributedObjectServant* DroidComponent::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DroidComponent::_getImplementationForRead() const {
	return _impl;
}

void DroidComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DroidComponentImplementation
 */

DroidComponentImplementation::DroidComponentImplementation(DummyConstructorParameter* param) : ComponentImplementation(param) {
	_initializeImplementation();
}


DroidComponentImplementation::~DroidComponentImplementation() {
}


void DroidComponentImplementation::finalize() {
}

void DroidComponentImplementation::_initializeImplementation() {
	_setClassHelper(DroidComponentHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DroidComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DroidComponent*>(stub);
	ComponentImplementation::_setStub(stub);
}

DistributedObjectStub* DroidComponentImplementation::_getStub() {
	return _this.get();
}

DroidComponentImplementation::operator const DroidComponent*() {
	return _this.get();
}

void DroidComponentImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DroidComponentImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DroidComponentImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DroidComponentImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DroidComponentImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DroidComponentImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DroidComponentImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DroidComponentImplementation::_serializationHelperMethod() {
	ComponentImplementation::_serializationHelperMethod();

	_setClassName("DroidComponent");

}

void DroidComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DroidComponentImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DroidComponentImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xc991b943: //DroidComponent.quality
		TypeInfo<float >::parseFromBinaryStream(&quality, stream);
		return true;

	case 0x1dea5410: //DroidComponent.durability
		TypeInfo<float >::parseFromBinaryStream(&durability, stream);
		return true;

	case 0x385b0a10: //DroidComponent.autoRepairPower
		TypeInfo<float >::parseFromBinaryStream(&autoRepairPower, stream);
		return true;

	case 0xcb7bba47: //DroidComponent.combatRating
		TypeInfo<float >::parseFromBinaryStream(&combatRating, stream);
		return true;

	case 0x17bafae1: //DroidComponent.detonationRating
		TypeInfo<float >::parseFromBinaryStream(&detonationRating, stream);
		return true;

	case 0xec2c809c: //DroidComponent.harvestBonus
		TypeInfo<float >::parseFromBinaryStream(&harvestBonus, stream);
		return true;

	case 0xf1c4986d: //DroidComponent.stimpackSpeed
		TypeInfo<float >::parseFromBinaryStream(&stimpackSpeed, stream);
		return true;

	case 0x50d69405: //DroidComponent.stimpackCapacity
		TypeInfo<float >::parseFromBinaryStream(&stimpackCapacity, stream);
		return true;

	case 0xaae50d2e: //DroidComponent.trapBonus
		TypeInfo<float >::parseFromBinaryStream(&trapBonus, stream);
		return true;

	case 0x86b6725b: //DroidComponent.surveyDroid
		TypeInfo<bool >::parseFromBinaryStream(&surveyDroid, stream);
		return true;

	case 0xbfafbcf5: //DroidComponent.autoRepairDroid
		TypeInfo<bool >::parseFromBinaryStream(&autoRepairDroid, stream);
		return true;

	case 0x81e2118: //DroidComponent.combatDroid
		TypeInfo<bool >::parseFromBinaryStream(&combatDroid, stream);
		return true;

	case 0x12a17b55: //DroidComponent.detonationDroid
		TypeInfo<bool >::parseFromBinaryStream(&detonationDroid, stream);
		return true;

	case 0x7c177104: //DroidComponent.harvestDroid
		TypeInfo<bool >::parseFromBinaryStream(&harvestDroid, stream);
		return true;

	case 0xf7f7ca61: //DroidComponent.stimpackDroid
		TypeInfo<bool >::parseFromBinaryStream(&stimpackDroid, stream);
		return true;

	case 0x3adefcb6: //DroidComponent.trapDroid
		TypeInfo<bool >::parseFromBinaryStream(&trapDroid, stream);
		return true;

	}

	return false;
}

void DroidComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DroidComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DroidComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xc991b943; //DroidComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1dea5410; //DroidComponent.durability
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&durability, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x385b0a10; //DroidComponent.autoRepairPower
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&autoRepairPower, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xcb7bba47; //DroidComponent.combatRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&combatRating, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x17bafae1; //DroidComponent.detonationRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&detonationRating, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xec2c809c; //DroidComponent.harvestBonus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&harvestBonus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf1c4986d; //DroidComponent.stimpackSpeed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stimpackSpeed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x50d69405; //DroidComponent.stimpackCapacity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stimpackCapacity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xaae50d2e; //DroidComponent.trapBonus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&trapBonus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x86b6725b; //DroidComponent.surveyDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&surveyDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xbfafbcf5; //DroidComponent.autoRepairDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&autoRepairDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x81e2118; //DroidComponent.combatDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&combatDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x12a17b55; //DroidComponent.detonationDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&detonationDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x7c177104; //DroidComponent.harvestDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&harvestDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf7f7ca61; //DroidComponent.stimpackDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&stimpackDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x3adefcb6; //DroidComponent.trapDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&trapDroid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void DroidComponentImplementation::writeJSON(nlohmann::json& j) {
	ComponentImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["quality"] = quality;

	thisObject["durability"] = durability;

	thisObject["autoRepairPower"] = autoRepairPower;

	thisObject["combatRating"] = combatRating;

	thisObject["detonationRating"] = detonationRating;

	thisObject["harvestBonus"] = harvestBonus;

	thisObject["stimpackSpeed"] = stimpackSpeed;

	thisObject["stimpackCapacity"] = stimpackCapacity;

	thisObject["trapBonus"] = trapBonus;

	thisObject["surveyDroid"] = surveyDroid;

	thisObject["autoRepairDroid"] = autoRepairDroid;

	thisObject["combatDroid"] = combatDroid;

	thisObject["detonationDroid"] = detonationDroid;

	thisObject["harvestDroid"] = harvestDroid;

	thisObject["stimpackDroid"] = stimpackDroid;

	thisObject["trapDroid"] = trapDroid;

	j["DroidComponent"] = thisObject;
}

DroidComponentImplementation::DroidComponentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		Logger.setLoggingName("DroidComponent");
	Logger::setLoggingName("DroidComponent");
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		quality = 0;
	quality = 0;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		durability = 0;
	durability = 0;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		surveyDroid = false;
	surveyDroid = false;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		autoRepairDroid = false;
	autoRepairDroid = false;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		combatDroid = false;
	combatDroid = false;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		detonationDroid = false;
	detonationDroid = false;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		harvestDroid = false;
	harvestDroid = false;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		stimpackDroid = false;
	stimpackDroid = false;
	// server/zone/objects/tangible/component/droid/DroidComponent.idl():  		trapDroid = false;
	trapDroid = false;
}

/*
 *	DroidComponentAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DroidComponentAdapter::DroidComponentAdapter(DroidComponent* obj) : ComponentAdapter(obj) {
}

void DroidComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	default:
		ComponentAdapter::invokeMethod(methid, inv);
	}
}

void DroidComponentAdapter::initializeTransientMembers() {
	(static_cast<DroidComponent*>(stub))->initializeTransientMembers();
}

/*
 *	DroidComponentHelper
 */

DroidComponentHelper* DroidComponentHelper::staticInitializer = DroidComponentHelper::instance();

DroidComponentHelper::DroidComponentHelper() {
	className = "DroidComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void DroidComponentHelper::finalizeHelper() {
	DroidComponentHelper::finalize();
}

DistributedObject* DroidComponentHelper::instantiateObject() {
	return new DroidComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* DroidComponentHelper::instantiateServant() {
	return new DroidComponentImplementation();
}

DistributedObjectPOD* DroidComponentHelper::instantiatePOD() {
	return new DroidComponentPOD();
}

DistributedObjectAdapter* DroidComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DroidComponentAdapter(static_cast<DroidComponent*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DroidComponentPOD
 */

DroidComponentPOD::~DroidComponentPOD() {
	finalize();
}

DroidComponentPOD::DroidComponentPOD(void) {
	_className = "DroidComponent";
}


void DroidComponentPOD::writeJSON(nlohmann::json& j) {
	ComponentPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (quality)
		thisObject["quality"] = quality.value();

	if (durability)
		thisObject["durability"] = durability.value();

	if (autoRepairPower)
		thisObject["autoRepairPower"] = autoRepairPower.value();

	if (combatRating)
		thisObject["combatRating"] = combatRating.value();

	if (detonationRating)
		thisObject["detonationRating"] = detonationRating.value();

	if (harvestBonus)
		thisObject["harvestBonus"] = harvestBonus.value();

	if (stimpackSpeed)
		thisObject["stimpackSpeed"] = stimpackSpeed.value();

	if (stimpackCapacity)
		thisObject["stimpackCapacity"] = stimpackCapacity.value();

	if (trapBonus)
		thisObject["trapBonus"] = trapBonus.value();

	if (surveyDroid)
		thisObject["surveyDroid"] = surveyDroid.value();

	if (autoRepairDroid)
		thisObject["autoRepairDroid"] = autoRepairDroid.value();

	if (combatDroid)
		thisObject["combatDroid"] = combatDroid.value();

	if (detonationDroid)
		thisObject["detonationDroid"] = detonationDroid.value();

	if (harvestDroid)
		thisObject["harvestDroid"] = harvestDroid.value();

	if (stimpackDroid)
		thisObject["stimpackDroid"] = stimpackDroid.value();

	if (trapDroid)
		thisObject["trapDroid"] = trapDroid.value();

	j["DroidComponent"] = thisObject;
}


void DroidComponentPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DroidComponentPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DroidComponentPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (quality) {
	_nameHashCode = 0xc991b943; //DroidComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&quality.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (durability) {
	_nameHashCode = 0x1dea5410; //DroidComponent.durability
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&durability.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (autoRepairPower) {
	_nameHashCode = 0x385b0a10; //DroidComponent.autoRepairPower
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&autoRepairPower.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (combatRating) {
	_nameHashCode = 0xcb7bba47; //DroidComponent.combatRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&combatRating.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (detonationRating) {
	_nameHashCode = 0x17bafae1; //DroidComponent.detonationRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&detonationRating.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (harvestBonus) {
	_nameHashCode = 0xec2c809c; //DroidComponent.harvestBonus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&harvestBonus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (stimpackSpeed) {
	_nameHashCode = 0xf1c4986d; //DroidComponent.stimpackSpeed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stimpackSpeed.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (stimpackCapacity) {
	_nameHashCode = 0x50d69405; //DroidComponent.stimpackCapacity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stimpackCapacity.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (trapBonus) {
	_nameHashCode = 0xaae50d2e; //DroidComponent.trapBonus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&trapBonus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (surveyDroid) {
	_nameHashCode = 0x86b6725b; //DroidComponent.surveyDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&surveyDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (autoRepairDroid) {
	_nameHashCode = 0xbfafbcf5; //DroidComponent.autoRepairDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&autoRepairDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (combatDroid) {
	_nameHashCode = 0x81e2118; //DroidComponent.combatDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&combatDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (detonationDroid) {
	_nameHashCode = 0x12a17b55; //DroidComponent.detonationDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&detonationDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (harvestDroid) {
	_nameHashCode = 0x7c177104; //DroidComponent.harvestDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&harvestDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (stimpackDroid) {
	_nameHashCode = 0xf7f7ca61; //DroidComponent.stimpackDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&stimpackDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (trapDroid) {
	_nameHashCode = 0x3adefcb6; //DroidComponent.trapDroid
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&trapDroid.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool DroidComponentPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xc991b943: //DroidComponent.quality
		{
			float _mnquality;
			TypeInfo<float >::parseFromBinaryStream(&_mnquality, stream);
			quality = std::move(_mnquality);
		}
		return true;

	case 0x1dea5410: //DroidComponent.durability
		{
			float _mndurability;
			TypeInfo<float >::parseFromBinaryStream(&_mndurability, stream);
			durability = std::move(_mndurability);
		}
		return true;

	case 0x385b0a10: //DroidComponent.autoRepairPower
		{
			float _mnautoRepairPower;
			TypeInfo<float >::parseFromBinaryStream(&_mnautoRepairPower, stream);
			autoRepairPower = std::move(_mnautoRepairPower);
		}
		return true;

	case 0xcb7bba47: //DroidComponent.combatRating
		{
			float _mncombatRating;
			TypeInfo<float >::parseFromBinaryStream(&_mncombatRating, stream);
			combatRating = std::move(_mncombatRating);
		}
		return true;

	case 0x17bafae1: //DroidComponent.detonationRating
		{
			float _mndetonationRating;
			TypeInfo<float >::parseFromBinaryStream(&_mndetonationRating, stream);
			detonationRating = std::move(_mndetonationRating);
		}
		return true;

	case 0xec2c809c: //DroidComponent.harvestBonus
		{
			float _mnharvestBonus;
			TypeInfo<float >::parseFromBinaryStream(&_mnharvestBonus, stream);
			harvestBonus = std::move(_mnharvestBonus);
		}
		return true;

	case 0xf1c4986d: //DroidComponent.stimpackSpeed
		{
			float _mnstimpackSpeed;
			TypeInfo<float >::parseFromBinaryStream(&_mnstimpackSpeed, stream);
			stimpackSpeed = std::move(_mnstimpackSpeed);
		}
		return true;

	case 0x50d69405: //DroidComponent.stimpackCapacity
		{
			float _mnstimpackCapacity;
			TypeInfo<float >::parseFromBinaryStream(&_mnstimpackCapacity, stream);
			stimpackCapacity = std::move(_mnstimpackCapacity);
		}
		return true;

	case 0xaae50d2e: //DroidComponent.trapBonus
		{
			float _mntrapBonus;
			TypeInfo<float >::parseFromBinaryStream(&_mntrapBonus, stream);
			trapBonus = std::move(_mntrapBonus);
		}
		return true;

	case 0x86b6725b: //DroidComponent.surveyDroid
		{
			bool _mnsurveyDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mnsurveyDroid, stream);
			surveyDroid = std::move(_mnsurveyDroid);
		}
		return true;

	case 0xbfafbcf5: //DroidComponent.autoRepairDroid
		{
			bool _mnautoRepairDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mnautoRepairDroid, stream);
			autoRepairDroid = std::move(_mnautoRepairDroid);
		}
		return true;

	case 0x81e2118: //DroidComponent.combatDroid
		{
			bool _mncombatDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mncombatDroid, stream);
			combatDroid = std::move(_mncombatDroid);
		}
		return true;

	case 0x12a17b55: //DroidComponent.detonationDroid
		{
			bool _mndetonationDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mndetonationDroid, stream);
			detonationDroid = std::move(_mndetonationDroid);
		}
		return true;

	case 0x7c177104: //DroidComponent.harvestDroid
		{
			bool _mnharvestDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mnharvestDroid, stream);
			harvestDroid = std::move(_mnharvestDroid);
		}
		return true;

	case 0xf7f7ca61: //DroidComponent.stimpackDroid
		{
			bool _mnstimpackDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mnstimpackDroid, stream);
			stimpackDroid = std::move(_mnstimpackDroid);
		}
		return true;

	case 0x3adefcb6: //DroidComponent.trapDroid
		{
			bool _mntrapDroid;
			TypeInfo<bool >::parseFromBinaryStream(&_mntrapDroid, stream);
			trapDroid = std::move(_mntrapDroid);
		}
		return true;

	}

	return false;
}

void DroidComponentPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DroidComponentPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void DroidComponentPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ComponentPOD::writeObjectCompact(stream);

	TypeInfo<float >::toBinaryStream(&quality.value(), stream);

	TypeInfo<float >::toBinaryStream(&durability.value(), stream);

	TypeInfo<float >::toBinaryStream(&autoRepairPower.value(), stream);

	TypeInfo<float >::toBinaryStream(&combatRating.value(), stream);

	TypeInfo<float >::toBinaryStream(&detonationRating.value(), stream);

	TypeInfo<float >::toBinaryStream(&harvestBonus.value(), stream);

	TypeInfo<float >::toBinaryStream(&stimpackSpeed.value(), stream);

	TypeInfo<float >::toBinaryStream(&stimpackCapacity.value(), stream);

	TypeInfo<float >::toBinaryStream(&trapBonus.value(), stream);

	TypeInfo<bool >::toBinaryStream(&surveyDroid.value(), stream);

	TypeInfo<bool >::toBinaryStream(&autoRepairDroid.value(), stream);

	TypeInfo<bool >::toBinaryStream(&combatDroid.value(), stream);

	TypeInfo<bool >::toBinaryStream(&detonationDroid.value(), stream);

	TypeInfo<bool >::toBinaryStream(&harvestDroid.value(), stream);

	TypeInfo<bool >::toBinaryStream(&stimpackDroid.value(), stream);

	TypeInfo<bool >::toBinaryStream(&trapDroid.value(), stream);


}

