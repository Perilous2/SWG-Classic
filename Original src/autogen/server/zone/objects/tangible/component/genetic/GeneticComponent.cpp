/*
 *	autogen/server/zone/objects/tangible/component/genetic/GeneticComponent.cpp generated by engine3 IDL compiler 0.70
 */

#include "GeneticComponent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	GeneticComponentStub
 */

enum {RPC_SETSPECIALRESIST__INT_ = 245972379,RPC_ISSPECIALRESIST__INT_,RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_,RPC_GETCLEVERNESS__,RPC_GETENDURANCE__,RPC_GETFIERCENESS__,RPC_GETPOWER__,RPC_GETINTELLECT__,RPC_GETCOURAGE__,RPC_GETDEPENDABILITY__,RPC_GETDEXTERITY__,RPC_GETFORTITUDE__,RPC_GETHARDINESS__,RPC_SETLEVEL__INT_,RPC_GETKINETIC__,RPC_GETENERGY__,RPC_GETBLAST__,RPC_GETCOLD__,RPC_GETHEAT__,RPC_GETELECTRICAL__,RPC_GETACID__,RPC_GETSTUN__,RPC_GETSABER__,RPC_GETSPECIAL1__,RPC_GETSPECIAL2__,RPC_GETARMOR__,RPC_GETHIT__,RPC_GETSPEED__,RPC_GETMINDAMAGE__,RPC_GETMAXDAMAGE__,RPC_GETHEALTH__,RPC_GETMIND__,RPC_GETACTION__,RPC_GETLEVEL__,RPC_GETRANGED__,RPC_GETFOCUS__,RPC_GETWILLPOWER__,RPC_GETSTRENGTH__,RPC_GETCONSTITUTION__,RPC_GETQUICKNESS__,RPC_GETSTAMINA__,RPC_SETWILLPOWER__INT_,RPC_SETFOCUS__INT_,RPC_SETSTAMINA__INT_,RPC_SETSTRENGTH__INT_,RPC_SETQUICKNESS__INT_,RPC_SETCONSTITUTION__INT_,RPC_SETCLEVERNESS__FLOAT_,RPC_SETENDURANCE__FLOAT_,RPC_SETFIERCENESS__FLOAT_,RPC_SETPOWER__FLOAT_,RPC_SETINTELLECT__FLOAT_,RPC_SETCOURAGE__FLOAT_,RPC_SETDEPENDABILITY__FLOAT_,RPC_SETDEXTERITY__FLOAT_,RPC_SETFORTITUDE__FLOAT_,RPC_SETHARDINESS__FLOAT_,RPC_SETENERGY__FLOAT_,RPC_SETBLAST__FLOAT_,RPC_SETCOLD__FLOAT_,RPC_SETHEAT__FLOAT_,RPC_SETELECTRIC__FLOAT_,RPC_SETACID__FLOAT_,RPC_SETSTUN__FLOAT_,RPC_SETSABER__FLOAT_,RPC_SETARMORRATING__INT_,RPC_SETKINETIC__FLOAT_,RPC_SETSPECIALATTACKONE__STRING_,RPC_SETSPECIALATTACKTWO__STRING_,RPC_SETRANGED__BOOL_,RPC_SETQUALITY__INT_,RPC_GETQUALITY__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_CONVERTSPECIALATTACK__STRING_,RPC_RESISTVALUE__FLOAT_,};

GeneticComponent::GeneticComponent() : Component(DummyConstructorParameter::instance()) {
	GeneticComponentImplementation* _implementation = new GeneticComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GeneticComponent");
}

GeneticComponent::GeneticComponent(DummyConstructorParameter* param) : Component(param) {
	_setClassName("GeneticComponent");
}

GeneticComponent::~GeneticComponent() {
}



void GeneticComponent::setSpecialResist(int type) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALRESIST__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSpecialResist(type);
	}
}

bool GeneticComponent::isSpecialResist(int type) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSPECIALRESIST__INT_);
		method.addSignedIntParameter(type);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSpecialResist(type);
	}
}

void GeneticComponent::setStats(int cle, int end, int fie, int pow, int ite, int cou, int dep, int dex, int frt, int har) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_);
		method.addSignedIntParameter(cle);
		method.addSignedIntParameter(end);
		method.addSignedIntParameter(fie);
		method.addSignedIntParameter(pow);
		method.addSignedIntParameter(ite);
		method.addSignedIntParameter(cou);
		method.addSignedIntParameter(dep);
		method.addSignedIntParameter(dex);
		method.addSignedIntParameter(frt);
		method.addSignedIntParameter(har);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
	}
}

int GeneticComponent::getCleverness() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLEVERNESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCleverness();
	}
}

int GeneticComponent::getEndurance() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDURANCE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getEndurance();
	}
}

int GeneticComponent::getFierceness() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFIERCENESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFierceness();
	}
}

int GeneticComponent::getPower() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOWER__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getPower();
	}
}

int GeneticComponent::getIntellect() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINTELLECT__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getIntellect();
	}
}

int GeneticComponent::getCourage() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOURAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getCourage();
	}
}

int GeneticComponent::getDependability() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEPENDABILITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDependability();
	}
}

int GeneticComponent::getDexterity() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEXTERITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getDexterity();
	}
}

int GeneticComponent::getFortitude() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFORTITUDE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFortitude();
	}
}

int GeneticComponent::getHardiness() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHARDINESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getHardiness();
	}
}

void GeneticComponent::setLevel(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLEVEL__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setLevel(value);
	}
}

float GeneticComponent::getKinetic() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETKINETIC__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getKinetic();
	}
}

float GeneticComponent::getEnergy() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENERGY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getEnergy();
	}
}

float GeneticComponent::getBlast() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBLAST__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getBlast();
	}
}

float GeneticComponent::getCold() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOLD__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getCold();
	}
}

float GeneticComponent::getHeat() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHEAT__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getHeat();
	}
}

float GeneticComponent::getElectrical() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETELECTRICAL__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getElectrical();
	}
}

float GeneticComponent::getAcid() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACID__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getAcid();
	}
}

float GeneticComponent::getStun() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTUN__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getStun();
	}
}

float GeneticComponent::getSaber() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSABER__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getSaber();
	}
}

String GeneticComponent::getSpecial1() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIAL1__);

		String _return_getSpecial1;
		method.executeWithAsciiReturn(_return_getSpecial1);
		return _return_getSpecial1;
	} else {
		return _implementation->getSpecial1();
	}
}

String GeneticComponent::getSpecial2() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIAL2__);

		String _return_getSpecial2;
		method.executeWithAsciiReturn(_return_getSpecial2);
		return _return_getSpecial2;
	} else {
		return _implementation->getSpecial2();
	}
}

int GeneticComponent::getArmor() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARMOR__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getArmor();
	}
}

float GeneticComponent::getHit() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHIT__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getHit();
	}
}

float GeneticComponent::getSpeed() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPEED__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getSpeed();
	}
}

int GeneticComponent::getMinDamage() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMINDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMinDamage();
	}
}

int GeneticComponent::getMaxDamage() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMaxDamage();
	}
}

int GeneticComponent::getHealth() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHEALTH__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getHealth();
	}
}

int GeneticComponent::getMind() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMIND__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getMind();
	}
}

int GeneticComponent::getAction() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getAction();
	}
}

int GeneticComponent::getLevel() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEVEL__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getLevel();
	}
}

bool GeneticComponent::getRanged() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANGED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->getRanged();
	}
}

int GeneticComponent::getFocus() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFOCUS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getFocus();
	}
}

int GeneticComponent::getWillPower() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWILLPOWER__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getWillPower();
	}
}

int GeneticComponent::getStrength() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTRENGTH__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getStrength();
	}
}

int GeneticComponent::getConstitution() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONSTITUTION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getConstitution();
	}
}

int GeneticComponent::getQuickness() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETQUICKNESS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getQuickness();
	}
}

int GeneticComponent::getStamina() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTAMINA__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getStamina();
	}
}

void GeneticComponent::setWillPower(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWILLPOWER__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setWillPower(value);
	}
}

void GeneticComponent::setFocus(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFOCUS__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFocus(value);
	}
}

void GeneticComponent::setStamina(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTAMINA__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStamina(value);
	}
}

void GeneticComponent::setStrength(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTRENGTH__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStrength(value);
	}
}

void GeneticComponent::setQuickness(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETQUICKNESS__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setQuickness(value);
	}
}

void GeneticComponent::setConstitution(int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONSTITUTION__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setConstitution(value);
	}
}

void GeneticComponent::setCleverness(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLEVERNESS__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCleverness(value);
	}
}

void GeneticComponent::setEndurance(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDURANCE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setEndurance(value);
	}
}

void GeneticComponent::setFierceness(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFIERCENESS__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFierceness(value);
	}
}

void GeneticComponent::setPower(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPOWER__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPower(value);
	}
}

void GeneticComponent::setIntellect(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETINTELLECT__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setIntellect(value);
	}
}

void GeneticComponent::setCourage(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOURAGE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCourage(value);
	}
}

void GeneticComponent::setDependability(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEPENDABILITY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDependability(value);
	}
}

void GeneticComponent::setDexterity(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEXTERITY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDexterity(value);
	}
}

void GeneticComponent::setFortitude(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORTITUDE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setFortitude(value);
	}
}

void GeneticComponent::setHardiness(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHARDINESS__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setHardiness(value);
	}
}

void GeneticComponent::setEnergy(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENERGY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setEnergy(value);
	}
}

void GeneticComponent::setBlast(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBLAST__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setBlast(value);
	}
}

void GeneticComponent::setCold(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOLD__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCold(value);
	}
}

void GeneticComponent::setHeat(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHEAT__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setHeat(value);
	}
}

void GeneticComponent::setElectric(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETELECTRIC__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setElectric(value);
	}
}

void GeneticComponent::setAcid(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACID__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setAcid(value);
	}
}

void GeneticComponent::setStun(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTUN__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStun(value);
	}
}

void GeneticComponent::setSaber(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSABER__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSaber(value);
	}
}

void GeneticComponent::setArmorRating(int rating) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARMORRATING__INT_);
		method.addSignedIntParameter(rating);

		method.executeWithVoidReturn();
	} else {
		_implementation->setArmorRating(rating);
	}
}

void GeneticComponent::setKinetic(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETKINETIC__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->setKinetic(value);
	}
}

void GeneticComponent::setSpecialAttackOne(const String& atk) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALATTACKONE__STRING_);
		method.addAsciiParameter(atk);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSpecialAttackOne(atk);
	}
}

void GeneticComponent::setSpecialAttackTwo(const String& atk) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALATTACKTWO__STRING_);
		method.addAsciiParameter(atk);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSpecialAttackTwo(atk);
	}
}

void GeneticComponent::setRanged(bool b) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRANGED__BOOL_);
		method.addBooleanParameter(b);

		method.executeWithVoidReturn();
	} else {
		_implementation->setRanged(b);
	}
}

void GeneticComponent::setQuality(int qual) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETQUALITY__INT_);
		method.addSignedIntParameter(qual);

		method.executeWithVoidReturn();
	} else {
		_implementation->setQuality(qual);
	}
}

int GeneticComponent::getQuality() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETQUALITY__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getQuality();
	}
}

void GeneticComponent::initializeTransientMembers() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void GeneticComponent::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, firstUpdate);
	}
}

void GeneticComponent::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

String GeneticComponent::convertSpecialAttack(String& attackName) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONVERTSPECIALATTACK__STRING_);
		method.addAsciiParameter(attackName);

		String _return_convertSpecialAttack;
		method.executeWithAsciiReturn(_return_convertSpecialAttack);
		return _return_convertSpecialAttack;
	} else {
		return _implementation->convertSpecialAttack(attackName);
	}
}

String GeneticComponent::resistValue(float input) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESISTVALUE__FLOAT_);
		method.addFloatParameter(input);

		String _return_resistValue;
		method.executeWithAsciiReturn(_return_resistValue);
		return _return_resistValue;
	} else {
		return _implementation->resistValue(input);
	}
}

void GeneticComponent::resetResists(CraftingValues* values) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->resetResists(values);
	}
}

int GeneticComponent::getEffectiveArmor() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getEffectiveArmor();
	}
}

DistributedObjectServant* GeneticComponent::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GeneticComponent::_getImplementationForRead() const {
	return _impl;
}

void GeneticComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GeneticComponentImplementation
 */

GeneticComponentImplementation::GeneticComponentImplementation(DummyConstructorParameter* param) : ComponentImplementation(param) {
	_initializeImplementation();
}


GeneticComponentImplementation::~GeneticComponentImplementation() {
}


void GeneticComponentImplementation::finalize() {
}

void GeneticComponentImplementation::_initializeImplementation() {
	_setClassHelper(GeneticComponentHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GeneticComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GeneticComponent*>(stub);
	ComponentImplementation::_setStub(stub);
}

DistributedObjectStub* GeneticComponentImplementation::_getStub() {
	return _this.get();
}

GeneticComponentImplementation::operator const GeneticComponent*() {
	return _this.get();
}

void GeneticComponentImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GeneticComponentImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GeneticComponentImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GeneticComponentImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GeneticComponentImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GeneticComponentImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GeneticComponentImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GeneticComponentImplementation::_serializationHelperMethod() {
	ComponentImplementation::_serializationHelperMethod();

	_setClassName("GeneticComponent");

}

void GeneticComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GeneticComponentImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GeneticComponentImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x7278be62: //GeneticComponent.cleverness
		TypeInfo<float >::parseFromBinaryStream(&cleverness, stream);
		return true;

	case 0x4e1cc05e: //GeneticComponent.endurance
		TypeInfo<float >::parseFromBinaryStream(&endurance, stream);
		return true;

	case 0xd534362b: //GeneticComponent.fierceness
		TypeInfo<float >::parseFromBinaryStream(&fierceness, stream);
		return true;

	case 0x938c0c: //GeneticComponent.power
		TypeInfo<float >::parseFromBinaryStream(&power, stream);
		return true;

	case 0x38f72d8c: //GeneticComponent.intellect
		TypeInfo<float >::parseFromBinaryStream(&intellect, stream);
		return true;

	case 0xe7b461fd: //GeneticComponent.courage
		TypeInfo<float >::parseFromBinaryStream(&courage, stream);
		return true;

	case 0x738c316a: //GeneticComponent.dependability
		TypeInfo<float >::parseFromBinaryStream(&dependability, stream);
		return true;

	case 0x8757b6c4: //GeneticComponent.dexterity
		TypeInfo<float >::parseFromBinaryStream(&dexterity, stream);
		return true;

	case 0x355c15db: //GeneticComponent.fortitude
		TypeInfo<float >::parseFromBinaryStream(&fortitude, stream);
		return true;

	case 0xff30367d: //GeneticComponent.hardiness
		TypeInfo<float >::parseFromBinaryStream(&hardiness, stream);
		return true;

	case 0x78bc711: //GeneticComponent.special1
		TypeInfo<String >::parseFromBinaryStream(&special1, stream);
		return true;

	case 0xac8e1c8: //GeneticComponent.special2
		TypeInfo<String >::parseFromBinaryStream(&special2, stream);
		return true;

	case 0xae313e16: //GeneticComponent.ranged
		TypeInfo<bool >::parseFromBinaryStream(&ranged, stream);
		return true;

	case 0xbe6c4102: //GeneticComponent.quality
		TypeInfo<int >::parseFromBinaryStream(&quality, stream);
		return true;

	case 0x15ed7137: //GeneticComponent.armorRating
		TypeInfo<int >::parseFromBinaryStream(&armorRating, stream);
		return true;

	case 0xc9c334c6: //GeneticComponent.kinResist
		TypeInfo<float >::parseFromBinaryStream(&kinResist, stream);
		return true;

	case 0xea4e84cd: //GeneticComponent.energyResist
		TypeInfo<float >::parseFromBinaryStream(&energyResist, stream);
		return true;

	case 0xa259d0af: //GeneticComponent.blastResist
		TypeInfo<float >::parseFromBinaryStream(&blastResist, stream);
		return true;

	case 0xc925dac1: //GeneticComponent.coldResist
		TypeInfo<float >::parseFromBinaryStream(&coldResist, stream);
		return true;

	case 0x364f80d2: //GeneticComponent.heatResist
		TypeInfo<float >::parseFromBinaryStream(&heatResist, stream);
		return true;

	case 0xb28dda63: //GeneticComponent.elecResist
		TypeInfo<float >::parseFromBinaryStream(&elecResist, stream);
		return true;

	case 0xb621b999: //GeneticComponent.acidResist
		TypeInfo<float >::parseFromBinaryStream(&acidResist, stream);
		return true;

	case 0xad82c707: //GeneticComponent.stunResist
		TypeInfo<float >::parseFromBinaryStream(&stunResist, stream);
		return true;

	case 0xa08c0561: //GeneticComponent.saberResist
		TypeInfo<float >::parseFromBinaryStream(&saberResist, stream);
		return true;

	case 0xd6eb61ab: //GeneticComponent.level
		TypeInfo<int >::parseFromBinaryStream(&level, stream);
		return true;

	case 0xc91430e9: //GeneticComponent.health
		TypeInfo<int >::parseFromBinaryStream(&health, stream);
		return true;

	case 0x1ad03562: //GeneticComponent.action
		TypeInfo<int >::parseFromBinaryStream(&action, stream);
		return true;

	case 0x7edb6f2: //GeneticComponent.mind
		TypeInfo<int >::parseFromBinaryStream(&mind, stream);
		return true;

	case 0x3a40482f: //GeneticComponent.willPower
		TypeInfo<int >::parseFromBinaryStream(&willPower, stream);
		return true;

	case 0xd529fc12: //GeneticComponent.constitution
		TypeInfo<int >::parseFromBinaryStream(&constitution, stream);
		return true;

	case 0xb7757669: //GeneticComponent.stamina
		TypeInfo<int >::parseFromBinaryStream(&stamina, stream);
		return true;

	case 0xa3764814: //GeneticComponent.strength
		TypeInfo<int >::parseFromBinaryStream(&strength, stream);
		return true;

	case 0x3fd73251: //GeneticComponent.focus
		TypeInfo<int >::parseFromBinaryStream(&focus, stream);
		return true;

	case 0xcbd994cc: //GeneticComponent.quickness
		TypeInfo<int >::parseFromBinaryStream(&quickness, stream);
		return true;

	case 0xa062e780: //GeneticComponent.hit
		TypeInfo<float >::parseFromBinaryStream(&hit, stream);
		return true;

	case 0x815468e5: //GeneticComponent.speed
		TypeInfo<float >::parseFromBinaryStream(&speed, stream);
		return true;

	case 0x9f900e40: //GeneticComponent.minDam
		TypeInfo<int >::parseFromBinaryStream(&minDam, stream);
		return true;

	case 0xe9824039: //GeneticComponent.maxDam
		TypeInfo<int >::parseFromBinaryStream(&maxDam, stream);
		return true;

	case 0xeea5c95e: //GeneticComponent.specialResists
		TypeInfo<int >::parseFromBinaryStream(&specialResists, stream);
		return true;

	}

	return false;
}

void GeneticComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GeneticComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GeneticComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x7278be62; //GeneticComponent.cleverness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&cleverness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x4e1cc05e; //GeneticComponent.endurance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&endurance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xd534362b; //GeneticComponent.fierceness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&fierceness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x938c0c; //GeneticComponent.power
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&power, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x38f72d8c; //GeneticComponent.intellect
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&intellect, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe7b461fd; //GeneticComponent.courage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&courage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x738c316a; //GeneticComponent.dependability
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&dependability, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x8757b6c4; //GeneticComponent.dexterity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&dexterity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x355c15db; //GeneticComponent.fortitude
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&fortitude, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xff30367d; //GeneticComponent.hardiness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&hardiness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x78bc711; //GeneticComponent.special1
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special1, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xac8e1c8; //GeneticComponent.special2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special2, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xae313e16; //GeneticComponent.ranged
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&ranged, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xbe6c4102; //GeneticComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x15ed7137; //GeneticComponent.armorRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&armorRating, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xc9c334c6; //GeneticComponent.kinResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&kinResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xea4e84cd; //GeneticComponent.energyResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&energyResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa259d0af; //GeneticComponent.blastResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&blastResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xc925dac1; //GeneticComponent.coldResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&coldResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x364f80d2; //GeneticComponent.heatResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&heatResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb28dda63; //GeneticComponent.elecResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&elecResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb621b999; //GeneticComponent.acidResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&acidResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xad82c707; //GeneticComponent.stunResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stunResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa08c0561; //GeneticComponent.saberResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&saberResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xd6eb61ab; //GeneticComponent.level
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&level, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xc91430e9; //GeneticComponent.health
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&health, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1ad03562; //GeneticComponent.action
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&action, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x7edb6f2; //GeneticComponent.mind
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&mind, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x3a40482f; //GeneticComponent.willPower
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&willPower, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xd529fc12; //GeneticComponent.constitution
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&constitution, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb7757669; //GeneticComponent.stamina
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&stamina, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa3764814; //GeneticComponent.strength
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&strength, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x3fd73251; //GeneticComponent.focus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&focus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xcbd994cc; //GeneticComponent.quickness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quickness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa062e780; //GeneticComponent.hit
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&hit, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x815468e5; //GeneticComponent.speed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&speed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x9f900e40; //GeneticComponent.minDam
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&minDam, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe9824039; //GeneticComponent.maxDam
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxDam, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xeea5c95e; //GeneticComponent.specialResists
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&specialResists, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void GeneticComponentImplementation::writeJSON(nlohmann::json& j) {
	ComponentImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["cleverness"] = cleverness;

	thisObject["endurance"] = endurance;

	thisObject["fierceness"] = fierceness;

	thisObject["power"] = power;

	thisObject["intellect"] = intellect;

	thisObject["courage"] = courage;

	thisObject["dependability"] = dependability;

	thisObject["dexterity"] = dexterity;

	thisObject["fortitude"] = fortitude;

	thisObject["hardiness"] = hardiness;

	thisObject["special1"] = special1;

	thisObject["special2"] = special2;

	thisObject["ranged"] = ranged;

	thisObject["quality"] = quality;

	thisObject["armorRating"] = armorRating;

	thisObject["kinResist"] = kinResist;

	thisObject["energyResist"] = energyResist;

	thisObject["blastResist"] = blastResist;

	thisObject["coldResist"] = coldResist;

	thisObject["heatResist"] = heatResist;

	thisObject["elecResist"] = elecResist;

	thisObject["acidResist"] = acidResist;

	thisObject["stunResist"] = stunResist;

	thisObject["saberResist"] = saberResist;

	thisObject["level"] = level;

	thisObject["health"] = health;

	thisObject["action"] = action;

	thisObject["mind"] = mind;

	thisObject["willPower"] = willPower;

	thisObject["constitution"] = constitution;

	thisObject["stamina"] = stamina;

	thisObject["strength"] = strength;

	thisObject["focus"] = focus;

	thisObject["quickness"] = quickness;

	thisObject["hit"] = hit;

	thisObject["speed"] = speed;

	thisObject["minDam"] = minDam;

	thisObject["maxDam"] = maxDam;

	thisObject["specialResists"] = specialResists;

	j["GeneticComponent"] = thisObject;
}

GeneticComponentImplementation::GeneticComponentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		Logger.setLoggingName("GeneticComponent");
	Logger::setLoggingName("GeneticComponent");
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fortitude = 0.f;
	fortitude = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hardiness = 0.f;
	hardiness = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dexterity = 0.f;
	dexterity = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		endurance = 0.f;
	endurance = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		intellect = 0.f;
	intellect = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		cleverness = 0.f;
	cleverness = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dependability = 0.f;
	dependability = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		courage = 0.f;
	courage = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fierceness = 0.f;
	fierceness = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		power = 0.f;
	power = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		willPower = 0;
	willPower = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		constitution = 0;
	constitution = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		stamina = 0;
	stamina = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		strength = 0;
	strength = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		focus = 0;
	focus = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		quickness = 0;
	quickness = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special1 = "none";
	special1 = "none";
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special2 = "none";
	special2 = "none";
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		ranged = false;
	ranged = false;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		quality = 7;
	quality = 7;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		armorRating = 0;
	armorRating = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		kinResist = 0.f;
	kinResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		energyResist = 0.f;
	energyResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		blastResist = 0.f;
	blastResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		coldResist = 0.f;
	coldResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		heatResist = 0.f;
	heatResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		elecResist = 0.f;
	elecResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		acidResist = 0.f;
	acidResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		stunResist = 0.f;
	stunResist = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		saberResist = -1.f;
	saberResist = -1.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		level = 1;
	level = 1;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		health = 10;
	health = 10;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		action = 10;
	action = 10;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		mind = 10;
	mind = 10;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hit = 0.f;
	hit = 0.f;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		speed = 0;
	speed = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		minDam = 1;
	minDam = 1;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		maxDam = 1;
	maxDam = 1;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		specialResists = 0;
	specialResists = 0;
}

void GeneticComponentImplementation::setStats(int cle, int end, int fie, int pow, int ite, int cou, int dep, int dex, int frt, int har) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		cleverness = cle;
	cleverness = cle;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		endurance = end;
	endurance = end;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fierceness = fie;
	fierceness = fie;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		power = pow;
	power = pow;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		intellect = ite;
	intellect = ite;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		courage = cou;
	courage = cou;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dependability = dep;
	dependability = dep;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fortitude = frt;
	fortitude = frt;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hardiness = har;
	hardiness = har;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dexterity = dex;
	dexterity = dex;
}

int GeneticComponentImplementation::getCleverness() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return cleverness;
	return cleverness;
}

int GeneticComponentImplementation::getEndurance() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return endurance;
	return endurance;
}

int GeneticComponentImplementation::getFierceness() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return fierceness;
	return fierceness;
}

int GeneticComponentImplementation::getPower() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return power;
	return power;
}

int GeneticComponentImplementation::getIntellect() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return intellect;
	return intellect;
}

int GeneticComponentImplementation::getCourage() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return courage;
	return courage;
}

int GeneticComponentImplementation::getDependability() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return dependability;
	return dependability;
}

int GeneticComponentImplementation::getDexterity() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return dexterity;
	return dexterity;
}

int GeneticComponentImplementation::getFortitude() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return fortitude;
	return fortitude;
}

int GeneticComponentImplementation::getHardiness() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return hardiness;
	return hardiness;
}

void GeneticComponentImplementation::setLevel(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		level = value;
	level = value;
}

float GeneticComponentImplementation::getKinetic() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return kinResist;
	return kinResist;
}

float GeneticComponentImplementation::getEnergy() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return energyResist;
	return energyResist;
}

float GeneticComponentImplementation::getBlast() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return blastResist;
	return blastResist;
}

float GeneticComponentImplementation::getCold() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return coldResist;
	return coldResist;
}

float GeneticComponentImplementation::getHeat() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return heatResist;
	return heatResist;
}

float GeneticComponentImplementation::getElectrical() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return elecResist;
	return elecResist;
}

float GeneticComponentImplementation::getAcid() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return acidResist;
	return acidResist;
}

float GeneticComponentImplementation::getStun() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return stunResist;
	return stunResist;
}

float GeneticComponentImplementation::getSaber() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return saberResist;
	return saberResist;
}

String GeneticComponentImplementation::getSpecial1() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return special1;
	return special1;
}

String GeneticComponentImplementation::getSpecial2() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return special2;
	return special2;
}

int GeneticComponentImplementation::getArmor() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return armorRating;
	return armorRating;
}

float GeneticComponentImplementation::getHit() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return hit;
	return hit;
}

float GeneticComponentImplementation::getSpeed() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return speed;
	return speed;
}

int GeneticComponentImplementation::getMinDamage() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return minDam;
	return minDam;
}

int GeneticComponentImplementation::getMaxDamage() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return maxDam;
	return maxDam;
}

int GeneticComponentImplementation::getHealth() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return health;
	return health;
}

int GeneticComponentImplementation::getMind() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return mind;
	return mind;
}

int GeneticComponentImplementation::getAction() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return action;
	return action;
}

int GeneticComponentImplementation::getLevel() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return level;
	return level;
}

bool GeneticComponentImplementation::getRanged() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return ranged;
	return ranged;
}

int GeneticComponentImplementation::getFocus() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return focus;
	return focus;
}

int GeneticComponentImplementation::getWillPower() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return willPower;
	return willPower;
}

int GeneticComponentImplementation::getStrength() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return strength;
	return strength;
}

int GeneticComponentImplementation::getConstitution() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return constitution;
	return constitution;
}

int GeneticComponentImplementation::getQuickness() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return quickness;
	return quickness;
}

int GeneticComponentImplementation::getStamina() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return stamina;
	return stamina;
}

void GeneticComponentImplementation::setWillPower(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		willPower = value;
	willPower = value;
}

void GeneticComponentImplementation::setFocus(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		focus = value;
	focus = value;
}

void GeneticComponentImplementation::setStamina(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		stamina = value;
	stamina = value;
}

void GeneticComponentImplementation::setStrength(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		strength = value;
	strength = value;
}

void GeneticComponentImplementation::setQuickness(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		quickness = value;
	quickness = value;
}

void GeneticComponentImplementation::setConstitution(int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		constitution = value;
	constitution = value;
}

void GeneticComponentImplementation::setCleverness(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		cleverness = value;
	cleverness = value;
}

void GeneticComponentImplementation::setEndurance(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		endurance = value;
	endurance = value;
}

void GeneticComponentImplementation::setFierceness(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fierceness = value;
	fierceness = value;
}

void GeneticComponentImplementation::setPower(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		power = value;
	power = value;
}

void GeneticComponentImplementation::setIntellect(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		intellect = value;
	intellect = value;
}

void GeneticComponentImplementation::setCourage(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		courage = value;
	courage = value;
}

void GeneticComponentImplementation::setDependability(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dependability = value;
	dependability = value;
}

void GeneticComponentImplementation::setDexterity(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dexterity = value;
	dexterity = value;
}

void GeneticComponentImplementation::setFortitude(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fortitude = value;
	fortitude = value;
}

void GeneticComponentImplementation::setHardiness(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hardiness = value;
	hardiness = value;
}

void GeneticComponentImplementation::setEnergy(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		energyResist = value;
	energyResist = value;
}

void GeneticComponentImplementation::setBlast(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		blastResist = value;
	blastResist = value;
}

void GeneticComponentImplementation::setCold(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		coldResist = value;
	coldResist = value;
}

void GeneticComponentImplementation::setHeat(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		heatResist = value;
	heatResist = value;
}

void GeneticComponentImplementation::setElectric(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		elecResist = value;
	elecResist = value;
}

void GeneticComponentImplementation::setAcid(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		acidResist = value;
	acidResist = value;
}

void GeneticComponentImplementation::setStun(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		stunResist = value;
	stunResist = value;
}

void GeneticComponentImplementation::setSaber(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		saberResist = value;
	saberResist = value;
}

void GeneticComponentImplementation::setArmorRating(int rating) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		armorRating = rating;
	armorRating = rating;
}

void GeneticComponentImplementation::setKinetic(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		kinResist = value;
	kinResist = value;
}

void GeneticComponentImplementation::setSpecialAttackOne(const String& atk) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special1 = atk;
	special1 = atk;
}

void GeneticComponentImplementation::setSpecialAttackTwo(const String& atk) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special2 = atk;
	special2 = atk;
}

void GeneticComponentImplementation::setRanged(bool b) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		ranged = b;
	ranged = b;
}

void GeneticComponentImplementation::setQuality(int qual) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		quality = qual;
	quality = qual;
}

int GeneticComponentImplementation::getQuality() {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		return quality;
	return quality;
}

/*
 *	GeneticComponentAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GeneticComponentAdapter::GeneticComponentAdapter(GeneticComponent* obj) : ComponentAdapter(obj) {
}

void GeneticComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSPECIALRESIST__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			setSpecialResist(type);
			
		}
		break;
	case RPC_ISSPECIALRESIST__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			bool _m_res = isSpecialResist(type);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_:
		{
			int cle = inv->getSignedIntParameter();
			int end = inv->getSignedIntParameter();
			int fie = inv->getSignedIntParameter();
			int pow = inv->getSignedIntParameter();
			int ite = inv->getSignedIntParameter();
			int cou = inv->getSignedIntParameter();
			int dep = inv->getSignedIntParameter();
			int dex = inv->getSignedIntParameter();
			int frt = inv->getSignedIntParameter();
			int har = inv->getSignedIntParameter();
			
			setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
			
		}
		break;
	case RPC_GETCLEVERNESS__:
		{
			
			int _m_res = getCleverness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETENDURANCE__:
		{
			
			int _m_res = getEndurance();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFIERCENESS__:
		{
			
			int _m_res = getFierceness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPOWER__:
		{
			
			int _m_res = getPower();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETINTELLECT__:
		{
			
			int _m_res = getIntellect();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCOURAGE__:
		{
			
			int _m_res = getCourage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDEPENDABILITY__:
		{
			
			int _m_res = getDependability();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETDEXTERITY__:
		{
			
			int _m_res = getDexterity();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETFORTITUDE__:
		{
			
			int _m_res = getFortitude();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETHARDINESS__:
		{
			
			int _m_res = getHardiness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETLEVEL__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setLevel(value);
			
		}
		break;
	case RPC_GETKINETIC__:
		{
			
			float _m_res = getKinetic();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETENERGY__:
		{
			
			float _m_res = getEnergy();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETBLAST__:
		{
			
			float _m_res = getBlast();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETCOLD__:
		{
			
			float _m_res = getCold();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETHEAT__:
		{
			
			float _m_res = getHeat();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETELECTRICAL__:
		{
			
			float _m_res = getElectrical();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETACID__:
		{
			
			float _m_res = getAcid();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSTUN__:
		{
			
			float _m_res = getStun();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSABER__:
		{
			
			float _m_res = getSaber();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSPECIAL1__:
		{
			
			String _m_res = getSpecial1();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETSPECIAL2__:
		{
			
			String _m_res = getSpecial2();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_GETARMOR__:
		{
			
			int _m_res = getArmor();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETHIT__:
		{
			
			float _m_res = getHit();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETSPEED__:
		{
			
			float _m_res = getSpeed();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETMINDAMAGE__:
		{
			
			int _m_res = getMinDamage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMAXDAMAGE__:
		{
			
			int _m_res = getMaxDamage();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETHEALTH__:
		{
			
			int _m_res = getHealth();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETMIND__:
		{
			
			int _m_res = getMind();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETACTION__:
		{
			
			int _m_res = getAction();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETLEVEL__:
		{
			
			int _m_res = getLevel();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETRANGED__:
		{
			
			bool _m_res = getRanged();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETFOCUS__:
		{
			
			int _m_res = getFocus();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETWILLPOWER__:
		{
			
			int _m_res = getWillPower();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSTRENGTH__:
		{
			
			int _m_res = getStrength();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETCONSTITUTION__:
		{
			
			int _m_res = getConstitution();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETQUICKNESS__:
		{
			
			int _m_res = getQuickness();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSTAMINA__:
		{
			
			int _m_res = getStamina();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETWILLPOWER__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setWillPower(value);
			
		}
		break;
	case RPC_SETFOCUS__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setFocus(value);
			
		}
		break;
	case RPC_SETSTAMINA__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setStamina(value);
			
		}
		break;
	case RPC_SETSTRENGTH__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setStrength(value);
			
		}
		break;
	case RPC_SETQUICKNESS__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setQuickness(value);
			
		}
		break;
	case RPC_SETCONSTITUTION__INT_:
		{
			int value = inv->getSignedIntParameter();
			
			setConstitution(value);
			
		}
		break;
	case RPC_SETCLEVERNESS__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setCleverness(value);
			
		}
		break;
	case RPC_SETENDURANCE__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setEndurance(value);
			
		}
		break;
	case RPC_SETFIERCENESS__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setFierceness(value);
			
		}
		break;
	case RPC_SETPOWER__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setPower(value);
			
		}
		break;
	case RPC_SETINTELLECT__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setIntellect(value);
			
		}
		break;
	case RPC_SETCOURAGE__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setCourage(value);
			
		}
		break;
	case RPC_SETDEPENDABILITY__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setDependability(value);
			
		}
		break;
	case RPC_SETDEXTERITY__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setDexterity(value);
			
		}
		break;
	case RPC_SETFORTITUDE__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setFortitude(value);
			
		}
		break;
	case RPC_SETHARDINESS__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setHardiness(value);
			
		}
		break;
	case RPC_SETENERGY__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setEnergy(value);
			
		}
		break;
	case RPC_SETBLAST__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setBlast(value);
			
		}
		break;
	case RPC_SETCOLD__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setCold(value);
			
		}
		break;
	case RPC_SETHEAT__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setHeat(value);
			
		}
		break;
	case RPC_SETELECTRIC__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setElectric(value);
			
		}
		break;
	case RPC_SETACID__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setAcid(value);
			
		}
		break;
	case RPC_SETSTUN__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setStun(value);
			
		}
		break;
	case RPC_SETSABER__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setSaber(value);
			
		}
		break;
	case RPC_SETARMORRATING__INT_:
		{
			int rating = inv->getSignedIntParameter();
			
			setArmorRating(rating);
			
		}
		break;
	case RPC_SETKINETIC__FLOAT_:
		{
			float value = inv->getFloatParameter();
			
			setKinetic(value);
			
		}
		break;
	case RPC_SETSPECIALATTACKONE__STRING_:
		{
			 String atk; inv->getAsciiParameter(atk);
			
			setSpecialAttackOne(atk);
			
		}
		break;
	case RPC_SETSPECIALATTACKTWO__STRING_:
		{
			 String atk; inv->getAsciiParameter(atk);
			
			setSpecialAttackTwo(atk);
			
		}
		break;
	case RPC_SETRANGED__BOOL_:
		{
			bool b = inv->getBooleanParameter();
			
			setRanged(b);
			
		}
		break;
	case RPC_SETQUALITY__INT_:
		{
			int qual = inv->getSignedIntParameter();
			
			setQuality(qual);
			
		}
		break;
	case RPC_GETQUALITY__:
		{
			
			int _m_res = getQuality();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_CONVERTSPECIALATTACK__STRING_:
		{
			String attackName; inv->getAsciiParameter(attackName);
			
			String _m_res = convertSpecialAttack(attackName);
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_RESISTVALUE__FLOAT_:
		{
			float input = inv->getFloatParameter();
			
			String _m_res = resistValue(input);
			resp->insertAscii(_m_res);
		}
		break;
	default:
		ComponentAdapter::invokeMethod(methid, inv);
	}
}

void GeneticComponentAdapter::setSpecialResist(int type) {
	(static_cast<GeneticComponent*>(stub))->setSpecialResist(type);
}

bool GeneticComponentAdapter::isSpecialResist(int type) {
	return (static_cast<GeneticComponent*>(stub))->isSpecialResist(type);
}

void GeneticComponentAdapter::setStats(int cle, int end, int fie, int pow, int ite, int cou, int dep, int dex, int frt, int har) {
	(static_cast<GeneticComponent*>(stub))->setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
}

int GeneticComponentAdapter::getCleverness() {
	return (static_cast<GeneticComponent*>(stub))->getCleverness();
}

int GeneticComponentAdapter::getEndurance() {
	return (static_cast<GeneticComponent*>(stub))->getEndurance();
}

int GeneticComponentAdapter::getFierceness() {
	return (static_cast<GeneticComponent*>(stub))->getFierceness();
}

int GeneticComponentAdapter::getPower() {
	return (static_cast<GeneticComponent*>(stub))->getPower();
}

int GeneticComponentAdapter::getIntellect() {
	return (static_cast<GeneticComponent*>(stub))->getIntellect();
}

int GeneticComponentAdapter::getCourage() {
	return (static_cast<GeneticComponent*>(stub))->getCourage();
}

int GeneticComponentAdapter::getDependability() {
	return (static_cast<GeneticComponent*>(stub))->getDependability();
}

int GeneticComponentAdapter::getDexterity() {
	return (static_cast<GeneticComponent*>(stub))->getDexterity();
}

int GeneticComponentAdapter::getFortitude() {
	return (static_cast<GeneticComponent*>(stub))->getFortitude();
}

int GeneticComponentAdapter::getHardiness() {
	return (static_cast<GeneticComponent*>(stub))->getHardiness();
}

void GeneticComponentAdapter::setLevel(int value) {
	(static_cast<GeneticComponent*>(stub))->setLevel(value);
}

float GeneticComponentAdapter::getKinetic() {
	return (static_cast<GeneticComponent*>(stub))->getKinetic();
}

float GeneticComponentAdapter::getEnergy() {
	return (static_cast<GeneticComponent*>(stub))->getEnergy();
}

float GeneticComponentAdapter::getBlast() {
	return (static_cast<GeneticComponent*>(stub))->getBlast();
}

float GeneticComponentAdapter::getCold() {
	return (static_cast<GeneticComponent*>(stub))->getCold();
}

float GeneticComponentAdapter::getHeat() {
	return (static_cast<GeneticComponent*>(stub))->getHeat();
}

float GeneticComponentAdapter::getElectrical() {
	return (static_cast<GeneticComponent*>(stub))->getElectrical();
}

float GeneticComponentAdapter::getAcid() {
	return (static_cast<GeneticComponent*>(stub))->getAcid();
}

float GeneticComponentAdapter::getStun() {
	return (static_cast<GeneticComponent*>(stub))->getStun();
}

float GeneticComponentAdapter::getSaber() {
	return (static_cast<GeneticComponent*>(stub))->getSaber();
}

String GeneticComponentAdapter::getSpecial1() {
	return (static_cast<GeneticComponent*>(stub))->getSpecial1();
}

String GeneticComponentAdapter::getSpecial2() {
	return (static_cast<GeneticComponent*>(stub))->getSpecial2();
}

int GeneticComponentAdapter::getArmor() {
	return (static_cast<GeneticComponent*>(stub))->getArmor();
}

float GeneticComponentAdapter::getHit() {
	return (static_cast<GeneticComponent*>(stub))->getHit();
}

float GeneticComponentAdapter::getSpeed() {
	return (static_cast<GeneticComponent*>(stub))->getSpeed();
}

int GeneticComponentAdapter::getMinDamage() {
	return (static_cast<GeneticComponent*>(stub))->getMinDamage();
}

int GeneticComponentAdapter::getMaxDamage() {
	return (static_cast<GeneticComponent*>(stub))->getMaxDamage();
}

int GeneticComponentAdapter::getHealth() {
	return (static_cast<GeneticComponent*>(stub))->getHealth();
}

int GeneticComponentAdapter::getMind() {
	return (static_cast<GeneticComponent*>(stub))->getMind();
}

int GeneticComponentAdapter::getAction() {
	return (static_cast<GeneticComponent*>(stub))->getAction();
}

int GeneticComponentAdapter::getLevel() {
	return (static_cast<GeneticComponent*>(stub))->getLevel();
}

bool GeneticComponentAdapter::getRanged() {
	return (static_cast<GeneticComponent*>(stub))->getRanged();
}

int GeneticComponentAdapter::getFocus() {
	return (static_cast<GeneticComponent*>(stub))->getFocus();
}

int GeneticComponentAdapter::getWillPower() {
	return (static_cast<GeneticComponent*>(stub))->getWillPower();
}

int GeneticComponentAdapter::getStrength() {
	return (static_cast<GeneticComponent*>(stub))->getStrength();
}

int GeneticComponentAdapter::getConstitution() {
	return (static_cast<GeneticComponent*>(stub))->getConstitution();
}

int GeneticComponentAdapter::getQuickness() {
	return (static_cast<GeneticComponent*>(stub))->getQuickness();
}

int GeneticComponentAdapter::getStamina() {
	return (static_cast<GeneticComponent*>(stub))->getStamina();
}

void GeneticComponentAdapter::setWillPower(int value) {
	(static_cast<GeneticComponent*>(stub))->setWillPower(value);
}

void GeneticComponentAdapter::setFocus(int value) {
	(static_cast<GeneticComponent*>(stub))->setFocus(value);
}

void GeneticComponentAdapter::setStamina(int value) {
	(static_cast<GeneticComponent*>(stub))->setStamina(value);
}

void GeneticComponentAdapter::setStrength(int value) {
	(static_cast<GeneticComponent*>(stub))->setStrength(value);
}

void GeneticComponentAdapter::setQuickness(int value) {
	(static_cast<GeneticComponent*>(stub))->setQuickness(value);
}

void GeneticComponentAdapter::setConstitution(int value) {
	(static_cast<GeneticComponent*>(stub))->setConstitution(value);
}

void GeneticComponentAdapter::setCleverness(float value) {
	(static_cast<GeneticComponent*>(stub))->setCleverness(value);
}

void GeneticComponentAdapter::setEndurance(float value) {
	(static_cast<GeneticComponent*>(stub))->setEndurance(value);
}

void GeneticComponentAdapter::setFierceness(float value) {
	(static_cast<GeneticComponent*>(stub))->setFierceness(value);
}

void GeneticComponentAdapter::setPower(float value) {
	(static_cast<GeneticComponent*>(stub))->setPower(value);
}

void GeneticComponentAdapter::setIntellect(float value) {
	(static_cast<GeneticComponent*>(stub))->setIntellect(value);
}

void GeneticComponentAdapter::setCourage(float value) {
	(static_cast<GeneticComponent*>(stub))->setCourage(value);
}

void GeneticComponentAdapter::setDependability(float value) {
	(static_cast<GeneticComponent*>(stub))->setDependability(value);
}

void GeneticComponentAdapter::setDexterity(float value) {
	(static_cast<GeneticComponent*>(stub))->setDexterity(value);
}

void GeneticComponentAdapter::setFortitude(float value) {
	(static_cast<GeneticComponent*>(stub))->setFortitude(value);
}

void GeneticComponentAdapter::setHardiness(float value) {
	(static_cast<GeneticComponent*>(stub))->setHardiness(value);
}

void GeneticComponentAdapter::setEnergy(float value) {
	(static_cast<GeneticComponent*>(stub))->setEnergy(value);
}

void GeneticComponentAdapter::setBlast(float value) {
	(static_cast<GeneticComponent*>(stub))->setBlast(value);
}

void GeneticComponentAdapter::setCold(float value) {
	(static_cast<GeneticComponent*>(stub))->setCold(value);
}

void GeneticComponentAdapter::setHeat(float value) {
	(static_cast<GeneticComponent*>(stub))->setHeat(value);
}

void GeneticComponentAdapter::setElectric(float value) {
	(static_cast<GeneticComponent*>(stub))->setElectric(value);
}

void GeneticComponentAdapter::setAcid(float value) {
	(static_cast<GeneticComponent*>(stub))->setAcid(value);
}

void GeneticComponentAdapter::setStun(float value) {
	(static_cast<GeneticComponent*>(stub))->setStun(value);
}

void GeneticComponentAdapter::setSaber(float value) {
	(static_cast<GeneticComponent*>(stub))->setSaber(value);
}

void GeneticComponentAdapter::setArmorRating(int rating) {
	(static_cast<GeneticComponent*>(stub))->setArmorRating(rating);
}

void GeneticComponentAdapter::setKinetic(float value) {
	(static_cast<GeneticComponent*>(stub))->setKinetic(value);
}

void GeneticComponentAdapter::setSpecialAttackOne(const String& atk) {
	(static_cast<GeneticComponent*>(stub))->setSpecialAttackOne(atk);
}

void GeneticComponentAdapter::setSpecialAttackTwo(const String& atk) {
	(static_cast<GeneticComponent*>(stub))->setSpecialAttackTwo(atk);
}

void GeneticComponentAdapter::setRanged(bool b) {
	(static_cast<GeneticComponent*>(stub))->setRanged(b);
}

void GeneticComponentAdapter::setQuality(int qual) {
	(static_cast<GeneticComponent*>(stub))->setQuality(qual);
}

int GeneticComponentAdapter::getQuality() {
	return (static_cast<GeneticComponent*>(stub))->getQuality();
}

void GeneticComponentAdapter::initializeTransientMembers() {
	(static_cast<GeneticComponent*>(stub))->initializeTransientMembers();
}

String GeneticComponentAdapter::convertSpecialAttack(String& attackName) {
	return (static_cast<GeneticComponent*>(stub))->convertSpecialAttack(attackName);
}

String GeneticComponentAdapter::resistValue(float input) {
	return (static_cast<GeneticComponent*>(stub))->resistValue(input);
}

/*
 *	GeneticComponentHelper
 */

GeneticComponentHelper* GeneticComponentHelper::staticInitializer = GeneticComponentHelper::instance();

GeneticComponentHelper::GeneticComponentHelper() {
	className = "GeneticComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void GeneticComponentHelper::finalizeHelper() {
	GeneticComponentHelper::finalize();
}

DistributedObject* GeneticComponentHelper::instantiateObject() {
	return new GeneticComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* GeneticComponentHelper::instantiateServant() {
	return new GeneticComponentImplementation();
}

DistributedObjectPOD* GeneticComponentHelper::instantiatePOD() {
	return new GeneticComponentPOD();
}

DistributedObjectAdapter* GeneticComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GeneticComponentAdapter(static_cast<GeneticComponent*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GeneticComponentPOD
 */

GeneticComponentPOD::~GeneticComponentPOD() {
	finalize();
}

GeneticComponentPOD::GeneticComponentPOD(void) {
	_className = "GeneticComponent";
}


void GeneticComponentPOD::writeJSON(nlohmann::json& j) {
	ComponentPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (cleverness)
		thisObject["cleverness"] = cleverness.value();

	if (endurance)
		thisObject["endurance"] = endurance.value();

	if (fierceness)
		thisObject["fierceness"] = fierceness.value();

	if (power)
		thisObject["power"] = power.value();

	if (intellect)
		thisObject["intellect"] = intellect.value();

	if (courage)
		thisObject["courage"] = courage.value();

	if (dependability)
		thisObject["dependability"] = dependability.value();

	if (dexterity)
		thisObject["dexterity"] = dexterity.value();

	if (fortitude)
		thisObject["fortitude"] = fortitude.value();

	if (hardiness)
		thisObject["hardiness"] = hardiness.value();

	if (special1)
		thisObject["special1"] = special1.value();

	if (special2)
		thisObject["special2"] = special2.value();

	if (ranged)
		thisObject["ranged"] = ranged.value();

	if (quality)
		thisObject["quality"] = quality.value();

	if (armorRating)
		thisObject["armorRating"] = armorRating.value();

	if (kinResist)
		thisObject["kinResist"] = kinResist.value();

	if (energyResist)
		thisObject["energyResist"] = energyResist.value();

	if (blastResist)
		thisObject["blastResist"] = blastResist.value();

	if (coldResist)
		thisObject["coldResist"] = coldResist.value();

	if (heatResist)
		thisObject["heatResist"] = heatResist.value();

	if (elecResist)
		thisObject["elecResist"] = elecResist.value();

	if (acidResist)
		thisObject["acidResist"] = acidResist.value();

	if (stunResist)
		thisObject["stunResist"] = stunResist.value();

	if (saberResist)
		thisObject["saberResist"] = saberResist.value();

	if (level)
		thisObject["level"] = level.value();

	if (health)
		thisObject["health"] = health.value();

	if (action)
		thisObject["action"] = action.value();

	if (mind)
		thisObject["mind"] = mind.value();

	if (willPower)
		thisObject["willPower"] = willPower.value();

	if (constitution)
		thisObject["constitution"] = constitution.value();

	if (stamina)
		thisObject["stamina"] = stamina.value();

	if (strength)
		thisObject["strength"] = strength.value();

	if (focus)
		thisObject["focus"] = focus.value();

	if (quickness)
		thisObject["quickness"] = quickness.value();

	if (hit)
		thisObject["hit"] = hit.value();

	if (speed)
		thisObject["speed"] = speed.value();

	if (minDam)
		thisObject["minDam"] = minDam.value();

	if (maxDam)
		thisObject["maxDam"] = maxDam.value();

	if (specialResists)
		thisObject["specialResists"] = specialResists.value();

	j["GeneticComponent"] = thisObject;
}


void GeneticComponentPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GeneticComponentPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GeneticComponentPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (cleverness) {
	_nameHashCode = 0x7278be62; //GeneticComponent.cleverness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&cleverness.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (endurance) {
	_nameHashCode = 0x4e1cc05e; //GeneticComponent.endurance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&endurance.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (fierceness) {
	_nameHashCode = 0xd534362b; //GeneticComponent.fierceness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&fierceness.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (power) {
	_nameHashCode = 0x938c0c; //GeneticComponent.power
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&power.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (intellect) {
	_nameHashCode = 0x38f72d8c; //GeneticComponent.intellect
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&intellect.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (courage) {
	_nameHashCode = 0xe7b461fd; //GeneticComponent.courage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&courage.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (dependability) {
	_nameHashCode = 0x738c316a; //GeneticComponent.dependability
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&dependability.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (dexterity) {
	_nameHashCode = 0x8757b6c4; //GeneticComponent.dexterity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&dexterity.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (fortitude) {
	_nameHashCode = 0x355c15db; //GeneticComponent.fortitude
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&fortitude.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (hardiness) {
	_nameHashCode = 0xff30367d; //GeneticComponent.hardiness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&hardiness.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (special1) {
	_nameHashCode = 0x78bc711; //GeneticComponent.special1
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special1.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (special2) {
	_nameHashCode = 0xac8e1c8; //GeneticComponent.special2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special2.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (ranged) {
	_nameHashCode = 0xae313e16; //GeneticComponent.ranged
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&ranged.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (quality) {
	_nameHashCode = 0xbe6c4102; //GeneticComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quality.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (armorRating) {
	_nameHashCode = 0x15ed7137; //GeneticComponent.armorRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&armorRating.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (kinResist) {
	_nameHashCode = 0xc9c334c6; //GeneticComponent.kinResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&kinResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (energyResist) {
	_nameHashCode = 0xea4e84cd; //GeneticComponent.energyResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&energyResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (blastResist) {
	_nameHashCode = 0xa259d0af; //GeneticComponent.blastResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&blastResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (coldResist) {
	_nameHashCode = 0xc925dac1; //GeneticComponent.coldResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&coldResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (heatResist) {
	_nameHashCode = 0x364f80d2; //GeneticComponent.heatResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&heatResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (elecResist) {
	_nameHashCode = 0xb28dda63; //GeneticComponent.elecResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&elecResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (acidResist) {
	_nameHashCode = 0xb621b999; //GeneticComponent.acidResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&acidResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (stunResist) {
	_nameHashCode = 0xad82c707; //GeneticComponent.stunResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stunResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (saberResist) {
	_nameHashCode = 0xa08c0561; //GeneticComponent.saberResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&saberResist.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (level) {
	_nameHashCode = 0xd6eb61ab; //GeneticComponent.level
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&level.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (health) {
	_nameHashCode = 0xc91430e9; //GeneticComponent.health
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&health.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (action) {
	_nameHashCode = 0x1ad03562; //GeneticComponent.action
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&action.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (mind) {
	_nameHashCode = 0x7edb6f2; //GeneticComponent.mind
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&mind.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (willPower) {
	_nameHashCode = 0x3a40482f; //GeneticComponent.willPower
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&willPower.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (constitution) {
	_nameHashCode = 0xd529fc12; //GeneticComponent.constitution
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&constitution.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (stamina) {
	_nameHashCode = 0xb7757669; //GeneticComponent.stamina
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&stamina.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (strength) {
	_nameHashCode = 0xa3764814; //GeneticComponent.strength
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&strength.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (focus) {
	_nameHashCode = 0x3fd73251; //GeneticComponent.focus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&focus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (quickness) {
	_nameHashCode = 0xcbd994cc; //GeneticComponent.quickness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quickness.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (hit) {
	_nameHashCode = 0xa062e780; //GeneticComponent.hit
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&hit.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (speed) {
	_nameHashCode = 0x815468e5; //GeneticComponent.speed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&speed.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (minDam) {
	_nameHashCode = 0x9f900e40; //GeneticComponent.minDam
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&minDam.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (maxDam) {
	_nameHashCode = 0xe9824039; //GeneticComponent.maxDam
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxDam.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (specialResists) {
	_nameHashCode = 0xeea5c95e; //GeneticComponent.specialResists
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&specialResists.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool GeneticComponentPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x7278be62: //GeneticComponent.cleverness
		{
			float _mncleverness;
			TypeInfo<float >::parseFromBinaryStream(&_mncleverness, stream);
			cleverness = std::move(_mncleverness);
		}
		return true;

	case 0x4e1cc05e: //GeneticComponent.endurance
		{
			float _mnendurance;
			TypeInfo<float >::parseFromBinaryStream(&_mnendurance, stream);
			endurance = std::move(_mnendurance);
		}
		return true;

	case 0xd534362b: //GeneticComponent.fierceness
		{
			float _mnfierceness;
			TypeInfo<float >::parseFromBinaryStream(&_mnfierceness, stream);
			fierceness = std::move(_mnfierceness);
		}
		return true;

	case 0x938c0c: //GeneticComponent.power
		{
			float _mnpower;
			TypeInfo<float >::parseFromBinaryStream(&_mnpower, stream);
			power = std::move(_mnpower);
		}
		return true;

	case 0x38f72d8c: //GeneticComponent.intellect
		{
			float _mnintellect;
			TypeInfo<float >::parseFromBinaryStream(&_mnintellect, stream);
			intellect = std::move(_mnintellect);
		}
		return true;

	case 0xe7b461fd: //GeneticComponent.courage
		{
			float _mncourage;
			TypeInfo<float >::parseFromBinaryStream(&_mncourage, stream);
			courage = std::move(_mncourage);
		}
		return true;

	case 0x738c316a: //GeneticComponent.dependability
		{
			float _mndependability;
			TypeInfo<float >::parseFromBinaryStream(&_mndependability, stream);
			dependability = std::move(_mndependability);
		}
		return true;

	case 0x8757b6c4: //GeneticComponent.dexterity
		{
			float _mndexterity;
			TypeInfo<float >::parseFromBinaryStream(&_mndexterity, stream);
			dexterity = std::move(_mndexterity);
		}
		return true;

	case 0x355c15db: //GeneticComponent.fortitude
		{
			float _mnfortitude;
			TypeInfo<float >::parseFromBinaryStream(&_mnfortitude, stream);
			fortitude = std::move(_mnfortitude);
		}
		return true;

	case 0xff30367d: //GeneticComponent.hardiness
		{
			float _mnhardiness;
			TypeInfo<float >::parseFromBinaryStream(&_mnhardiness, stream);
			hardiness = std::move(_mnhardiness);
		}
		return true;

	case 0x78bc711: //GeneticComponent.special1
		{
			String _mnspecial1;
			TypeInfo<String >::parseFromBinaryStream(&_mnspecial1, stream);
			special1 = std::move(_mnspecial1);
		}
		return true;

	case 0xac8e1c8: //GeneticComponent.special2
		{
			String _mnspecial2;
			TypeInfo<String >::parseFromBinaryStream(&_mnspecial2, stream);
			special2 = std::move(_mnspecial2);
		}
		return true;

	case 0xae313e16: //GeneticComponent.ranged
		{
			bool _mnranged;
			TypeInfo<bool >::parseFromBinaryStream(&_mnranged, stream);
			ranged = std::move(_mnranged);
		}
		return true;

	case 0xbe6c4102: //GeneticComponent.quality
		{
			int _mnquality;
			TypeInfo<int >::parseFromBinaryStream(&_mnquality, stream);
			quality = std::move(_mnquality);
		}
		return true;

	case 0x15ed7137: //GeneticComponent.armorRating
		{
			int _mnarmorRating;
			TypeInfo<int >::parseFromBinaryStream(&_mnarmorRating, stream);
			armorRating = std::move(_mnarmorRating);
		}
		return true;

	case 0xc9c334c6: //GeneticComponent.kinResist
		{
			float _mnkinResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnkinResist, stream);
			kinResist = std::move(_mnkinResist);
		}
		return true;

	case 0xea4e84cd: //GeneticComponent.energyResist
		{
			float _mnenergyResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnenergyResist, stream);
			energyResist = std::move(_mnenergyResist);
		}
		return true;

	case 0xa259d0af: //GeneticComponent.blastResist
		{
			float _mnblastResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnblastResist, stream);
			blastResist = std::move(_mnblastResist);
		}
		return true;

	case 0xc925dac1: //GeneticComponent.coldResist
		{
			float _mncoldResist;
			TypeInfo<float >::parseFromBinaryStream(&_mncoldResist, stream);
			coldResist = std::move(_mncoldResist);
		}
		return true;

	case 0x364f80d2: //GeneticComponent.heatResist
		{
			float _mnheatResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnheatResist, stream);
			heatResist = std::move(_mnheatResist);
		}
		return true;

	case 0xb28dda63: //GeneticComponent.elecResist
		{
			float _mnelecResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnelecResist, stream);
			elecResist = std::move(_mnelecResist);
		}
		return true;

	case 0xb621b999: //GeneticComponent.acidResist
		{
			float _mnacidResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnacidResist, stream);
			acidResist = std::move(_mnacidResist);
		}
		return true;

	case 0xad82c707: //GeneticComponent.stunResist
		{
			float _mnstunResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnstunResist, stream);
			stunResist = std::move(_mnstunResist);
		}
		return true;

	case 0xa08c0561: //GeneticComponent.saberResist
		{
			float _mnsaberResist;
			TypeInfo<float >::parseFromBinaryStream(&_mnsaberResist, stream);
			saberResist = std::move(_mnsaberResist);
		}
		return true;

	case 0xd6eb61ab: //GeneticComponent.level
		{
			int _mnlevel;
			TypeInfo<int >::parseFromBinaryStream(&_mnlevel, stream);
			level = std::move(_mnlevel);
		}
		return true;

	case 0xc91430e9: //GeneticComponent.health
		{
			int _mnhealth;
			TypeInfo<int >::parseFromBinaryStream(&_mnhealth, stream);
			health = std::move(_mnhealth);
		}
		return true;

	case 0x1ad03562: //GeneticComponent.action
		{
			int _mnaction;
			TypeInfo<int >::parseFromBinaryStream(&_mnaction, stream);
			action = std::move(_mnaction);
		}
		return true;

	case 0x7edb6f2: //GeneticComponent.mind
		{
			int _mnmind;
			TypeInfo<int >::parseFromBinaryStream(&_mnmind, stream);
			mind = std::move(_mnmind);
		}
		return true;

	case 0x3a40482f: //GeneticComponent.willPower
		{
			int _mnwillPower;
			TypeInfo<int >::parseFromBinaryStream(&_mnwillPower, stream);
			willPower = std::move(_mnwillPower);
		}
		return true;

	case 0xd529fc12: //GeneticComponent.constitution
		{
			int _mnconstitution;
			TypeInfo<int >::parseFromBinaryStream(&_mnconstitution, stream);
			constitution = std::move(_mnconstitution);
		}
		return true;

	case 0xb7757669: //GeneticComponent.stamina
		{
			int _mnstamina;
			TypeInfo<int >::parseFromBinaryStream(&_mnstamina, stream);
			stamina = std::move(_mnstamina);
		}
		return true;

	case 0xa3764814: //GeneticComponent.strength
		{
			int _mnstrength;
			TypeInfo<int >::parseFromBinaryStream(&_mnstrength, stream);
			strength = std::move(_mnstrength);
		}
		return true;

	case 0x3fd73251: //GeneticComponent.focus
		{
			int _mnfocus;
			TypeInfo<int >::parseFromBinaryStream(&_mnfocus, stream);
			focus = std::move(_mnfocus);
		}
		return true;

	case 0xcbd994cc: //GeneticComponent.quickness
		{
			int _mnquickness;
			TypeInfo<int >::parseFromBinaryStream(&_mnquickness, stream);
			quickness = std::move(_mnquickness);
		}
		return true;

	case 0xa062e780: //GeneticComponent.hit
		{
			float _mnhit;
			TypeInfo<float >::parseFromBinaryStream(&_mnhit, stream);
			hit = std::move(_mnhit);
		}
		return true;

	case 0x815468e5: //GeneticComponent.speed
		{
			float _mnspeed;
			TypeInfo<float >::parseFromBinaryStream(&_mnspeed, stream);
			speed = std::move(_mnspeed);
		}
		return true;

	case 0x9f900e40: //GeneticComponent.minDam
		{
			int _mnminDam;
			TypeInfo<int >::parseFromBinaryStream(&_mnminDam, stream);
			minDam = std::move(_mnminDam);
		}
		return true;

	case 0xe9824039: //GeneticComponent.maxDam
		{
			int _mnmaxDam;
			TypeInfo<int >::parseFromBinaryStream(&_mnmaxDam, stream);
			maxDam = std::move(_mnmaxDam);
		}
		return true;

	case 0xeea5c95e: //GeneticComponent.specialResists
		{
			int _mnspecialResists;
			TypeInfo<int >::parseFromBinaryStream(&_mnspecialResists, stream);
			specialResists = std::move(_mnspecialResists);
		}
		return true;

	}

	return false;
}

void GeneticComponentPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GeneticComponentPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void GeneticComponentPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ComponentPOD::writeObjectCompact(stream);

	TypeInfo<float >::toBinaryStream(&cleverness.value(), stream);

	TypeInfo<float >::toBinaryStream(&endurance.value(), stream);

	TypeInfo<float >::toBinaryStream(&fierceness.value(), stream);

	TypeInfo<float >::toBinaryStream(&power.value(), stream);

	TypeInfo<float >::toBinaryStream(&intellect.value(), stream);

	TypeInfo<float >::toBinaryStream(&courage.value(), stream);

	TypeInfo<float >::toBinaryStream(&dependability.value(), stream);

	TypeInfo<float >::toBinaryStream(&dexterity.value(), stream);

	TypeInfo<float >::toBinaryStream(&fortitude.value(), stream);

	TypeInfo<float >::toBinaryStream(&hardiness.value(), stream);

	TypeInfo<String >::toBinaryStream(&special1.value(), stream);

	TypeInfo<String >::toBinaryStream(&special2.value(), stream);

	TypeInfo<bool >::toBinaryStream(&ranged.value(), stream);

	TypeInfo<int >::toBinaryStream(&quality.value(), stream);

	TypeInfo<int >::toBinaryStream(&armorRating.value(), stream);

	TypeInfo<float >::toBinaryStream(&kinResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&energyResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&blastResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&coldResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&heatResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&elecResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&acidResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&stunResist.value(), stream);

	TypeInfo<float >::toBinaryStream(&saberResist.value(), stream);

	TypeInfo<int >::toBinaryStream(&level.value(), stream);

	TypeInfo<int >::toBinaryStream(&health.value(), stream);

	TypeInfo<int >::toBinaryStream(&action.value(), stream);

	TypeInfo<int >::toBinaryStream(&mind.value(), stream);

	TypeInfo<int >::toBinaryStream(&willPower.value(), stream);

	TypeInfo<int >::toBinaryStream(&constitution.value(), stream);

	TypeInfo<int >::toBinaryStream(&stamina.value(), stream);

	TypeInfo<int >::toBinaryStream(&strength.value(), stream);

	TypeInfo<int >::toBinaryStream(&focus.value(), stream);

	TypeInfo<int >::toBinaryStream(&quickness.value(), stream);

	TypeInfo<float >::toBinaryStream(&hit.value(), stream);

	TypeInfo<float >::toBinaryStream(&speed.value(), stream);

	TypeInfo<int >::toBinaryStream(&minDam.value(), stream);

	TypeInfo<int >::toBinaryStream(&maxDam.value(), stream);

	TypeInfo<int >::toBinaryStream(&specialResists.value(), stream);


}

