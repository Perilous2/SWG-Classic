/*
 *	autogen/server/zone/objects/tangible/Instrument.cpp generated by engine3 IDL compiler 0.70
 */

#include "Instrument.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/tasks/InstrumentPulseTask.h"

/*
 *	InstrumentStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 2670500855,RPC_NOTIFYLOADFROMDATABASE__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISACTIVEINSTRUMENT__CREATUREOBJECT_,RPC_ISEQUIPPED__,RPC_CANBETRANSFERRED__SCENEOBJECT_,RPC_GETINSTRUMENTTYPE__,RPC_GETSPAWNERPLAYER__,RPC_SETSPAWNERPLAYER__CREATUREOBJECT_,RPC_ISUNEQUIPPABLE__};

Instrument::Instrument() : TangibleObject(DummyConstructorParameter::instance()) {
	InstrumentImplementation* _implementation = new InstrumentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("Instrument");
}

Instrument::Instrument(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("Instrument");
}

Instrument::~Instrument() {
}



void Instrument::initializeTransientMembers() {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void Instrument::notifyLoadFromDatabase() {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyLoadFromDatabase();
	}
}

void Instrument::loadTemplateData(SharedObjectTemplate* templateData) {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->loadTemplateData(templateData);
	}
}

void Instrument::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

int Instrument::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

bool Instrument::isActiveInstrument(CreatureObject* player) {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISACTIVEINSTRUMENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isActiveInstrument(player);
	}
}

bool Instrument::isEquipped() {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEQUIPPED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEquipped();
	}
}

bool Instrument::canBeTransferred(SceneObject* newContainer) {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANBETRANSFERRED__SCENEOBJECT_);
		method.addObjectParameter(newContainer);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canBeTransferred(newContainer);
	}
}

int Instrument::getInstrumentType() const {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINSTRUMENTTYPE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getInstrumentType();
	}
}

ManagedWeakReference<CreatureObject* > Instrument::getSpawnerPlayer() {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPAWNERPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getSpawnerPlayer();
	}
}

void Instrument::setSpawnerPlayer(CreatureObject* pla) {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNERPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(pla);

		method.executeWithVoidReturn();
	} else {
		_implementation->setSpawnerPlayer(pla);
	}
}

bool Instrument::isUnequippable() {
	InstrumentImplementation* _implementation = static_cast<InstrumentImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISUNEQUIPPABLE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isUnequippable();
	}
}

DistributedObjectServant* Instrument::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* Instrument::_getImplementationForRead() const {
	return _impl;
}

void Instrument::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	InstrumentImplementation
 */

InstrumentImplementation::InstrumentImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


InstrumentImplementation::~InstrumentImplementation() {
}


void InstrumentImplementation::finalize() {
}

void InstrumentImplementation::_initializeImplementation() {
	_setClassHelper(InstrumentHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void InstrumentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<Instrument*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstrumentImplementation::_getStub() {
	return _this.get();
}

InstrumentImplementation::operator const Instrument*() {
	return _this.get();
}

void InstrumentImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void InstrumentImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void InstrumentImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void InstrumentImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void InstrumentImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void InstrumentImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void InstrumentImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void InstrumentImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Instrument");

}

void InstrumentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(InstrumentImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool InstrumentImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xa0c10ed0: //Instrument.instrumentType
		TypeInfo<int >::parseFromBinaryStream(&instrumentType, stream);
		return true;

	case 0x52e83fd3: //Instrument.beingUsed
		TypeInfo<bool >::parseFromBinaryStream(&beingUsed, stream);
		return true;

	case 0xae8bf98a: //Instrument.spawnedObject
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&spawnedObject, stream);
		return true;

	case 0x40f56db3: //Instrument.spawnerPlayer
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&spawnerPlayer, stream);
		return true;

	}

	return false;
}

void InstrumentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = InstrumentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int InstrumentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xa0c10ed0; //Instrument.instrumentType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&instrumentType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x52e83fd3; //Instrument.beingUsed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&beingUsed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xae8bf98a; //Instrument.spawnedObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&spawnedObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x40f56db3; //Instrument.spawnerPlayer
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&spawnerPlayer, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void InstrumentImplementation::writeJSON(nlohmann::json& j) {
	TangibleObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["instrumentType"] = instrumentType;

	thisObject["beingUsed"] = beingUsed;

	thisObject["spawnedObject"] = spawnedObject;

	thisObject["spawnerPlayer"] = spawnerPlayer;

	j["Instrument"] = thisObject;
}

InstrumentImplementation::InstrumentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/Instrument.idl():  		instrumentType = 0;
	instrumentType = 0;
	// server/zone/objects/tangible/Instrument.idl():  		beingUsed = false;
	beingUsed = false;
	// server/zone/objects/tangible/Instrument.idl():  		Logger.setLoggingName("Instrument");
	Logger::setLoggingName("Instrument");
}

void InstrumentImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/Instrument.idl():  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/Instrument.idl():  		Logger.setLoggingName("Instrument");
	Logger::setLoggingName("Instrument");
}

void InstrumentImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/Instrument.idl():  		super.loadTemplateData(templateData);
	TangibleObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/Instrument.idl():  		InstrumentObjectTemplate 
	if (!templateData->isInstrumentObjectTemplate())	// server/zone/objects/tangible/Instrument.idl():  			return;
	return;
	// server/zone/objects/tangible/Instrument.idl():  		InstrumentObjectTemplate templ = (InstrumentObjectTemplate) templateData;
	InstrumentObjectTemplate* templ = dynamic_cast<InstrumentObjectTemplate*>(templateData);
	// server/zone/objects/tangible/Instrument.idl():  		instrumentType = templ.getInstrumentType();
	instrumentType = templ->getInstrumentType();
}

int InstrumentImplementation::getInstrumentType() const{
	// server/zone/objects/tangible/Instrument.idl():  		return instrumentType;
	return instrumentType;
}

ManagedWeakReference<CreatureObject* > InstrumentImplementation::getSpawnerPlayer() {
	// server/zone/objects/tangible/Instrument.idl():  		return spawnerPlayer;
	return spawnerPlayer;
}

void InstrumentImplementation::setSpawnerPlayer(CreatureObject* pla) {
	// server/zone/objects/tangible/Instrument.idl():  		spawnerPlayer = pla;
	spawnerPlayer = pla;
}

bool InstrumentImplementation::isUnequippable() {
	// server/zone/objects/tangible/Instrument.idl():  		return instrumentType == NALARGON || instrumentType == OMNIBOX;
	return instrumentType == NALARGON || instrumentType == OMNIBOX;
}

/*
 *	InstrumentAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


InstrumentAdapter::InstrumentAdapter(Instrument* obj) : TangibleObjectAdapter(obj) {
}

void InstrumentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			
			notifyLoadFromDatabase();
			
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			byte selectedID = inv->getByteParameter();
			
			int _m_res = handleObjectMenuSelect(player, selectedID);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISACTIVEINSTRUMENT__CREATUREOBJECT_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			bool _m_res = isActiveInstrument(player);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISEQUIPPED__:
		{
			
			bool _m_res = isEquipped();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_CANBETRANSFERRED__SCENEOBJECT_:
		{
			SceneObject* newContainer = static_cast<SceneObject*>(inv->getObjectParameter());
			
			bool _m_res = canBeTransferred(newContainer);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETINSTRUMENTTYPE__:
		{
			
			int _m_res = getInstrumentType();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETSPAWNERPLAYER__:
		{
			
			DistributedObject* _m_res = getSpawnerPlayer().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETSPAWNERPLAYER__CREATUREOBJECT_:
		{
			CreatureObject* pla = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			setSpawnerPlayer(pla);
			
		}
		break;
	case RPC_ISUNEQUIPPABLE__:
		{
			
			bool _m_res = isUnequippable();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		TangibleObjectAdapter::invokeMethod(methid, inv);
	}
}

void InstrumentAdapter::initializeTransientMembers() {
	(static_cast<Instrument*>(stub))->initializeTransientMembers();
}

void InstrumentAdapter::notifyLoadFromDatabase() {
	(static_cast<Instrument*>(stub))->notifyLoadFromDatabase();
}

int InstrumentAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<Instrument*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool InstrumentAdapter::isActiveInstrument(CreatureObject* player) {
	return (static_cast<Instrument*>(stub))->isActiveInstrument(player);
}

bool InstrumentAdapter::isEquipped() {
	return (static_cast<Instrument*>(stub))->isEquipped();
}

bool InstrumentAdapter::canBeTransferred(SceneObject* newContainer) {
	return (static_cast<Instrument*>(stub))->canBeTransferred(newContainer);
}

int InstrumentAdapter::getInstrumentType() const {
	return (static_cast<Instrument*>(stub))->getInstrumentType();
}

ManagedWeakReference<CreatureObject* > InstrumentAdapter::getSpawnerPlayer() {
	return (static_cast<Instrument*>(stub))->getSpawnerPlayer();
}

void InstrumentAdapter::setSpawnerPlayer(CreatureObject* pla) {
	(static_cast<Instrument*>(stub))->setSpawnerPlayer(pla);
}

bool InstrumentAdapter::isUnequippable() {
	return (static_cast<Instrument*>(stub))->isUnequippable();
}

/*
 *	InstrumentHelper
 */

InstrumentHelper* InstrumentHelper::staticInitializer = InstrumentHelper::instance();

InstrumentHelper::InstrumentHelper() {
	className = "Instrument";

	Core::getObjectBroker()->registerClass(className, this);
}

void InstrumentHelper::finalizeHelper() {
	InstrumentHelper::finalize();
}

DistributedObject* InstrumentHelper::instantiateObject() {
	return new Instrument(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstrumentHelper::instantiateServant() {
	return new InstrumentImplementation();
}

DistributedObjectPOD* InstrumentHelper::instantiatePOD() {
	return new InstrumentPOD();
}

DistributedObjectAdapter* InstrumentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstrumentAdapter(static_cast<Instrument*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	InstrumentPOD
 */

InstrumentPOD::~InstrumentPOD() {
	finalize();
}

InstrumentPOD::InstrumentPOD(void) {
	_className = "Instrument";
}


void InstrumentPOD::writeJSON(nlohmann::json& j) {
	TangibleObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (instrumentType)
		thisObject["instrumentType"] = instrumentType.value();

	if (beingUsed)
		thisObject["beingUsed"] = beingUsed.value();

	if (spawnedObject)
		thisObject["spawnedObject"] = spawnedObject.value();

	if (spawnerPlayer)
		thisObject["spawnerPlayer"] = spawnerPlayer.value();

	j["Instrument"] = thisObject;
}


void InstrumentPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = InstrumentPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int InstrumentPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (instrumentType) {
	_nameHashCode = 0xa0c10ed0; //Instrument.instrumentType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&instrumentType.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (beingUsed) {
	_nameHashCode = 0x52e83fd3; //Instrument.beingUsed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&beingUsed.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (spawnedObject) {
	_nameHashCode = 0xae8bf98a; //Instrument.spawnedObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SceneObjectPOD* > >::toBinaryStream(&spawnedObject.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (spawnerPlayer) {
	_nameHashCode = 0x40f56db3; //Instrument.spawnerPlayer
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&spawnerPlayer.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool InstrumentPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xa0c10ed0: //Instrument.instrumentType
		{
			int _mninstrumentType;
			TypeInfo<int >::parseFromBinaryStream(&_mninstrumentType, stream);
			instrumentType = std::move(_mninstrumentType);
		}
		return true;

	case 0x52e83fd3: //Instrument.beingUsed
		{
			bool _mnbeingUsed;
			TypeInfo<bool >::parseFromBinaryStream(&_mnbeingUsed, stream);
			beingUsed = std::move(_mnbeingUsed);
		}
		return true;

	case 0xae8bf98a: //Instrument.spawnedObject
		{
			ManagedReference<SceneObjectPOD* > _mnspawnedObject;
			TypeInfo<ManagedReference<SceneObjectPOD* > >::parseFromBinaryStream(&_mnspawnedObject, stream);
			spawnedObject = std::move(_mnspawnedObject);
		}
		return true;

	case 0x40f56db3: //Instrument.spawnerPlayer
		{
			ManagedWeakReference<CreatureObjectPOD* > _mnspawnerPlayer;
			TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::parseFromBinaryStream(&_mnspawnerPlayer, stream);
			spawnerPlayer = std::move(_mnspawnerPlayer);
		}
		return true;

	}

	return false;
}

void InstrumentPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(InstrumentPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void InstrumentPOD::writeObjectCompact(ObjectOutputStream* stream) {
	TangibleObjectPOD::writeObjectCompact(stream);

	TypeInfo<int >::toBinaryStream(&instrumentType.value(), stream);

	TypeInfo<bool >::toBinaryStream(&beingUsed.value(), stream);

	TypeInfo<ManagedReference<SceneObjectPOD* > >::toBinaryStream(&spawnedObject.value(), stream);

	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&spawnerPlayer.value(), stream);


}

