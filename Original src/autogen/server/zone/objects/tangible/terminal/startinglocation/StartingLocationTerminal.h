/*
 *	autogen/server/zone/objects/tangible/terminal/startinglocation/StartingLocationTerminal.h generated by engine3 IDL compiler 0.70
 */

#ifndef STARTINGLOCATIONTERMINAL_H_
#define STARTINGLOCATIONTERMINAL_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/objects/tangible/terminal/Terminal.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace startinglocation {

class StartingLocationTerminal : public Terminal {
public:
	StartingLocationTerminal();

	void initializeTransientMembers();

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setAuthorizationState(bool state);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	StartingLocationTerminal(DummyConstructorParameter* param);

	virtual ~StartingLocationTerminal();

	friend class StartingLocationTerminalHelper;
};

} // namespace startinglocation
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::startinglocation;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace startinglocation {

class StartingLocationTerminalImplementation : public TerminalImplementation {
protected:
	bool authorizationState;

public:
	StartingLocationTerminalImplementation();

	StartingLocationTerminalImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setAuthorizationState(bool state);

	WeakReference<StartingLocationTerminal*> _this;

	operator const StartingLocationTerminal*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~StartingLocationTerminalImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class StartingLocationTerminal;
};

class StartingLocationTerminalAdapter : public TerminalAdapter {
public:
	StartingLocationTerminalAdapter(StartingLocationTerminal* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setAuthorizationState(bool state);

};

class StartingLocationTerminalHelper : public DistributedObjectClassHelper, public Singleton<StartingLocationTerminalHelper> {
	static StartingLocationTerminalHelper* staticInitializer;

public:
	StartingLocationTerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StartingLocationTerminalHelper>;
};

} // namespace startinglocation
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::startinglocation;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace startinglocation {

class StartingLocationTerminalPOD : public TerminalPOD {
public:
	Optional<bool> authorizationState;

	String _className;
	StartingLocationTerminalPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~StartingLocationTerminalPOD();

};

} // namespace startinglocation
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::startinglocation;

#endif /*STARTINGLOCATIONTERMINALPOD_H_*/
