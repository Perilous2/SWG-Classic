/*
 *	autogen/server/zone/objects/tangible/wearables/WearableObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef WEARABLEOBJECT_H_
#define WEARABLEOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/tangible/attachment/Attachment.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace wearables {

class WearableObject : public TangibleObject {
public:
	static const int MAXSOCKETS = 4;

	static const int MIN_SOCKET_MOD = 60;

	WearableObject();

	void initializeTransientMembers();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void updateCraftingValues(CraftingValues* values, bool initialUpdate);

	void applyAttachment(CreatureObject* player, Attachment* attachment);

	void applySkillModsTo(CreatureObject* creature) const;

	void removeSkillModsFrom(CreatureObject* creature);

	bool isWearableObject();

	bool isEquipped();

	int getMaxSockets() const;

	int getRemainingSockets() const;

	String repairAttempt(int repairChance);

	VectorMap<String, int>* getWearableSkillMods();

	const VectorMap<String, int>* getWearableSkillMods() const;

	void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	void setMaxSockets(int maxSockets);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	WearableObject(DummyConstructorParameter* param);

	virtual ~WearableObject();

	friend class WearableObjectHelper;
};

} // namespace wearables
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::wearables;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace wearables {

class WearableObjectImplementation : public TangibleObjectImplementation {
protected:
	int socketCount;

	bool socketsGenerated;

	int usedSocketCount;

	int modsNotInSockets;

public:
	static const int MAXSOCKETS = 4;

	static const int MIN_SOCKET_MOD = 60;

protected:
	VectorMap<String, int> wearableSkillMods;

public:
	WearableObjectImplementation();

	WearableObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void updateCraftingValues(CraftingValues* values, bool initialUpdate);

	void applyAttachment(CreatureObject* player, Attachment* attachment);

	virtual void applySkillModsTo(CreatureObject* creature) const;

	virtual void removeSkillModsFrom(CreatureObject* creature);

	bool isWearableObject();

	bool isEquipped();

	int getMaxSockets() const;

	int getRemainingSockets() const;

private:
	void generateSockets(CraftingValues* craftingValues);

public:
	String repairAttempt(int repairChance);

	VectorMap<String, int>* getWearableSkillMods();

	const VectorMap<String, int>* getWearableSkillMods() const;

	virtual void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	void setMaxSockets(int maxSockets);

	WeakReference<WearableObject*> _this;

	operator const WearableObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~WearableObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class WearableObject;
};

class WearableObjectAdapter : public TangibleObjectAdapter {
public:
	WearableObjectAdapter(WearableObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void applyAttachment(CreatureObject* player, Attachment* attachment);

	void applySkillModsTo(CreatureObject* creature) const;

	void removeSkillModsFrom(CreatureObject* creature);

	bool isWearableObject();

	bool isEquipped();

	int getMaxSockets() const;

	int getRemainingSockets() const;

	String repairAttempt(int repairChance);

	void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient);

	void setMaxSockets(int maxSockets);

};

class WearableObjectHelper : public DistributedObjectClassHelper, public Singleton<WearableObjectHelper> {
	static WearableObjectHelper* staticInitializer;

public:
	WearableObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WearableObjectHelper>;
};

} // namespace wearables
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::wearables;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace wearables {

class WearableObjectPOD : public TangibleObjectPOD {
public:
	Optional<int> socketCount;

	Optional<bool> socketsGenerated;

	Optional<int> usedSocketCount;

	Optional<int> modsNotInSockets;

	Optional<VectorMap<String, int>> wearableSkillMods;

	String _className;
	WearableObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~WearableObjectPOD();

};

} // namespace wearables
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::wearables;

#endif /*WEARABLEOBJECTPOD_H_*/
