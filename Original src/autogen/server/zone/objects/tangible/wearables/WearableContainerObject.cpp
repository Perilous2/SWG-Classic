/*
 *	autogen/server/zone/objects/tangible/wearables/WearableContainerObject.cpp generated by engine3 IDL compiler 0.70
 */

#include "WearableContainerObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	WearableContainerObjectStub
 */

const bool WearableContainerObject::ALLOW_SEA = false;

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 753592095,RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_,RPC_APPLYSKILLMODSTO__CREATUREOBJECT_,RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_,RPC_ISEQUIPPED__,RPC_ISWEARABLECONTAINEROBJECT__,RPC_GETREMAININGSOCKETS__,RPC_SETMAXSOCKETS__INT_};

WearableContainerObject::WearableContainerObject() : Container(DummyConstructorParameter::instance()) {
	WearableContainerObjectImplementation* _implementation = new WearableContainerObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("WearableContainerObject");
}

WearableContainerObject::WearableContainerObject(DummyConstructorParameter* param) : Container(param) {
	_setClassName("WearableContainerObject");
}

WearableContainerObject::~WearableContainerObject() {
}



void WearableContainerObject::initializeTransientMembers() {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void WearableContainerObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

void WearableContainerObject::updateCraftingValues(CraftingValues* values, bool initialUpdate) {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->updateCraftingValues(values, initialUpdate);
	}
}

void WearableContainerObject::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addAsciiParameter(skillMod);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else {
		_implementation->addSkillMod(skillType, skillMod, value, notifyClient);
	}
}

void WearableContainerObject::applySkillModsTo(CreatureObject* creature) const {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYSKILLMODSTO__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->applySkillModsTo(creature);
	}
}

void WearableContainerObject::removeSkillModsFrom(CreatureObject* creature) {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeSkillModsFrom(creature);
	}
}

const VectorMap<String, int>* WearableContainerObject::getWearableSkillMods() const {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getWearableSkillMods();
	}
}

bool WearableContainerObject::isEquipped() {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEQUIPPED__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isEquipped();
	}
}

bool WearableContainerObject::isWearableContainerObject() {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEARABLECONTAINEROBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isWearableContainerObject();
	}
}

int WearableContainerObject::getRemainingSockets() const {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREMAININGSOCKETS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getRemainingSockets();
	}
}

void WearableContainerObject::setMaxSockets(int maxSockets) {
	WearableContainerObjectImplementation* _implementation = static_cast<WearableContainerObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXSOCKETS__INT_);
		method.addSignedIntParameter(maxSockets);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMaxSockets(maxSockets);
	}
}

DistributedObjectServant* WearableContainerObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* WearableContainerObject::_getImplementationForRead() const {
	return _impl;
}

void WearableContainerObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	WearableContainerObjectImplementation
 */

const bool WearableContainerObjectImplementation::ALLOW_SEA = false;

WearableContainerObjectImplementation::WearableContainerObjectImplementation(DummyConstructorParameter* param) : ContainerImplementation(param) {
	_initializeImplementation();
}


WearableContainerObjectImplementation::~WearableContainerObjectImplementation() {
}


void WearableContainerObjectImplementation::finalize() {
}

void WearableContainerObjectImplementation::_initializeImplementation() {
	_setClassHelper(WearableContainerObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void WearableContainerObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<WearableContainerObject*>(stub);
	ContainerImplementation::_setStub(stub);
}

DistributedObjectStub* WearableContainerObjectImplementation::_getStub() {
	return _this.get();
}

WearableContainerObjectImplementation::operator const WearableContainerObject*() {
	return _this.get();
}

void WearableContainerObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void WearableContainerObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void WearableContainerObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void WearableContainerObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void WearableContainerObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void WearableContainerObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void WearableContainerObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void WearableContainerObjectImplementation::_serializationHelperMethod() {
	ContainerImplementation::_serializationHelperMethod();

	_setClassName("WearableContainerObject");

}

void WearableContainerObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WearableContainerObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool WearableContainerObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ContainerImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x22c78a1a: //WearableContainerObject.socketCount
		TypeInfo<int >::parseFromBinaryStream(&socketCount, stream);
		return true;

	case 0xbb0fc7b2: //WearableContainerObject.socketsGenerated
		TypeInfo<bool >::parseFromBinaryStream(&socketsGenerated, stream);
		return true;

	case 0x4738a989: //WearableContainerObject.usedSocketCount
		TypeInfo<int >::parseFromBinaryStream(&usedSocketCount, stream);
		return true;

	case 0x83b9d41c: //WearableContainerObject.modsNotInSockets
		TypeInfo<int >::parseFromBinaryStream(&modsNotInSockets, stream);
		return true;

	case 0x4e6d3f82: //WearableContainerObject.wearableSkillMods
		TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&wearableSkillMods, stream);
		return true;

	}

	return false;
}

void WearableContainerObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WearableContainerObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WearableContainerObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ContainerImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x22c78a1a; //WearableContainerObject.socketCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&socketCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xbb0fc7b2; //WearableContainerObject.socketsGenerated
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&socketsGenerated, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x4738a989; //WearableContainerObject.usedSocketCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&usedSocketCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x83b9d41c; //WearableContainerObject.modsNotInSockets
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&modsNotInSockets, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x4e6d3f82; //WearableContainerObject.wearableSkillMods
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&wearableSkillMods, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void WearableContainerObjectImplementation::writeJSON(nlohmann::json& j) {
	ContainerImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["socketCount"] = socketCount;

	thisObject["socketsGenerated"] = socketsGenerated;

	thisObject["usedSocketCount"] = usedSocketCount;

	thisObject["modsNotInSockets"] = modsNotInSockets;

	thisObject["wearableSkillMods"] = wearableSkillMods;

	j["WearableContainerObject"] = thisObject;
}

WearableContainerObjectImplementation::WearableContainerObjectImplementation() : ContainerImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		socketsGenerated = false;
	socketsGenerated = false;
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		socketCount = 0;
	socketCount = 0;
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		usedSocketCount = 0;
	usedSocketCount = 0;
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		modsNotInSockets = 0;
	modsNotInSockets = 0;
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		Logger.setLoggingName("WearableContainerObject");
	Logger::setLoggingName("WearableContainerObject");
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		wearableSkillMods.setAllowOverwriteInsertPlan();
	(&wearableSkillMods)->setAllowOverwriteInsertPlan();
}

void WearableContainerObjectImplementation::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		wearableSkillMods.put(skillMod, value);
	(&wearableSkillMods)->put(skillMod, value);
}

const VectorMap<String, int>* WearableContainerObjectImplementation::getWearableSkillMods() const{
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		return wearableSkillMods;
	return (&wearableSkillMods);
}

bool WearableContainerObjectImplementation::isWearableContainerObject() {
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		return true;
	return true;
}

int WearableContainerObjectImplementation::getRemainingSockets() const{
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		return socketCount - usedSocketCount;
	return socketCount - usedSocketCount;
}

void WearableContainerObjectImplementation::setMaxSockets(int maxSockets) {
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		socketCount 
	if (maxSockets < 0){
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  			maxSockets = 0;
	maxSockets = 0;
}

	else 	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		socketCount 
	if (maxSockets > MAXSOCKETS){
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  			maxSockets = MAXSOCKETS;
	maxSockets = MAXSOCKETS;
}
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		socketCount = maxSockets;
	socketCount = maxSockets;
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		socketsGenerated = true;
	socketsGenerated = true;
}

/*
 *	WearableContainerObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


WearableContainerObjectAdapter::WearableContainerObjectAdapter(WearableContainerObject* obj) : ContainerAdapter(obj) {
}

void WearableContainerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_:
		{
			 int skillType = inv->getSignedIntParameter();
			 String skillMod; inv->getAsciiParameter(skillMod);
			int value = inv->getSignedIntParameter();
			bool notifyClient = inv->getBooleanParameter();
			
			addSkillMod(skillType, skillMod, value, notifyClient);
			
		}
		break;
	case RPC_APPLYSKILLMODSTO__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			applySkillModsTo(creature);
			
		}
		break;
	case RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_:
		{
			CreatureObject* creature = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			removeSkillModsFrom(creature);
			
		}
		break;
	case RPC_ISEQUIPPED__:
		{
			
			bool _m_res = isEquipped();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISWEARABLECONTAINEROBJECT__:
		{
			
			bool _m_res = isWearableContainerObject();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETREMAININGSOCKETS__:
		{
			
			int _m_res = getRemainingSockets();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_SETMAXSOCKETS__INT_:
		{
			int maxSockets = inv->getSignedIntParameter();
			
			setMaxSockets(maxSockets);
			
		}
		break;
	default:
		ContainerAdapter::invokeMethod(methid, inv);
	}
}

void WearableContainerObjectAdapter::initializeTransientMembers() {
	(static_cast<WearableContainerObject*>(stub))->initializeTransientMembers();
}

void WearableContainerObjectAdapter::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	(static_cast<WearableContainerObject*>(stub))->addSkillMod(skillType, skillMod, value, notifyClient);
}

void WearableContainerObjectAdapter::applySkillModsTo(CreatureObject* creature) const {
	(static_cast<WearableContainerObject*>(stub))->applySkillModsTo(creature);
}

void WearableContainerObjectAdapter::removeSkillModsFrom(CreatureObject* creature) {
	(static_cast<WearableContainerObject*>(stub))->removeSkillModsFrom(creature);
}

bool WearableContainerObjectAdapter::isEquipped() {
	return (static_cast<WearableContainerObject*>(stub))->isEquipped();
}

bool WearableContainerObjectAdapter::isWearableContainerObject() {
	return (static_cast<WearableContainerObject*>(stub))->isWearableContainerObject();
}

int WearableContainerObjectAdapter::getRemainingSockets() const {
	return (static_cast<WearableContainerObject*>(stub))->getRemainingSockets();
}

void WearableContainerObjectAdapter::setMaxSockets(int maxSockets) {
	(static_cast<WearableContainerObject*>(stub))->setMaxSockets(maxSockets);
}

/*
 *	WearableContainerObjectHelper
 */

WearableContainerObjectHelper* WearableContainerObjectHelper::staticInitializer = WearableContainerObjectHelper::instance();

WearableContainerObjectHelper::WearableContainerObjectHelper() {
	className = "WearableContainerObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void WearableContainerObjectHelper::finalizeHelper() {
	WearableContainerObjectHelper::finalize();
}

DistributedObject* WearableContainerObjectHelper::instantiateObject() {
	return new WearableContainerObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* WearableContainerObjectHelper::instantiateServant() {
	return new WearableContainerObjectImplementation();
}

DistributedObjectPOD* WearableContainerObjectHelper::instantiatePOD() {
	return new WearableContainerObjectPOD();
}

DistributedObjectAdapter* WearableContainerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WearableContainerObjectAdapter(static_cast<WearableContainerObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	WearableContainerObjectPOD
 */

WearableContainerObjectPOD::~WearableContainerObjectPOD() {
	finalize();
}

WearableContainerObjectPOD::WearableContainerObjectPOD(void) {
	_className = "WearableContainerObject";
}


void WearableContainerObjectPOD::writeJSON(nlohmann::json& j) {
	ContainerPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (socketCount)
		thisObject["socketCount"] = socketCount.value();

	if (socketsGenerated)
		thisObject["socketsGenerated"] = socketsGenerated.value();

	if (usedSocketCount)
		thisObject["usedSocketCount"] = usedSocketCount.value();

	if (modsNotInSockets)
		thisObject["modsNotInSockets"] = modsNotInSockets.value();

	if (wearableSkillMods)
		thisObject["wearableSkillMods"] = wearableSkillMods.value();

	j["WearableContainerObject"] = thisObject;
}


void WearableContainerObjectPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WearableContainerObjectPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WearableContainerObjectPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ContainerPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (socketCount) {
	_nameHashCode = 0x22c78a1a; //WearableContainerObject.socketCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&socketCount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (socketsGenerated) {
	_nameHashCode = 0xbb0fc7b2; //WearableContainerObject.socketsGenerated
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&socketsGenerated.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (usedSocketCount) {
	_nameHashCode = 0x4738a989; //WearableContainerObject.usedSocketCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&usedSocketCount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (modsNotInSockets) {
	_nameHashCode = 0x83b9d41c; //WearableContainerObject.modsNotInSockets
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&modsNotInSockets.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (wearableSkillMods) {
	_nameHashCode = 0x4e6d3f82; //WearableContainerObject.wearableSkillMods
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&wearableSkillMods.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool WearableContainerObjectPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ContainerPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x22c78a1a: //WearableContainerObject.socketCount
		{
			int _mnsocketCount;
			TypeInfo<int >::parseFromBinaryStream(&_mnsocketCount, stream);
			socketCount = std::move(_mnsocketCount);
		}
		return true;

	case 0xbb0fc7b2: //WearableContainerObject.socketsGenerated
		{
			bool _mnsocketsGenerated;
			TypeInfo<bool >::parseFromBinaryStream(&_mnsocketsGenerated, stream);
			socketsGenerated = std::move(_mnsocketsGenerated);
		}
		return true;

	case 0x4738a989: //WearableContainerObject.usedSocketCount
		{
			int _mnusedSocketCount;
			TypeInfo<int >::parseFromBinaryStream(&_mnusedSocketCount, stream);
			usedSocketCount = std::move(_mnusedSocketCount);
		}
		return true;

	case 0x83b9d41c: //WearableContainerObject.modsNotInSockets
		{
			int _mnmodsNotInSockets;
			TypeInfo<int >::parseFromBinaryStream(&_mnmodsNotInSockets, stream);
			modsNotInSockets = std::move(_mnmodsNotInSockets);
		}
		return true;

	case 0x4e6d3f82: //WearableContainerObject.wearableSkillMods
		{
			VectorMap<String, int> _mnwearableSkillMods;
			TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&_mnwearableSkillMods, stream);
			wearableSkillMods = std::move(_mnwearableSkillMods);
		}
		return true;

	}

	return false;
}

void WearableContainerObjectPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WearableContainerObjectPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void WearableContainerObjectPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ContainerPOD::writeObjectCompact(stream);

	TypeInfo<int >::toBinaryStream(&socketCount.value(), stream);

	TypeInfo<bool >::toBinaryStream(&socketsGenerated.value(), stream);

	TypeInfo<int >::toBinaryStream(&usedSocketCount.value(), stream);

	TypeInfo<int >::toBinaryStream(&modsNotInSockets.value(), stream);

	TypeInfo<VectorMap<String, int> >::toBinaryStream(&wearableSkillMods.value(), stream);


}

