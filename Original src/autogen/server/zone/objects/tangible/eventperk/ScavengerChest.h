/*
 *	autogen/server/zone/objects/tangible/eventperk/ScavengerChest.h generated by engine3 IDL compiler 0.70
 */

#ifndef SCAVENGERCHEST_H_
#define SCAVENGERCHEST_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "server/zone/objects/tangible/Container.h"

#include "system/util/Vector.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ScavengerChest : public Container {
public:
	ScavengerChest();

	bool isEventPerkItem();

	void addtoLootedList(unsigned long long playerID);

	bool isOnLootedList(unsigned long long playerID);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ScavengerChest(DummyConstructorParameter* param);

	virtual ~ScavengerChest();

	friend class ScavengerChestHelper;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ScavengerChestImplementation : public ContainerImplementation {
protected:
	Vector<unsigned long long> lootedList;

public:
	ScavengerChestImplementation();

	ScavengerChestImplementation(DummyConstructorParameter* param);

	bool isEventPerkItem();

	void addtoLootedList(unsigned long long playerID);

	bool isOnLootedList(unsigned long long playerID);

	WeakReference<ScavengerChest*> _this;

	operator const ScavengerChest*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~ScavengerChestImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ScavengerChest;
};

class ScavengerChestAdapter : public ContainerAdapter {
public:
	ScavengerChestAdapter(ScavengerChest* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isEventPerkItem();

	void addtoLootedList(unsigned long long playerID);

	bool isOnLootedList(unsigned long long playerID);

};

class ScavengerChestHelper : public DistributedObjectClassHelper, public Singleton<ScavengerChestHelper> {
	static ScavengerChestHelper* staticInitializer;

public:
	ScavengerChestHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ScavengerChestHelper>;
};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace eventperk {

class ScavengerChestPOD : public ContainerPOD {
public:
	Optional<Vector<unsigned long long>> lootedList;

	String _className;
	ScavengerChestPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ScavengerChestPOD();

};

} // namespace eventperk
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::eventperk;

#endif /*SCAVENGERCHESTPOD_H_*/
