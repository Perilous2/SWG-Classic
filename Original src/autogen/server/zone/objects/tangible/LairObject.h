/*
 *	autogen/server/zone/objects/tangible/LairObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef LAIROBJECT_H_
#define LAIROBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class DespawnLairOnPlayerDisappear;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class QuadTreeEntry;

class QuadTreeEntryPOD;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/CloseObjectsVector.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "engine/log/Logger.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class LairObject : public TangibleObject {
public:
	LairObject();

	int getNumberOfPlayersInRange();

	bool getDespawnOnNoPlayersInRange() const;

	bool isRepopulated() const;

	void setDespawnOnNoPlayersInRange(bool b);

	void setLairRepopulated(bool repop);

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	void activateDespawnEvent();

	void clearDespawnEvent();

	bool isLairObject();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	LairObject(DummyConstructorParameter* param);

	virtual ~LairObject();

	friend class LairObjectHelper;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class LairObjectImplementation : public TangibleObjectImplementation {
protected:
	AtomicInteger numberOfPlayersInRange;

	bool despawnOnNoPlayersInRange;

	Reference<DespawnLairOnPlayerDisappear* > despawnEvent;

	bool repopulated;

public:
	LairObjectImplementation();

	LairObjectImplementation(DummyConstructorParameter* param);

	int getNumberOfPlayersInRange();

	bool getDespawnOnNoPlayersInRange() const;

	bool isRepopulated() const;

	void setDespawnOnNoPlayersInRange(bool b);

	void setLairRepopulated(bool repop);

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	void activateDespawnEvent();

	void clearDespawnEvent();

	bool isLairObject();

	WeakReference<LairObject*> _this;

	operator const LairObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~LairObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class LairObject;
};

class LairObjectAdapter : public TangibleObjectAdapter {
public:
	LairObjectAdapter(LairObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int getNumberOfPlayersInRange();

	bool getDespawnOnNoPlayersInRange() const;

	bool isRepopulated() const;

	void setDespawnOnNoPlayersInRange(bool b);

	void setLairRepopulated(bool repop);

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	void activateDespawnEvent();

	void clearDespawnEvent();

	bool isLairObject();

};

class LairObjectHelper : public DistributedObjectClassHelper, public Singleton<LairObjectHelper> {
	static LairObjectHelper* staticInitializer;

public:
	LairObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<LairObjectHelper>;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class LairObjectPOD : public TangibleObjectPOD {
public:
	Optional<bool> despawnOnNoPlayersInRange;

	Optional<bool> repopulated;

	String _className;
	LairObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~LairObjectPOD();

};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#endif /*LAIROBJECTPOD_H_*/
