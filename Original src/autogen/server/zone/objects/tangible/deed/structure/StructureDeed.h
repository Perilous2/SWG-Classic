/*
 *	autogen/server/zone/objects/tangible/deed/structure/StructureDeed.h generated by engine3 IDL compiler 0.70
 */

#ifndef STRUCTUREDEED_H_
#define STRUCTUREDEED_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObject;

class StructureObjectPOD;

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/tangible/deed/components/PlaceStructureComponent.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/tangible/deed/Deed.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace structure {

class StructureDeed : public Deed {
public:
	StructureDeed();

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void initializeTransientMembers();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate = false);

	int placeStructure(CreatureObject* creature, float x, float y, int angle);

	int notifyStructurePlaced(CreatureObject* creature, StructureObject* structure);

	void setSurplusMaintenance(unsigned int maint);

	void setSurplusPower(unsigned int power);

	void setExtractionRate(float rate);

	void setHopperSize(float size);

	unsigned int getSurplusMaintenance() const;

	unsigned int getSurplusPower() const;

	float getExtractionRate() const;

	float getHopperSize() const;

	bool isStructureDeed();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	StructureDeed(DummyConstructorParameter* param);

	virtual ~StructureDeed();

	friend class StructureDeedHelper;
};

} // namespace structure
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::structure;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace structure {

class StructureDeedImplementation : public DeedImplementation {
protected:
	unsigned int surplusMaintenance;

	unsigned int surplusPower;

	float extractionRate;

	float hopperSizeMax;

	Reference<PlaceStructureComponent* > placeStructureComponent;

public:
	StructureDeedImplementation();

	StructureDeedImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* alm, CreatureObject* object);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void initializeTransientMembers();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate = false);

	int placeStructure(CreatureObject* creature, float x, float y, int angle);

	int notifyStructurePlaced(CreatureObject* creature, StructureObject* structure);

	void setSurplusMaintenance(unsigned int maint);

	void setSurplusPower(unsigned int power);

	void setExtractionRate(float rate);

	void setHopperSize(float size);

	unsigned int getSurplusMaintenance() const;

	unsigned int getSurplusPower() const;

	float getExtractionRate() const;

	float getHopperSize() const;

	bool isStructureDeed();

	WeakReference<StructureDeed*> _this;

	operator const StructureDeed*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~StructureDeedImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class StructureDeed;
};

class StructureDeedAdapter : public DeedAdapter {
public:
	StructureDeedAdapter(StructureDeed* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void initializeTransientMembers();

	int placeStructure(CreatureObject* creature, float x, float y, int angle);

	int notifyStructurePlaced(CreatureObject* creature, StructureObject* structure);

	void setSurplusMaintenance(unsigned int maint);

	void setSurplusPower(unsigned int power);

	void setExtractionRate(float rate);

	void setHopperSize(float size);

	unsigned int getSurplusMaintenance() const;

	unsigned int getSurplusPower() const;

	float getExtractionRate() const;

	float getHopperSize() const;

	bool isStructureDeed();

};

class StructureDeedHelper : public DistributedObjectClassHelper, public Singleton<StructureDeedHelper> {
	static StructureDeedHelper* staticInitializer;

public:
	StructureDeedHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StructureDeedHelper>;
};

} // namespace structure
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::structure;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {
namespace structure {

class StructureDeedPOD : public DeedPOD {
public:
	Optional<unsigned int> surplusMaintenance;

	Optional<unsigned int> surplusPower;

	Optional<float> extractionRate;

	Optional<float> hopperSizeMax;

	String _className;
	StructureDeedPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~StructureDeedPOD();

};

} // namespace structure
} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed::structure;

#endif /*STRUCTUREDEEDPOD_H_*/
