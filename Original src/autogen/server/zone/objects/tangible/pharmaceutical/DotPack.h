/*
 *	autogen/server/zone/objects/tangible/pharmaceutical/DotPack.h generated by engine3 IDL compiler 0.70
 */

#ifndef DOTPACK_H_
#define DOTPACK_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "system/lang/Math.h"

#include "templates/params/creature/CreatureState.h"

#include "templates/params/creature/CreatureAttribute.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "templates/tangible/DotPackTemplate.h"

#include "templates/SharedObjectTemplate.h"

#include "system/lang/String.h"

#include "server/zone/objects/creature/BuffAttribute.h"

#include "server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace pharmaceutical {

class DotPack : public PharmaceuticalObject {
public:
	DotPack();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	int calculatePower(CreatureObject* creature);

	bool isDotPackObject();

	bool isPoisonDeliveryUnit();

	bool isDiseaseDeliveryUnit();

	float getEffectiveness();

	float getRange();

	float getArea();

	float getRangeMod();

	float getPotency();

	unsigned int getDuration();

	bool isArea();

	unsigned int getPool();

	unsigned int getDotType();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	DotPack(DummyConstructorParameter* param);

	virtual ~DotPack();

	friend class DotPackHelper;
};

} // namespace pharmaceutical
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::pharmaceutical;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace pharmaceutical {

class DotPackImplementation : public PharmaceuticalObjectImplementation {
protected:
	float effectiveness;

	float range;

	float area;

	bool hasArea;

	float rangeMod;

	float potency;

	String commandToExecute;

	unsigned int duration;

	unsigned int pool;

	unsigned int dotType;

public:
	DotPackImplementation();

	DotPackImplementation(DummyConstructorParameter* param);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	int calculatePower(CreatureObject* creature);

	bool isDotPackObject();

	bool isPoisonDeliveryUnit();

	bool isDiseaseDeliveryUnit();

	float getEffectiveness();

	float getRange();

	float getArea();

	float getRangeMod();

	float getPotency();

	unsigned int getDuration();

	bool isArea();

	unsigned int getPool();

	unsigned int getDotType();

	WeakReference<DotPack*> _this;

	operator const DotPack*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~DotPackImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class DotPack;
};

class DotPackAdapter : public PharmaceuticalObjectAdapter {
public:
	DotPackAdapter(DotPack* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void notifyLoadFromDatabase();

	int calculatePower(CreatureObject* creature);

	bool isDotPackObject();

	bool isPoisonDeliveryUnit();

	bool isDiseaseDeliveryUnit();

	float getEffectiveness();

	float getRange();

	float getArea();

	float getRangeMod();

	float getPotency();

	unsigned int getDuration();

	bool isArea();

	unsigned int getPool();

	unsigned int getDotType();

};

class DotPackHelper : public DistributedObjectClassHelper, public Singleton<DotPackHelper> {
	static DotPackHelper* staticInitializer;

public:
	DotPackHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<DotPackHelper>;
};

} // namespace pharmaceutical
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::pharmaceutical;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace pharmaceutical {

class DotPackPOD : public PharmaceuticalObjectPOD {
public:
	Optional<float> effectiveness;

	Optional<float> range;

	Optional<float> area;

	Optional<bool> hasArea;

	Optional<float> rangeMod;

	Optional<float> potency;

	Optional<String> commandToExecute;

	Optional<unsigned int> duration;

	Optional<unsigned int> pool;

	Optional<unsigned int> dotType;

	String _className;
	DotPackPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~DotPackPOD();

};

} // namespace pharmaceutical
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::pharmaceutical;

#endif /*DOTPACKPOD_H_*/
