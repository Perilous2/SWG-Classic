/*
 *	autogen/server/zone/objects/tangible/powerup/PowerupObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef POWERUPOBJECT_H_
#define POWERUPOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class WeaponObject;

class WeaponObjectPOD;

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

#include "engine/lua/Luna.h"

#include "server/zone/objects/tangible/powerup/PowerupStatVector.h"

#include "templates/SharedObjectTemplate.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "templates/tangible/PowerupTemplate.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace powerup {

class PowerupObject : public TangibleObject {
public:
	static const float MAXPRIMARY;

	static const float MAXSECONDARY;

	PowerupObject();

	bool isRanged() const;

	bool isMelee() const;

	bool isThrown() const;

	bool isMine() const;

	void decreaseUses();

	int getUses() const;

	void setUses(int i);

	void setType(const String& t);

	float getPowerupStat(const String& stat) const;

	void addPowerupStat(const String& attributeToMod, const String& name, const String& pupAttrib, float value);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void addSecondaryStat(CraftingValues* values, PowerupTemplate* pupTemplate);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void fillWeaponAttributeList(AttributeListMessage* alm, WeaponObject* weapon);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PowerupObject(DummyConstructorParameter* param);

	virtual ~PowerupObject();

	friend class PowerupObjectHelper;
};

} // namespace powerup
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::powerup;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace powerup {

class PowerupObjectImplementation : public TangibleObjectImplementation {
public:
	static const float MAXPRIMARY;

	static const float MAXSECONDARY;

protected:
	PowerupStatVector modifiers;

	int uses;

	String type;

public:
	PowerupObjectImplementation();

	PowerupObjectImplementation(DummyConstructorParameter* param);

	bool isRanged() const;

	bool isMelee() const;

	bool isThrown() const;

	bool isMine() const;

	void decreaseUses();

	int getUses() const;

	void setUses(int i);

	void setType(const String& t);

	float getPowerupStat(const String& stat) const;

	void addPowerupStat(const String& attributeToMod, const String& name, const String& pupAttrib, float value);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void addSecondaryStat(CraftingValues* values, PowerupTemplate* pupTemplate);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void fillWeaponAttributeList(AttributeListMessage* alm, WeaponObject* weapon);

private:
	float getWeaponStat(const String& attrib, WeaponObject* weapon, bool withPup) const;

public:
	WeakReference<PowerupObject*> _this;

	operator const PowerupObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~PowerupObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PowerupObject;
};

class PowerupObjectAdapter : public TangibleObjectAdapter {
public:
	PowerupObjectAdapter(PowerupObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isRanged() const;

	bool isMelee() const;

	bool isThrown() const;

	bool isMine() const;

	void decreaseUses();

	int getUses() const;

	void setUses(int i);

	void setType(const String& t);

	float getPowerupStat(const String& stat) const;

	void addPowerupStat(const String& attributeToMod, const String& name, const String& pupAttrib, float value);

};

class PowerupObjectHelper : public DistributedObjectClassHelper, public Singleton<PowerupObjectHelper> {
	static PowerupObjectHelper* staticInitializer;

public:
	PowerupObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PowerupObjectHelper>;
};

class LuaPowerupObject {
public:
	static const char className[];
	static Luna<LuaPowerupObject>::RegType Register[];

	LuaPowerupObject(lua_State *L);
	virtual ~LuaPowerupObject();

	int _setObject(lua_State *L);
	int _getObject(lua_State *L);
	int isRanged(lua_State *L);
	int isMelee(lua_State *L);
	int isThrown(lua_State *L);
	int isMine(lua_State *L);
	int decreaseUses(lua_State *L);
	int getUses(lua_State *L);
	int setUses(lua_State *L);
	int setType(lua_State *L);
	int getPowerupStat(lua_State *L);
	int addPowerupStat(lua_State *L);
	int fillAttributeList(lua_State *L);
	int addSecondaryStat(lua_State *L);
	int updateCraftingValues(lua_State *L);
	int fillWeaponAttributeList(lua_State *L);

	Reference<PowerupObject*> realObject;
};

} // namespace powerup
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::powerup;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace powerup {

class PowerupObjectPOD : public TangibleObjectPOD {
public:
	Optional<PowerupStatVector> modifiers;

	Optional<int> uses;

	Optional<String> type;

	String _className;
	PowerupObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~PowerupObjectPOD();

};

} // namespace powerup
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::powerup;

#endif /*POWERUPOBJECTPOD_H_*/
