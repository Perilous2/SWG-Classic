/*
 *	autogen/server/zone/objects/creature/ai/HelperDroidObject.cpp generated by engine3 IDL compiler 0.70
 */

#include "HelperDroidObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/ai/AiAgent.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	HelperDroidObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 2978458234,RPC_NOTIFYHELPERDROIDSKILLTRAINED__CREATUREOBJECT_STRING_,RPC_ISHELPERDROIDOBJECT__};

HelperDroidObject::HelperDroidObject() : DroidObject(DummyConstructorParameter::instance()) {
	HelperDroidObjectImplementation* _implementation = new HelperDroidObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("HelperDroidObject");
}

HelperDroidObject::HelperDroidObject(DummyConstructorParameter* param) : DroidObject(param) {
	_setClassName("HelperDroidObject");
}

HelperDroidObject::~HelperDroidObject() {
}



void HelperDroidObject::initializeTransientMembers() {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void HelperDroidObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillAttributeList(msg, object);
	}
}

int HelperDroidObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert((player == NULL) || player->isLockedByCurrentThread());
		return _implementation->handleObjectMenuSelect(player, selectedID);
	}
}

void HelperDroidObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->fillObjectMenuResponse(menuResponse, player);
	}
}

void HelperDroidObject::onCall() {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->onCall();
	}
}

void HelperDroidObject::notifyHelperDroidSkillTrained(CreatureObject* player, const String& skillString) {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYHELPERDROIDSKILLTRAINED__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(skillString);

		method.executeWithVoidReturn();
	} else {
		assert(this->isLockedByCurrentThread());
		_implementation->notifyHelperDroidSkillTrained(player, skillString);
	}
}

bool HelperDroidObject::isHelperDroidObject() {
	HelperDroidObjectImplementation* _implementation = static_cast<HelperDroidObjectImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHELPERDROIDOBJECT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isHelperDroidObject();
	}
}

DistributedObjectServant* HelperDroidObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* HelperDroidObject::_getImplementationForRead() const {
	return _impl;
}

void HelperDroidObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	HelperDroidObjectImplementation
 */

HelperDroidObjectImplementation::HelperDroidObjectImplementation(DummyConstructorParameter* param) : DroidObjectImplementation(param) {
	_initializeImplementation();
}


HelperDroidObjectImplementation::~HelperDroidObjectImplementation() {
}


void HelperDroidObjectImplementation::finalize() {
}

void HelperDroidObjectImplementation::_initializeImplementation() {
	_setClassHelper(HelperDroidObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void HelperDroidObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<HelperDroidObject*>(stub);
	DroidObjectImplementation::_setStub(stub);
}

DistributedObjectStub* HelperDroidObjectImplementation::_getStub() {
	return _this.get();
}

HelperDroidObjectImplementation::operator const HelperDroidObject*() {
	return _this.get();
}

void HelperDroidObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void HelperDroidObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void HelperDroidObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void HelperDroidObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void HelperDroidObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void HelperDroidObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void HelperDroidObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void HelperDroidObjectImplementation::_serializationHelperMethod() {
	DroidObjectImplementation::_serializationHelperMethod();

	_setClassName("HelperDroidObject");

}

void HelperDroidObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(HelperDroidObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool HelperDroidObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (DroidObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void HelperDroidObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = HelperDroidObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int HelperDroidObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = DroidObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count;
}

void HelperDroidObjectImplementation::writeJSON(nlohmann::json& j) {
	DroidObjectImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
}

HelperDroidObjectImplementation::HelperDroidObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/ai/HelperDroidObject.idl():  		Logger.setLoggingName("HelperDroidObject");
	Logger::setLoggingName("HelperDroidObject");
	// server/zone/objects/creature/ai/HelperDroidObject.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/ai/HelperDroidObject.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

bool HelperDroidObjectImplementation::isHelperDroidObject() {
	// server/zone/objects/creature/ai/HelperDroidObject.idl():  		return true;
	return true;
}

/*
 *	HelperDroidObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


HelperDroidObjectAdapter::HelperDroidObjectAdapter(HelperDroidObject* obj) : DroidObjectAdapter(obj) {
}

void HelperDroidObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_NOTIFYHELPERDROIDSKILLTRAINED__CREATUREOBJECT_STRING_:
		{
			CreatureObject* player = static_cast<CreatureObject*>(inv->getObjectParameter());
			 String skillString; inv->getAsciiParameter(skillString);
			
			notifyHelperDroidSkillTrained(player, skillString);
			
		}
		break;
	case RPC_ISHELPERDROIDOBJECT__:
		{
			
			bool _m_res = isHelperDroidObject();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		DroidObjectAdapter::invokeMethod(methid, inv);
	}
}

void HelperDroidObjectAdapter::initializeTransientMembers() {
	(static_cast<HelperDroidObject*>(stub))->initializeTransientMembers();
}

void HelperDroidObjectAdapter::notifyHelperDroidSkillTrained(CreatureObject* player, const String& skillString) {
	(static_cast<HelperDroidObject*>(stub))->notifyHelperDroidSkillTrained(player, skillString);
}

bool HelperDroidObjectAdapter::isHelperDroidObject() {
	return (static_cast<HelperDroidObject*>(stub))->isHelperDroidObject();
}

/*
 *	HelperDroidObjectHelper
 */

HelperDroidObjectHelper* HelperDroidObjectHelper::staticInitializer = HelperDroidObjectHelper::instance();

HelperDroidObjectHelper::HelperDroidObjectHelper() {
	className = "HelperDroidObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void HelperDroidObjectHelper::finalizeHelper() {
	HelperDroidObjectHelper::finalize();
}

DistributedObject* HelperDroidObjectHelper::instantiateObject() {
	return new HelperDroidObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* HelperDroidObjectHelper::instantiateServant() {
	return new HelperDroidObjectImplementation();
}

DistributedObjectPOD* HelperDroidObjectHelper::instantiatePOD() {
	return new HelperDroidObjectPOD();
}

DistributedObjectAdapter* HelperDroidObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HelperDroidObjectAdapter(static_cast<HelperDroidObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	HelperDroidObjectPOD
 */

HelperDroidObjectPOD::~HelperDroidObjectPOD() {
	finalize();
}

HelperDroidObjectPOD::HelperDroidObjectPOD(void) {
	_className = "HelperDroidObject";
}


void HelperDroidObjectPOD::writeJSON(nlohmann::json& j) {
	DroidObjectPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
}


void HelperDroidObjectPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = HelperDroidObjectPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int HelperDroidObjectPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = DroidObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count;
}

bool HelperDroidObjectPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (DroidObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void HelperDroidObjectPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(HelperDroidObjectPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void HelperDroidObjectPOD::writeObjectCompact(ObjectOutputStream* stream) {
	DroidObjectPOD::writeObjectCompact(stream);


}

