/*
 *	autogen/server/zone/objects/creature/buffs/PowerBoostBuff.cpp generated by engine3 IDL compiler 0.70
 */

#include "PowerBoostBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/PowerBoostBuffDurationEvent.h"

/*
 *	PowerBoostBuffStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 1186012662,RPC_ACTIVATE__BOOL_,RPC_DEACTIVATE__BOOL_,RPC_DOHEALTHANDACTIONTICK__BOOL_,RPC_DOMINDTICK__BOOL_,RPC_CLEARBUFFEVENT__};

PowerBoostBuff::PowerBoostBuff(CreatureObject* creo, const String& name, unsigned int buffCRC, int value, int duration) : Buff(DummyConstructorParameter::instance()) {
	PowerBoostBuffImplementation* _implementation = new PowerBoostBuffImplementation(creo, name, buffCRC, value, duration);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PowerBoostBuff");
}

PowerBoostBuff::PowerBoostBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("PowerBoostBuff");
}

PowerBoostBuff::~PowerBoostBuff() {
}



void PowerBoostBuff::initializeTransientMembers() {
	PowerBoostBuffImplementation* _implementation = static_cast<PowerBoostBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void PowerBoostBuff::activate(bool applyModifiers) {
	PowerBoostBuffImplementation* _implementation = static_cast<PowerBoostBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->activate(applyModifiers);
	}
}

void PowerBoostBuff::deactivate(bool removeModifiers) {
	PowerBoostBuffImplementation* _implementation = static_cast<PowerBoostBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(removeModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->deactivate(removeModifiers);
	}
}

void PowerBoostBuff::doHealthAndActionTick(bool up) {
	PowerBoostBuffImplementation* _implementation = static_cast<PowerBoostBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOHEALTHANDACTIONTICK__BOOL_);
		method.addBooleanParameter(up);

		method.executeWithVoidReturn();
	} else {
		_implementation->doHealthAndActionTick(up);
	}
}

void PowerBoostBuff::doMindTick(bool up) {
	PowerBoostBuffImplementation* _implementation = static_cast<PowerBoostBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOMINDTICK__BOOL_);
		method.addBooleanParameter(up);

		method.executeWithVoidReturn();
	} else {
		_implementation->doMindTick(up);
	}
}

void PowerBoostBuff::clearBuffEvent() {
	PowerBoostBuffImplementation* _implementation = static_cast<PowerBoostBuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARBUFFEVENT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearBuffEvent();
	}
}

DistributedObjectServant* PowerBoostBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PowerBoostBuff::_getImplementationForRead() const {
	return _impl;
}

void PowerBoostBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PowerBoostBuffImplementation
 */

PowerBoostBuffImplementation::PowerBoostBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


PowerBoostBuffImplementation::~PowerBoostBuffImplementation() {
}


void PowerBoostBuffImplementation::finalize() {
}

void PowerBoostBuffImplementation::_initializeImplementation() {
	_setClassHelper(PowerBoostBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PowerBoostBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PowerBoostBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* PowerBoostBuffImplementation::_getStub() {
	return _this.get();
}

PowerBoostBuffImplementation::operator const PowerBoostBuff*() {
	return _this.get();
}

void PowerBoostBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PowerBoostBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PowerBoostBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PowerBoostBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PowerBoostBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PowerBoostBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PowerBoostBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PowerBoostBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("PowerBoostBuff");

}

void PowerBoostBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PowerBoostBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PowerBoostBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xfce517f3: //PowerBoostBuff.pbBonus
		TypeInfo<int >::parseFromBinaryStream(&pbBonus, stream);
		return true;

	case 0x25a9608a: //PowerBoostBuff.pbTick
		TypeInfo<int >::parseFromBinaryStream(&pbTick, stream);
		return true;

	case 0xad0c03d4: //PowerBoostBuff.time
		TypeInfo<int >::parseFromBinaryStream(&time, stream);
		return true;

	case 0xc6f1c6b6: //PowerBoostBuff.counter
		TypeInfo<int >::parseFromBinaryStream(&counter, stream);
		return true;

	case 0x9d5be2b0: //PowerBoostBuff.haBuffAmount
		TypeInfo<int >::parseFromBinaryStream(&haBuffAmount, stream);
		return true;

	case 0x6e78934d: //PowerBoostBuff.mindBuffAmount
		TypeInfo<int >::parseFromBinaryStream(&mindBuffAmount, stream);
		return true;

	case 0x6fc704f8: //PowerBoostBuff.nextTickTime
		TypeInfo<Time >::parseFromBinaryStream(&nextTickTime, stream);
		return true;

	}

	return false;
}

void PowerBoostBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PowerBoostBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PowerBoostBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xfce517f3; //PowerBoostBuff.pbBonus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&pbBonus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x25a9608a; //PowerBoostBuff.pbTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&pbTick, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xad0c03d4; //PowerBoostBuff.time
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&time, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xc6f1c6b6; //PowerBoostBuff.counter
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&counter, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x9d5be2b0; //PowerBoostBuff.haBuffAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&haBuffAmount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x6e78934d; //PowerBoostBuff.mindBuffAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&mindBuffAmount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x6fc704f8; //PowerBoostBuff.nextTickTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&nextTickTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void PowerBoostBuffImplementation::writeJSON(nlohmann::json& j) {
	BuffImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["pbBonus"] = pbBonus;

	thisObject["pbTick"] = pbTick;

	thisObject["time"] = time;

	thisObject["counter"] = counter;

	thisObject["haBuffAmount"] = haBuffAmount;

	thisObject["mindBuffAmount"] = mindBuffAmount;

	thisObject["nextTickTime"] = nextTickTime;

	j["PowerBoostBuff"] = thisObject;
}

PowerBoostBuffImplementation::PowerBoostBuffImplementation(CreatureObject* creo, const String& name, unsigned int buffCRC, int value, int duration) : BuffImplementation(creo, buffCRC, duration, BuffType::SKILL) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		super.buffName = name;
	BuffImplementation::buffName = name;
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		pbBonus = value;
	pbBonus = value;
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		pbTick = value/20;
	pbTick = value / 20;
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		time = duration * 1000;
	time = duration * 1000;
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		counter = 0;
	counter = 0;
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		haBuffAmount=0;
	haBuffAmount = 0;
	// server/zone/objects/creature/buffs/PowerBoostBuff.idl():  		mindBuffAmount=0;
	mindBuffAmount = 0;
}

/*
 *	PowerBoostBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PowerBoostBuffAdapter::PowerBoostBuffAdapter(PowerBoostBuff* obj) : BuffAdapter(obj) {
}

void PowerBoostBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_ACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			activate(applyModifiers);
			
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			bool removeModifiers = inv->getBooleanParameter();
			
			deactivate(removeModifiers);
			
		}
		break;
	case RPC_DOHEALTHANDACTIONTICK__BOOL_:
		{
			bool up = inv->getBooleanParameter();
			
			doHealthAndActionTick(up);
			
		}
		break;
	case RPC_DOMINDTICK__BOOL_:
		{
			bool up = inv->getBooleanParameter();
			
			doMindTick(up);
			
		}
		break;
	case RPC_CLEARBUFFEVENT__:
		{
			
			clearBuffEvent();
			
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

void PowerBoostBuffAdapter::initializeTransientMembers() {
	(static_cast<PowerBoostBuff*>(stub))->initializeTransientMembers();
}

void PowerBoostBuffAdapter::activate(bool applyModifiers) {
	(static_cast<PowerBoostBuff*>(stub))->activate(applyModifiers);
}

void PowerBoostBuffAdapter::deactivate(bool removeModifiers) {
	(static_cast<PowerBoostBuff*>(stub))->deactivate(removeModifiers);
}

void PowerBoostBuffAdapter::doHealthAndActionTick(bool up) {
	(static_cast<PowerBoostBuff*>(stub))->doHealthAndActionTick(up);
}

void PowerBoostBuffAdapter::doMindTick(bool up) {
	(static_cast<PowerBoostBuff*>(stub))->doMindTick(up);
}

void PowerBoostBuffAdapter::clearBuffEvent() {
	(static_cast<PowerBoostBuff*>(stub))->clearBuffEvent();
}

/*
 *	PowerBoostBuffHelper
 */

PowerBoostBuffHelper* PowerBoostBuffHelper::staticInitializer = PowerBoostBuffHelper::instance();

PowerBoostBuffHelper::PowerBoostBuffHelper() {
	className = "PowerBoostBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void PowerBoostBuffHelper::finalizeHelper() {
	PowerBoostBuffHelper::finalize();
}

DistributedObject* PowerBoostBuffHelper::instantiateObject() {
	return new PowerBoostBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* PowerBoostBuffHelper::instantiateServant() {
	return new PowerBoostBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* PowerBoostBuffHelper::instantiatePOD() {
	return new PowerBoostBuffPOD();
}

DistributedObjectAdapter* PowerBoostBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PowerBoostBuffAdapter(static_cast<PowerBoostBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PowerBoostBuffPOD
 */

PowerBoostBuffPOD::~PowerBoostBuffPOD() {
}

PowerBoostBuffPOD::PowerBoostBuffPOD(void) {
	_className = "PowerBoostBuff";
}


void PowerBoostBuffPOD::writeJSON(nlohmann::json& j) {
	BuffPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (pbBonus)
		thisObject["pbBonus"] = pbBonus.value();

	if (pbTick)
		thisObject["pbTick"] = pbTick.value();

	if (time)
		thisObject["time"] = time.value();

	if (counter)
		thisObject["counter"] = counter.value();

	if (haBuffAmount)
		thisObject["haBuffAmount"] = haBuffAmount.value();

	if (mindBuffAmount)
		thisObject["mindBuffAmount"] = mindBuffAmount.value();

	if (nextTickTime)
		thisObject["nextTickTime"] = nextTickTime.value();

	j["PowerBoostBuff"] = thisObject;
}


void PowerBoostBuffPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PowerBoostBuffPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PowerBoostBuffPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (pbBonus) {
	_nameHashCode = 0xfce517f3; //PowerBoostBuff.pbBonus
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&pbBonus.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (pbTick) {
	_nameHashCode = 0x25a9608a; //PowerBoostBuff.pbTick
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&pbTick.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (time) {
	_nameHashCode = 0xad0c03d4; //PowerBoostBuff.time
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&time.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (counter) {
	_nameHashCode = 0xc6f1c6b6; //PowerBoostBuff.counter
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&counter.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (haBuffAmount) {
	_nameHashCode = 0x9d5be2b0; //PowerBoostBuff.haBuffAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&haBuffAmount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (mindBuffAmount) {
	_nameHashCode = 0x6e78934d; //PowerBoostBuff.mindBuffAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&mindBuffAmount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (nextTickTime) {
	_nameHashCode = 0x6fc704f8; //PowerBoostBuff.nextTickTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&nextTickTime.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool PowerBoostBuffPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xfce517f3: //PowerBoostBuff.pbBonus
		{
			int _mnpbBonus;
			TypeInfo<int >::parseFromBinaryStream(&_mnpbBonus, stream);
			pbBonus = std::move(_mnpbBonus);
		}
		return true;

	case 0x25a9608a: //PowerBoostBuff.pbTick
		{
			int _mnpbTick;
			TypeInfo<int >::parseFromBinaryStream(&_mnpbTick, stream);
			pbTick = std::move(_mnpbTick);
		}
		return true;

	case 0xad0c03d4: //PowerBoostBuff.time
		{
			int _mntime;
			TypeInfo<int >::parseFromBinaryStream(&_mntime, stream);
			time = std::move(_mntime);
		}
		return true;

	case 0xc6f1c6b6: //PowerBoostBuff.counter
		{
			int _mncounter;
			TypeInfo<int >::parseFromBinaryStream(&_mncounter, stream);
			counter = std::move(_mncounter);
		}
		return true;

	case 0x9d5be2b0: //PowerBoostBuff.haBuffAmount
		{
			int _mnhaBuffAmount;
			TypeInfo<int >::parseFromBinaryStream(&_mnhaBuffAmount, stream);
			haBuffAmount = std::move(_mnhaBuffAmount);
		}
		return true;

	case 0x6e78934d: //PowerBoostBuff.mindBuffAmount
		{
			int _mnmindBuffAmount;
			TypeInfo<int >::parseFromBinaryStream(&_mnmindBuffAmount, stream);
			mindBuffAmount = std::move(_mnmindBuffAmount);
		}
		return true;

	case 0x6fc704f8: //PowerBoostBuff.nextTickTime
		{
			Time _mnnextTickTime;
			TypeInfo<Time >::parseFromBinaryStream(&_mnnextTickTime, stream);
			nextTickTime = std::move(_mnnextTickTime);
		}
		return true;

	}

	return false;
}

void PowerBoostBuffPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PowerBoostBuffPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void PowerBoostBuffPOD::writeObjectCompact(ObjectOutputStream* stream) {
	BuffPOD::writeObjectCompact(stream);

	TypeInfo<int >::toBinaryStream(&pbBonus.value(), stream);

	TypeInfo<int >::toBinaryStream(&pbTick.value(), stream);

	TypeInfo<int >::toBinaryStream(&time.value(), stream);

	TypeInfo<int >::toBinaryStream(&counter.value(), stream);

	TypeInfo<int >::toBinaryStream(&haBuffAmount.value(), stream);

	TypeInfo<int >::toBinaryStream(&mindBuffAmount.value(), stream);

	TypeInfo<Time >::toBinaryStream(&nextTickTime.value(), stream);


}

