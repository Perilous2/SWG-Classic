/*
 *	autogen/server/zone/objects/creature/buffs/ForceWeakenDebuff.h generated by engine3 IDL compiler 0.70
 */

#ifndef FORCEWEAKENDEBUFF_H_
#define FORCEWEAKENDEBUFF_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace buffs {

class ForceWeakenDebuffDurationEvent;

} // namespace buffs
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::buffs;

#include "server/zone/objects/creature/buffs/BuffType.h"

#include "templates/params/creature/CreatureAttribute.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/creature/buffs/Buff.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace buffs {

class ForceWeakenDebuff : public Buff {
public:
	static const int FORCE_WEAKEN_RAMP_SECONDS = 30;

	static const int FORCE_WEAKEN_TICK_COUNT = 5;

	static const int FORCE_WEAKEN_TICK_SECONDS = 6;

	static const int FORCE_WEAKEN_RAND_SCALE = 100;

	ForceWeakenDebuff(CreatureObject* creo, unsigned int buffCRC, int stdMaxValue, int kdMaxValue, int duration);

	void initializeTransientMembers();

	void activate(bool applyModifiers);

	void deactivate(bool removeModifiers);

	void doHealthActionMindTick(bool weaken);

	void clearBuffEvent();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ForceWeakenDebuff(DummyConstructorParameter* param);

	virtual ~ForceWeakenDebuff();

	friend class ForceWeakenDebuffHelper;
};

} // namespace buffs
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::buffs;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace buffs {

class ForceWeakenDebuffImplementation : public BuffImplementation {
public:
	static const int FORCE_WEAKEN_RAMP_SECONDS = 30;

	static const int FORCE_WEAKEN_TICK_COUNT = 5;

	static const int FORCE_WEAKEN_TICK_SECONDS = 6;

	static const int FORCE_WEAKEN_RAND_SCALE = 100;

protected:
	Reference<ForceWeakenDebuffDurationEvent* > fwBuffEvent;

	int fwStdMaxAmount;

	int fwKdMaxAmount;

	int time;

	int counter;

	VectorMap<int, int> hamDebuffAmount;

public:
	ForceWeakenDebuffImplementation(CreatureObject* creo, unsigned int buffCRC, int stdMaxValue, int kdMaxValue, int duration);

	ForceWeakenDebuffImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void activate(bool applyModifiers);

	void deactivate(bool removeModifiers);

	void doHealthActionMindTick(bool weaken);

	void clearBuffEvent();

	WeakReference<ForceWeakenDebuff*> _this;

	operator const ForceWeakenDebuff*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~ForceWeakenDebuffImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ForceWeakenDebuff;
};

class ForceWeakenDebuffAdapter : public BuffAdapter {
public:
	ForceWeakenDebuffAdapter(ForceWeakenDebuff* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void activate(bool applyModifiers);

	void deactivate(bool removeModifiers);

	void doHealthActionMindTick(bool weaken);

	void clearBuffEvent();

};

class ForceWeakenDebuffHelper : public DistributedObjectClassHelper, public Singleton<ForceWeakenDebuffHelper> {
	static ForceWeakenDebuffHelper* staticInitializer;

public:
	ForceWeakenDebuffHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ForceWeakenDebuffHelper>;
};

} // namespace buffs
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::buffs;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace buffs {

class ForceWeakenDebuffPOD : public BuffPOD {
public:
	Optional<int> fwStdMaxAmount;

	Optional<int> fwKdMaxAmount;

	Optional<int> time;

	Optional<int> counter;

	Optional<VectorMap<int, int>> hamDebuffAmount;

	String _className;
	ForceWeakenDebuffPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ForceWeakenDebuffPOD();

};

} // namespace buffs
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::buffs;

#endif /*FORCEWEAKENDEBUFFPOD_H_*/
