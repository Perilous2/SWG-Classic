/*
 *	autogen/server/zone/objects/creature/buffs/ForceWeakenDebuff.cpp generated by engine3 IDL compiler 0.70
 */

#include "ForceWeakenDebuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/ForceWeakenDebuffDurationEvent.h"

/*
 *	ForceWeakenDebuffStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 1913121489,RPC_ACTIVATE__BOOL_,RPC_DEACTIVATE__BOOL_,RPC_DOHEALTHACTIONMINDTICK__BOOL_,RPC_CLEARBUFFEVENT__};

ForceWeakenDebuff::ForceWeakenDebuff(CreatureObject* creo, unsigned int buffCRC, int stdMaxValue, int kdMaxValue, int duration) : Buff(DummyConstructorParameter::instance()) {
	ForceWeakenDebuffImplementation* _implementation = new ForceWeakenDebuffImplementation(creo, buffCRC, stdMaxValue, kdMaxValue, duration);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ForceWeakenDebuff");
}

ForceWeakenDebuff::ForceWeakenDebuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("ForceWeakenDebuff");
}

ForceWeakenDebuff::~ForceWeakenDebuff() {
}



void ForceWeakenDebuff::initializeTransientMembers() {
	ForceWeakenDebuffImplementation* _implementation = static_cast<ForceWeakenDebuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void ForceWeakenDebuff::activate(bool applyModifiers) {
	ForceWeakenDebuffImplementation* _implementation = static_cast<ForceWeakenDebuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->activate(applyModifiers);
	}
}

void ForceWeakenDebuff::deactivate(bool removeModifiers) {
	ForceWeakenDebuffImplementation* _implementation = static_cast<ForceWeakenDebuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(removeModifiers);

		method.executeWithVoidReturn();
	} else {
		_implementation->deactivate(removeModifiers);
	}
}

void ForceWeakenDebuff::doHealthActionMindTick(bool weaken) {
	ForceWeakenDebuffImplementation* _implementation = static_cast<ForceWeakenDebuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOHEALTHACTIONMINDTICK__BOOL_);
		method.addBooleanParameter(weaken);

		method.executeWithVoidReturn();
	} else {
		_implementation->doHealthActionMindTick(weaken);
	}
}

void ForceWeakenDebuff::clearBuffEvent() {
	ForceWeakenDebuffImplementation* _implementation = static_cast<ForceWeakenDebuffImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARBUFFEVENT__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearBuffEvent();
	}
}

DistributedObjectServant* ForceWeakenDebuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ForceWeakenDebuff::_getImplementationForRead() const {
	return _impl;
}

void ForceWeakenDebuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ForceWeakenDebuffImplementation
 */

ForceWeakenDebuffImplementation::ForceWeakenDebuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


ForceWeakenDebuffImplementation::~ForceWeakenDebuffImplementation() {
}


void ForceWeakenDebuffImplementation::finalize() {
}

void ForceWeakenDebuffImplementation::_initializeImplementation() {
	_setClassHelper(ForceWeakenDebuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ForceWeakenDebuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ForceWeakenDebuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* ForceWeakenDebuffImplementation::_getStub() {
	return _this.get();
}

ForceWeakenDebuffImplementation::operator const ForceWeakenDebuff*() {
	return _this.get();
}

void ForceWeakenDebuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ForceWeakenDebuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ForceWeakenDebuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ForceWeakenDebuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ForceWeakenDebuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ForceWeakenDebuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ForceWeakenDebuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ForceWeakenDebuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("ForceWeakenDebuff");

}

void ForceWeakenDebuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ForceWeakenDebuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ForceWeakenDebuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x862dc5e3: //ForceWeakenDebuff.fwStdMaxAmount
		TypeInfo<int >::parseFromBinaryStream(&fwStdMaxAmount, stream);
		return true;

	case 0xbef345bb: //ForceWeakenDebuff.fwKdMaxAmount
		TypeInfo<int >::parseFromBinaryStream(&fwKdMaxAmount, stream);
		return true;

	case 0xd83e887e: //ForceWeakenDebuff.time
		TypeInfo<int >::parseFromBinaryStream(&time, stream);
		return true;

	case 0xe8b8b9c8: //ForceWeakenDebuff.counter
		TypeInfo<int >::parseFromBinaryStream(&counter, stream);
		return true;

	case 0x1fd66af2: //ForceWeakenDebuff.hamDebuffAmount
		TypeInfo<VectorMap<int, int> >::parseFromBinaryStream(&hamDebuffAmount, stream);
		return true;

	}

	return false;
}

void ForceWeakenDebuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ForceWeakenDebuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ForceWeakenDebuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x862dc5e3; //ForceWeakenDebuff.fwStdMaxAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fwStdMaxAmount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xbef345bb; //ForceWeakenDebuff.fwKdMaxAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fwKdMaxAmount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xd83e887e; //ForceWeakenDebuff.time
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&time, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe8b8b9c8; //ForceWeakenDebuff.counter
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&counter, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1fd66af2; //ForceWeakenDebuff.hamDebuffAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<int, int> >::toBinaryStream(&hamDebuffAmount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void ForceWeakenDebuffImplementation::writeJSON(nlohmann::json& j) {
	BuffImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["fwStdMaxAmount"] = fwStdMaxAmount;

	thisObject["fwKdMaxAmount"] = fwKdMaxAmount;

	thisObject["time"] = time;

	thisObject["counter"] = counter;

	thisObject["hamDebuffAmount"] = hamDebuffAmount;

	j["ForceWeakenDebuff"] = thisObject;
}

ForceWeakenDebuffImplementation::ForceWeakenDebuffImplementation(CreatureObject* creo, unsigned int buffCRC, int stdMaxValue, int kdMaxValue, int duration) : BuffImplementation(creo, buffCRC, duration, BuffType::JEDI) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		fwStdMaxAmount = stdMaxValue;
	fwStdMaxAmount = stdMaxValue;
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		fwKdMaxAmount = kdMaxValue;
	fwKdMaxAmount = kdMaxValue;
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		time = duration * 1000;
	time = duration * 1000;
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		counter = 0;
	counter = 0;
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.HEALTH, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::HEALTH, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.STRENGTH, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::STRENGTH, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.CONSTITUTION, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::CONSTITUTION, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.ACTION, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::ACTION, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.QUICKNESS, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::QUICKNESS, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.STAMINA, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::STAMINA, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.MIND, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::MIND, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.FOCUS, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::FOCUS, 0);
	// server/zone/objects/creature/buffs/ForceWeakenDebuff.idl():  		hamDebuffAmount.put(CreatureAttribute.WILLPOWER, 0);
	(&hamDebuffAmount)->put(CreatureAttribute::WILLPOWER, 0);
}

/*
 *	ForceWeakenDebuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ForceWeakenDebuffAdapter::ForceWeakenDebuffAdapter(ForceWeakenDebuff* obj) : BuffAdapter(obj) {
}

void ForceWeakenDebuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_ACTIVATE__BOOL_:
		{
			bool applyModifiers = inv->getBooleanParameter();
			
			activate(applyModifiers);
			
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			bool removeModifiers = inv->getBooleanParameter();
			
			deactivate(removeModifiers);
			
		}
		break;
	case RPC_DOHEALTHACTIONMINDTICK__BOOL_:
		{
			bool weaken = inv->getBooleanParameter();
			
			doHealthActionMindTick(weaken);
			
		}
		break;
	case RPC_CLEARBUFFEVENT__:
		{
			
			clearBuffEvent();
			
		}
		break;
	default:
		BuffAdapter::invokeMethod(methid, inv);
	}
}

void ForceWeakenDebuffAdapter::initializeTransientMembers() {
	(static_cast<ForceWeakenDebuff*>(stub))->initializeTransientMembers();
}

void ForceWeakenDebuffAdapter::activate(bool applyModifiers) {
	(static_cast<ForceWeakenDebuff*>(stub))->activate(applyModifiers);
}

void ForceWeakenDebuffAdapter::deactivate(bool removeModifiers) {
	(static_cast<ForceWeakenDebuff*>(stub))->deactivate(removeModifiers);
}

void ForceWeakenDebuffAdapter::doHealthActionMindTick(bool weaken) {
	(static_cast<ForceWeakenDebuff*>(stub))->doHealthActionMindTick(weaken);
}

void ForceWeakenDebuffAdapter::clearBuffEvent() {
	(static_cast<ForceWeakenDebuff*>(stub))->clearBuffEvent();
}

/*
 *	ForceWeakenDebuffHelper
 */

ForceWeakenDebuffHelper* ForceWeakenDebuffHelper::staticInitializer = ForceWeakenDebuffHelper::instance();

ForceWeakenDebuffHelper::ForceWeakenDebuffHelper() {
	className = "ForceWeakenDebuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void ForceWeakenDebuffHelper::finalizeHelper() {
	ForceWeakenDebuffHelper::finalize();
}

DistributedObject* ForceWeakenDebuffHelper::instantiateObject() {
	return new ForceWeakenDebuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* ForceWeakenDebuffHelper::instantiateServant() {
	return new ForceWeakenDebuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* ForceWeakenDebuffHelper::instantiatePOD() {
	return new ForceWeakenDebuffPOD();
}

DistributedObjectAdapter* ForceWeakenDebuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ForceWeakenDebuffAdapter(static_cast<ForceWeakenDebuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ForceWeakenDebuffPOD
 */

ForceWeakenDebuffPOD::~ForceWeakenDebuffPOD() {
}

ForceWeakenDebuffPOD::ForceWeakenDebuffPOD(void) {
	_className = "ForceWeakenDebuff";
}


void ForceWeakenDebuffPOD::writeJSON(nlohmann::json& j) {
	BuffPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (fwStdMaxAmount)
		thisObject["fwStdMaxAmount"] = fwStdMaxAmount.value();

	if (fwKdMaxAmount)
		thisObject["fwKdMaxAmount"] = fwKdMaxAmount.value();

	if (time)
		thisObject["time"] = time.value();

	if (counter)
		thisObject["counter"] = counter.value();

	if (hamDebuffAmount)
		thisObject["hamDebuffAmount"] = hamDebuffAmount.value();

	j["ForceWeakenDebuff"] = thisObject;
}


void ForceWeakenDebuffPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ForceWeakenDebuffPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ForceWeakenDebuffPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (fwStdMaxAmount) {
	_nameHashCode = 0x862dc5e3; //ForceWeakenDebuff.fwStdMaxAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fwStdMaxAmount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (fwKdMaxAmount) {
	_nameHashCode = 0xbef345bb; //ForceWeakenDebuff.fwKdMaxAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&fwKdMaxAmount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (time) {
	_nameHashCode = 0xd83e887e; //ForceWeakenDebuff.time
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&time.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (counter) {
	_nameHashCode = 0xe8b8b9c8; //ForceWeakenDebuff.counter
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&counter.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (hamDebuffAmount) {
	_nameHashCode = 0x1fd66af2; //ForceWeakenDebuff.hamDebuffAmount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<int, int> >::toBinaryStream(&hamDebuffAmount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool ForceWeakenDebuffPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (BuffPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x862dc5e3: //ForceWeakenDebuff.fwStdMaxAmount
		{
			int _mnfwStdMaxAmount;
			TypeInfo<int >::parseFromBinaryStream(&_mnfwStdMaxAmount, stream);
			fwStdMaxAmount = std::move(_mnfwStdMaxAmount);
		}
		return true;

	case 0xbef345bb: //ForceWeakenDebuff.fwKdMaxAmount
		{
			int _mnfwKdMaxAmount;
			TypeInfo<int >::parseFromBinaryStream(&_mnfwKdMaxAmount, stream);
			fwKdMaxAmount = std::move(_mnfwKdMaxAmount);
		}
		return true;

	case 0xd83e887e: //ForceWeakenDebuff.time
		{
			int _mntime;
			TypeInfo<int >::parseFromBinaryStream(&_mntime, stream);
			time = std::move(_mntime);
		}
		return true;

	case 0xe8b8b9c8: //ForceWeakenDebuff.counter
		{
			int _mncounter;
			TypeInfo<int >::parseFromBinaryStream(&_mncounter, stream);
			counter = std::move(_mncounter);
		}
		return true;

	case 0x1fd66af2: //ForceWeakenDebuff.hamDebuffAmount
		{
			VectorMap<int, int> _mnhamDebuffAmount;
			TypeInfo<VectorMap<int, int> >::parseFromBinaryStream(&_mnhamDebuffAmount, stream);
			hamDebuffAmount = std::move(_mnhamDebuffAmount);
		}
		return true;

	}

	return false;
}

void ForceWeakenDebuffPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ForceWeakenDebuffPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void ForceWeakenDebuffPOD::writeObjectCompact(ObjectOutputStream* stream) {
	BuffPOD::writeObjectCompact(stream);

	TypeInfo<int >::toBinaryStream(&fwStdMaxAmount.value(), stream);

	TypeInfo<int >::toBinaryStream(&fwKdMaxAmount.value(), stream);

	TypeInfo<int >::toBinaryStream(&time.value(), stream);

	TypeInfo<int >::toBinaryStream(&counter.value(), stream);

	TypeInfo<VectorMap<int, int> >::toBinaryStream(&hamDebuffAmount.value(), stream);


}

