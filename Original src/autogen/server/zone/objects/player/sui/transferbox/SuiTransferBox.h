/*
 *	autogen/server/zone/objects/player/sui/transferbox/SuiTransferBox.h generated by engine3 IDL compiler 0.70
 */

#ifndef SUITRANSFERBOX_H_
#define SUITRANSFERBOX_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/service/proto/BaseMessage.h"

#include "server/zone/objects/player/sui/SuiBox.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace messagebox {

class SuiTransferBox : public SuiBox {
public:
	SuiTransferBox(CreatureObject* player, unsigned int windowType);

	BaseMessage* generateMessage();

	void addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom);

	void addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo);

	bool isTransferBox();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SuiTransferBox(DummyConstructorParameter* param);

	virtual ~SuiTransferBox();

	friend class SuiTransferBoxHelper;
};

} // namespace messagebox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::messagebox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace messagebox {

class SuiTransferBoxImplementation : public SuiBoxImplementation {
protected:
	String lblFrom;

	String lblStartingFrom;

	String lblInputFrom;

	String lblTo;

	String lblStartingTo;

	String lblInputTo;

	String convertRatioFrom;

	String convertRatioTo;

public:
	SuiTransferBoxImplementation(CreatureObject* player, unsigned int windowType);

	SuiTransferBoxImplementation(DummyConstructorParameter* param);

	BaseMessage* generateMessage();

	void addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom);

	void addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo);

	bool isTransferBox();

	WeakReference<SuiTransferBox*> _this;

	operator const SuiTransferBox*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~SuiTransferBoxImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SuiTransferBox;
};

class SuiTransferBoxAdapter : public SuiBoxAdapter {
public:
	SuiTransferBoxAdapter(SuiTransferBox* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom);

	void addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo);

	bool isTransferBox();

};

class SuiTransferBoxHelper : public DistributedObjectClassHelper, public Singleton<SuiTransferBoxHelper> {
	static SuiTransferBoxHelper* staticInitializer;

public:
	SuiTransferBoxHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SuiTransferBoxHelper>;
};

} // namespace messagebox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::messagebox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace messagebox {

class SuiTransferBoxPOD : public SuiBoxPOD {
public:
	Optional<String> lblFrom;

	Optional<String> lblStartingFrom;

	Optional<String> lblInputFrom;

	Optional<String> lblTo;

	Optional<String> lblStartingTo;

	Optional<String> lblInputTo;

	Optional<String> convertRatioFrom;

	Optional<String> convertRatioTo;

	String _className;
	SuiTransferBoxPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~SuiTransferBoxPOD();

};

} // namespace messagebox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::messagebox;

#endif /*SUITRANSFERBOXPOD_H_*/
