/*
 *	autogen/server/zone/objects/player/sui/SuiBox.cpp generated by engine3 IDL compiler 0.70
 */

#include "SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/structure/StructureObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

/*
 *	SuiBoxStub
 */

enum {RPC_INITIALIZE__ = 277110457,RPC_FINALIZE__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ADDSETTING__STRING_STRING_STRING_STRING_,RPC_ADDHEADER__STRING_STRING_,RPC_CLEAROPTIONS__,RPC_COMPARETO__SUIBOX_,RPC_HASGENERATEDMESSAGE__,RPC_SETPROMPTTITLE__STRING_,RPC_SETPROMPTTEXT__STRING_,RPC_GETPROMPTTITLE__,RPC_SETHANDLERTEXT__STRING_,RPC_SETWINDOWTYPE__INT_,RPC_SETBOXTYPE__INT_,RPC_ISINPUTBOX__,RPC_ISLISTBOX__,RPC_ISFIREWORKDELAYBOX__,RPC_ISMESSAGEBOX__,RPC_ISTRANSFERBOX__,RPC_ISBANKTRANSFERBOX__,RPC_ISSLICINGBOX__,RPC_ISCHARACTERBUILDERBOX__,RPC_ISCOLORPICKER__,RPC_SETCANCELBUTTON__BOOL_STRING_,RPC_SETOTHERBUTTON__BOOL_STRING_,RPC_SETOKBUTTON__BOOL_STRING_,RPC_SETFORCECLOSEDISTANCE__FLOAT_,RPC_SETFORCECLOSEDISABLED__,RPC_GETPLAYER__,RPC_GETBOXID__,RPC_GETWINDOWTYPE__,RPC_GETUSINGOBJECT__,RPC_SETUSINGOBJECT__SCENEOBJECT_,RPC_GETSTRUCTUREOBJECT__,RPC_SETSTRUCTUREOBJECT__STRUCTUREOBJECT_,RPC_ISSUIBOXPAGE__};

SuiBox::SuiBox(CreatureObject* play, unsigned int windowtype, unsigned int boxtype) : ManagedObject(DummyConstructorParameter::instance()) {
	SuiBoxImplementation* _implementation = new SuiBoxImplementation(play, windowtype, boxtype);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiBox");
}

SuiBox::SuiBox(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("SuiBox");
}

SuiBox::~SuiBox() {
}



void SuiBox::initialize() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initialize();
	}
}

void SuiBox::initializeTransientMembers() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializeTransientMembers();
	}
}

void SuiBox::generateHeader(SuiCreatePageMessage* message) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->generateHeader(message);
	}
}

void SuiBox::generateBody(SuiCreatePageMessage* message) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->generateBody(message);
	}
}

void SuiBox::generateFooter(SuiCreatePageMessage* message, int type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->generateFooter(message, type);
	}
}

BaseMessage* SuiBox::generateMessage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->generateMessage();
	}
}

BaseMessage* SuiBox::generateCloseMessage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->generateCloseMessage();
	}
}

void SuiBox::addSetting(const String& optType, const String& variable, const String& setting, const String& value) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSETTING__STRING_STRING_STRING_STRING_);
		method.addAsciiParameter(optType);
		method.addAsciiParameter(variable);
		method.addAsciiParameter(setting);
		method.addAsciiParameter(value);

		method.executeWithVoidReturn();
	} else {
		_implementation->addSetting(optType, variable, setting, value);
	}
}

void SuiBox::addHeader(const String& variable, const String& type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDHEADER__STRING_STRING_);
		method.addAsciiParameter(variable);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->addHeader(variable, type);
	}
}

void SuiBox::clearOptions() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEAROPTIONS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearOptions();
	}
}

int SuiBox::compareTo(SuiBox* obj) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__SUIBOX_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->compareTo(obj);
	}
}

bool SuiBox::hasGeneratedMessage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASGENERATEDMESSAGE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasGeneratedMessage();
	}
}

void SuiBox::setPromptTitle(const String& name) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPROMPTTITLE__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPromptTitle(name);
	}
}

void SuiBox::setPromptText(const String& name) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPROMPTTEXT__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPromptText(name);
	}
}

String SuiBox::getPromptTitle() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPROMPTTITLE__);

		String _return_getPromptTitle;
		method.executeWithAsciiReturn(_return_getPromptTitle);
		return _return_getPromptTitle;
	} else {
		return _implementation->getPromptTitle();
	}
}

void SuiBox::setHandlerText(const String& text) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHANDLERTEXT__STRING_);
		method.addAsciiParameter(text);

		method.executeWithVoidReturn();
	} else {
		_implementation->setHandlerText(text);
	}
}

void SuiBox::setWindowType(unsigned int type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWINDOWTYPE__INT_);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setWindowType(type);
	}
}

void SuiBox::setBoxType(int type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBOXTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else {
		_implementation->setBoxType(type);
	}
}

bool SuiBox::isInputBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINPUTBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInputBox();
	}
}

bool SuiBox::isListBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLISTBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isListBox();
	}
}

bool SuiBox::isFireworkDelayBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFIREWORKDELAYBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFireworkDelayBox();
	}
}

bool SuiBox::isMessageBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMESSAGEBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isMessageBox();
	}
}

bool SuiBox::isTransferBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRANSFERBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isTransferBox();
	}
}

bool SuiBox::isBankTransferBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBANKTRANSFERBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isBankTransferBox();
	}
}

bool SuiBox::isSlicingBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICINGBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSlicingBox();
	}
}

bool SuiBox::isCharacterBuilderBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCHARACTERBUILDERBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isCharacterBuilderBox();
	}
}

bool SuiBox::isColorPicker() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOLORPICKER__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isColorPicker();
	}
}

void SuiBox::setCancelButton(bool value, const String& cancelText) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCANCELBUTTON__BOOL_STRING_);
		method.addBooleanParameter(value);
		method.addAsciiParameter(cancelText);

		method.executeWithVoidReturn();
	} else {
		_implementation->setCancelButton(value, cancelText);
	}
}

void SuiBox::setOtherButton(bool value, const String& backText) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOTHERBUTTON__BOOL_STRING_);
		method.addBooleanParameter(value);
		method.addAsciiParameter(backText);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOtherButton(value, backText);
	}
}

void SuiBox::setOkButton(bool value, const String& okText) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOKBUTTON__BOOL_STRING_);
		method.addBooleanParameter(value);
		method.addAsciiParameter(okText);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOkButton(value, okText);
	}
}

void SuiBox::setForceCloseDistance(float dist) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORCECLOSEDISTANCE__FLOAT_);
		method.addFloatParameter(dist);

		method.executeWithVoidReturn();
	} else {
		_implementation->setForceCloseDistance(dist);
	}
}

void SuiBox::setForceCloseDisabled() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORCECLOSEDISABLED__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setForceCloseDisabled();
	}
}

ManagedWeakReference<CreatureObject* > SuiBox::getPlayer() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPlayer();
	}
}

unsigned int SuiBox::getBoxID() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBOXID__);

		return method.executeWithUnsignedIntReturn();
	} else {
		return _implementation->getBoxID();
	}
}

int SuiBox::getWindowType() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWINDOWTYPE__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getWindowType();
	}
}

ManagedWeakReference<SceneObject* > SuiBox::getUsingObject() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUSINGOBJECT__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getUsingObject();
	}
}

void SuiBox::setUsingObject(SceneObject* object) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSINGOBJECT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else {
		_implementation->setUsingObject(object);
	}
}

ManagedWeakReference<StructureObject* > SuiBox::getStructureObject() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTRUCTUREOBJECT__);

		return static_cast<StructureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getStructureObject();
	}
}

void SuiBox::setStructureObject(StructureObject* structure) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTRUCTUREOBJECT__STRUCTUREOBJECT_);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else {
		_implementation->setStructureObject(structure);
	}
}

void SuiBox::setCallback(SuiCallback* callback) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setCallback(callback);
	}
}

SuiCallback* SuiBox::getCallback() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCallback();
	}
}

bool SuiBox::isSuiBoxPage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSUIBOXPAGE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isSuiBoxPage();
	}
}

DistributedObjectServant* SuiBox::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SuiBox::_getImplementationForRead() const {
	return _impl;
}

void SuiBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiBoxImplementation
 */

SuiBoxImplementation::SuiBoxImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


SuiBoxImplementation::~SuiBoxImplementation() {
	SuiBoxImplementation::finalize();
}


void SuiBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiBoxHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiBox*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SuiBoxImplementation::_getStub() {
	return _this.get();
}

SuiBoxImplementation::operator const SuiBox*() {
	return _this.get();
}

void SuiBoxImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiBoxImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiBoxImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiBoxImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiBoxImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiBoxImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiBoxImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiBoxImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("SuiBox");

}

void SuiBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiBoxImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiBoxImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x68aa8f23: //SuiBox.player
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;

	case 0xdebde43d: //SuiBox.suiCallback
		TypeInfo<Reference<SuiCallback* > >::parseFromBinaryStream(&suiCallback, stream);
		return true;

	case 0x4643db2c: //SuiBox.boxID
		TypeInfo<unsigned int >::parseFromBinaryStream(&boxID, stream);
		return true;

	case 0xed36e132: //SuiBox.usingObject
		TypeInfo<ManagedWeakReference<SceneObject* > >::parseFromBinaryStream(&usingObject, stream);
		return true;

	case 0x39c55065: //SuiBox.structureObject
		TypeInfo<ManagedWeakReference<StructureObject* > >::parseFromBinaryStream(&structureObject, stream);
		return true;

	case 0xc45c8ae2: //SuiBox.handlerStr
		TypeInfo<String >::parseFromBinaryStream(&handlerStr, stream);
		return true;

	case 0xfcc7d2b6: //SuiBox.cancelButtonText
		TypeInfo<String >::parseFromBinaryStream(&cancelButtonText, stream);
		return true;

	case 0xcaa399ec: //SuiBox.cancelButton
		TypeInfo<bool >::parseFromBinaryStream(&cancelButton, stream);
		return true;

	case 0xbfdef345: //SuiBox.okButtonText
		TypeInfo<String >::parseFromBinaryStream(&okButtonText, stream);
		return true;

	case 0x1532319b: //SuiBox.okButton
		TypeInfo<bool >::parseFromBinaryStream(&okButton, stream);
		return true;

	case 0x81434ff3: //SuiBox.otherButtonText
		TypeInfo<String >::parseFromBinaryStream(&otherButtonText, stream);
		return true;

	case 0x1720842a: //SuiBox.otherButton
		TypeInfo<bool >::parseFromBinaryStream(&otherButton, stream);
		return true;

	case 0x299fff58: //SuiBox.promptTitle
		TypeInfo<String >::parseFromBinaryStream(&promptTitle, stream);
		return true;

	case 0x854b6043: //SuiBox.promptText
		TypeInfo<String >::parseFromBinaryStream(&promptText, stream);
		return true;

	case 0xf363336b: //SuiBox.boxType
		TypeInfo<int >::parseFromBinaryStream(&boxType, stream);
		return true;

	case 0xcb88a3ae: //SuiBox.windowType
		TypeInfo<unsigned int >::parseFromBinaryStream(&windowType, stream);
		return true;

	case 0xb150a8ab: //SuiBox.forceCloseDistance
		TypeInfo<float >::parseFromBinaryStream(&forceCloseDistance, stream);
		return true;

	case 0xf965e28f: //SuiBox.headerSets
		TypeInfo<Vector<String> >::parseFromBinaryStream(&headerSets, stream);
		return true;

	case 0xccc3dbba: //SuiBox.optionSets
		TypeInfo<Vector<String> >::parseFromBinaryStream(&optionSets, stream);
		return true;

	case 0x61483cc2: //SuiBox.hdrOptCount
		TypeInfo<int >::parseFromBinaryStream(&hdrOptCount, stream);
		return true;

	case 0xa57c3889: //SuiBox.hasGenerated
		TypeInfo<bool >::parseFromBinaryStream(&hasGenerated, stream);
		return true;

	}

	return false;
}

void SuiBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x68aa8f23; //SuiBox.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xdebde43d; //SuiBox.suiCallback
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<SuiCallback* > >::toBinaryStream(&suiCallback, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x4643db2c; //SuiBox.boxID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&boxID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xed36e132; //SuiBox.usingObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<SceneObject* > >::toBinaryStream(&usingObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x39c55065; //SuiBox.structureObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<StructureObject* > >::toBinaryStream(&structureObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xc45c8ae2; //SuiBox.handlerStr
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&handlerStr, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xfcc7d2b6; //SuiBox.cancelButtonText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&cancelButtonText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xcaa399ec; //SuiBox.cancelButton
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cancelButton, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xbfdef345; //SuiBox.okButtonText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&okButtonText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1532319b; //SuiBox.okButton
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&okButton, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x81434ff3; //SuiBox.otherButtonText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&otherButtonText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1720842a; //SuiBox.otherButton
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&otherButton, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x299fff58; //SuiBox.promptTitle
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&promptTitle, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x854b6043; //SuiBox.promptText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&promptText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf363336b; //SuiBox.boxType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&boxType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xcb88a3ae; //SuiBox.windowType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&windowType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb150a8ab; //SuiBox.forceCloseDistance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&forceCloseDistance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf965e28f; //SuiBox.headerSets
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&headerSets, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xccc3dbba; //SuiBox.optionSets
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&optionSets, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x61483cc2; //SuiBox.hdrOptCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&hdrOptCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa57c3889; //SuiBox.hasGenerated
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&hasGenerated, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

SuiBoxImplementation::SuiBoxImplementation(CreatureObject* play, unsigned int windowtype, unsigned int boxtype) {
	_initializeImplementation();
	// server/zone/objects/player/sui/SuiBox.idl():  		player = play;
	player = play;
	// server/zone/objects/player/sui/SuiBox.idl():  		forceCloseDistance = 32;
	forceCloseDistance = 32;
	// server/zone/objects/player/sui/SuiBox.idl():  		boxType = boxtype;
	boxType = boxtype;
	// server/zone/objects/player/sui/SuiBox.idl():  		windowType = windowtype;
	windowType = windowtype;
	// server/zone/objects/player/sui/SuiBox.idl():  		initialize();
	initialize();
}

void SuiBoxImplementation::initialize() {
	// server/zone/objects/player/sui/SuiBox.idl():  		Logger.setLoggingName("SuiBox");
	Logger::setLoggingName("SuiBox");
	// server/zone/objects/player/sui/SuiBox.idl():  		CreatureObject strongRef = player;
	ManagedReference<CreatureObject* > strongRef = player;
	// server/zone/objects/player/sui/SuiBox.idl():  		handlerStr 
	if (strongRef){
	// server/zone/objects/player/sui/SuiBox.idl():  			PlayerObject ghost = strongRef.getPlayerObject();
	ManagedReference<PlayerObject* > ghost = strongRef->getPlayerObject();
	// server/zone/objects/player/sui/SuiBox.idl():  		}
	if (ghost){
	// server/zone/objects/player/sui/SuiBox.idl():  				boxID = ghost.getNewSuiBoxID(windowType);
	boxID = ghost->getNewSuiBoxID(windowType);
}
}
	// server/zone/objects/player/sui/SuiBox.idl():  		handlerStr = "msgSelected";
	handlerStr = "msgSelected";
	// server/zone/objects/player/sui/SuiBox.idl():  		cancelButtonText = "@cancel";
	cancelButtonText = "@cancel";
	// server/zone/objects/player/sui/SuiBox.idl():  		cancelButton = false;
	cancelButton = false;
	// server/zone/objects/player/sui/SuiBox.idl():  		otherButtonText = "@back";
	otherButtonText = "@back";
	// server/zone/objects/player/sui/SuiBox.idl():  		otherButton = false;
	otherButton = false;
	// server/zone/objects/player/sui/SuiBox.idl():  		okButtonText = "@ok";
	okButtonText = "@ok";
	// server/zone/objects/player/sui/SuiBox.idl():  		okButton = true;
	okButton = true;
	// server/zone/objects/player/sui/SuiBox.idl():  		hdrOptCount = 0;
	hdrOptCount = 0;
	// server/zone/objects/player/sui/SuiBox.idl():  		hasGenerated = false;
	hasGenerated = false;
	// server/zone/objects/player/sui/SuiBox.idl():  		suiCallback = null;
	suiCallback = NULL;
}

void SuiBoxImplementation::finalize() {
}

void SuiBoxImplementation::initializeTransientMembers() {
	// server/zone/objects/player/sui/SuiBox.idl():  		super.initializeTransientMembers();
	ManagedObjectImplementation::initializeTransientMembers();
}

BaseMessage* SuiBoxImplementation::generateMessage() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return null;
	return NULL;
}

void SuiBoxImplementation::clearOptions() {
	// server/zone/objects/player/sui/SuiBox.idl():  		headerSets.removeAll();
	(&headerSets)->removeAll();
	// server/zone/objects/player/sui/SuiBox.idl():  		hdrOptCount = 0;
	hdrOptCount = 0;
	// server/zone/objects/player/sui/SuiBox.idl():  		optionSets.removeAll();
	(&optionSets)->removeAll();
}

int SuiBoxImplementation::compareTo(SuiBox* obj) {
	// server/zone/objects/player/sui/SuiBox.idl():  		unsigned int id = obj.getBoxID();
	unsigned int id = obj->getBoxID();
	// server/zone/objects/player/sui/SuiBox.idl():  			return 0;
	if (boxID < id)	// server/zone/objects/player/sui/SuiBox.idl():  			return 1;
	return 1;

	else 	// server/zone/objects/player/sui/SuiBox.idl():  			return 0;
	if (boxID > id)	// server/zone/objects/player/sui/SuiBox.idl():  			return -1;
	return -1;

	else 	// server/zone/objects/player/sui/SuiBox.idl():  			return 0;
	return 0;
}

bool SuiBoxImplementation::hasGeneratedMessage() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return hasGenerated;
	return hasGenerated;
}

void SuiBoxImplementation::setPromptTitle(const String& name) {
	// server/zone/objects/player/sui/SuiBox.idl():  		promptTitle = name;
	promptTitle = name;
}

void SuiBoxImplementation::setPromptText(const String& name) {
	// server/zone/objects/player/sui/SuiBox.idl():  		promptText = name;
	promptText = name;
}

String SuiBoxImplementation::getPromptTitle() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return promptTitle;
	return promptTitle;
}

void SuiBoxImplementation::setHandlerText(const String& text) {
	// server/zone/objects/player/sui/SuiBox.idl():  		handlerStr = text;
	handlerStr = text;
}

void SuiBoxImplementation::setWindowType(unsigned int type) {
	// server/zone/objects/player/sui/SuiBox.idl():  		windowType = type;
	windowType = type;
}

void SuiBoxImplementation::setBoxType(int type) {
	// server/zone/objects/player/sui/SuiBox.idl():  		boxType = type;
	boxType = type;
}

bool SuiBoxImplementation::isInputBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isListBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isFireworkDelayBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isMessageBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isTransferBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isBankTransferBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isSlicingBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isCharacterBuilderBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isColorPicker() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

ManagedWeakReference<CreatureObject* > SuiBoxImplementation::getPlayer() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return player;
	return player;
}

unsigned int SuiBoxImplementation::getBoxID() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return boxID;
	return boxID;
}

int SuiBoxImplementation::getWindowType() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return windowType;
	return windowType;
}

ManagedWeakReference<SceneObject* > SuiBoxImplementation::getUsingObject() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return usingObject;
	return usingObject;
}

void SuiBoxImplementation::setUsingObject(SceneObject* object) {
	// server/zone/objects/player/sui/SuiBox.idl():  		usingObject = object;
	usingObject = object;
}

ManagedWeakReference<StructureObject* > SuiBoxImplementation::getStructureObject() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return structureObject;
	return structureObject;
}

void SuiBoxImplementation::setStructureObject(StructureObject* structure) {
	// server/zone/objects/player/sui/SuiBox.idl():  		structureObject = structure;
	structureObject = structure;
}

void SuiBoxImplementation::setCallback(SuiCallback* callback) {
	// server/zone/objects/player/sui/SuiBox.idl():  		suiCallback = callback;
	suiCallback = callback;
}

SuiCallback* SuiBoxImplementation::getCallback() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return suiCallback;
	return suiCallback;
}

bool SuiBoxImplementation::isSuiBoxPage() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

/*
 *	SuiBoxAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiBoxAdapter::SuiBoxAdapter(SuiBox* obj) : ManagedObjectAdapter(obj) {
}

void SuiBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			
			initialize();
			
		}
		break;
	case RPC_FINALIZE__:
		{
			
			finalize();
			
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			
			initializeTransientMembers();
			
		}
		break;
	case RPC_ADDSETTING__STRING_STRING_STRING_STRING_:
		{
			 String optType; inv->getAsciiParameter(optType);
			 String variable; inv->getAsciiParameter(variable);
			 String setting; inv->getAsciiParameter(setting);
			 String value; inv->getAsciiParameter(value);
			
			addSetting(optType, variable, setting, value);
			
		}
		break;
	case RPC_ADDHEADER__STRING_STRING_:
		{
			 String variable; inv->getAsciiParameter(variable);
			 String type; inv->getAsciiParameter(type);
			
			addHeader(variable, type);
			
		}
		break;
	case RPC_CLEAROPTIONS__:
		{
			
			clearOptions();
			
		}
		break;
	case RPC_COMPARETO__SUIBOX_:
		{
			SuiBox* obj = static_cast<SuiBox*>(inv->getObjectParameter());
			
			int _m_res = compareTo(obj);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HASGENERATEDMESSAGE__:
		{
			
			bool _m_res = hasGeneratedMessage();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETPROMPTTITLE__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setPromptTitle(name);
			
		}
		break;
	case RPC_SETPROMPTTEXT__STRING_:
		{
			 String name; inv->getAsciiParameter(name);
			
			setPromptText(name);
			
		}
		break;
	case RPC_GETPROMPTTITLE__:
		{
			
			String _m_res = getPromptTitle();
			resp->insertAscii(_m_res);
		}
		break;
	case RPC_SETHANDLERTEXT__STRING_:
		{
			 String text; inv->getAsciiParameter(text);
			
			setHandlerText(text);
			
		}
		break;
	case RPC_SETWINDOWTYPE__INT_:
		{
			unsigned int type = inv->getUnsignedIntParameter();
			
			setWindowType(type);
			
		}
		break;
	case RPC_SETBOXTYPE__INT_:
		{
			int type = inv->getSignedIntParameter();
			
			setBoxType(type);
			
		}
		break;
	case RPC_ISINPUTBOX__:
		{
			
			bool _m_res = isInputBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISLISTBOX__:
		{
			
			bool _m_res = isListBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISFIREWORKDELAYBOX__:
		{
			
			bool _m_res = isFireworkDelayBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISMESSAGEBOX__:
		{
			
			bool _m_res = isMessageBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISTRANSFERBOX__:
		{
			
			bool _m_res = isTransferBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISBANKTRANSFERBOX__:
		{
			
			bool _m_res = isBankTransferBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISSLICINGBOX__:
		{
			
			bool _m_res = isSlicingBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCHARACTERBUILDERBOX__:
		{
			
			bool _m_res = isCharacterBuilderBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISCOLORPICKER__:
		{
			
			bool _m_res = isColorPicker();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETCANCELBUTTON__BOOL_STRING_:
		{
			bool value = inv->getBooleanParameter();
			 String cancelText; inv->getAsciiParameter(cancelText);
			
			setCancelButton(value, cancelText);
			
		}
		break;
	case RPC_SETOTHERBUTTON__BOOL_STRING_:
		{
			bool value = inv->getBooleanParameter();
			 String backText; inv->getAsciiParameter(backText);
			
			setOtherButton(value, backText);
			
		}
		break;
	case RPC_SETOKBUTTON__BOOL_STRING_:
		{
			bool value = inv->getBooleanParameter();
			 String okText; inv->getAsciiParameter(okText);
			
			setOkButton(value, okText);
			
		}
		break;
	case RPC_SETFORCECLOSEDISTANCE__FLOAT_:
		{
			float dist = inv->getFloatParameter();
			
			setForceCloseDistance(dist);
			
		}
		break;
	case RPC_SETFORCECLOSEDISABLED__:
		{
			
			setForceCloseDisabled();
			
		}
		break;
	case RPC_GETPLAYER__:
		{
			
			DistributedObject* _m_res = getPlayer().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETBOXID__:
		{
			
			unsigned int _m_res = getBoxID();
			resp->insertInt(_m_res);
		}
		break;
	case RPC_GETWINDOWTYPE__:
		{
			
			int _m_res = getWindowType();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETUSINGOBJECT__:
		{
			
			DistributedObject* _m_res = getUsingObject().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETUSINGOBJECT__SCENEOBJECT_:
		{
			SceneObject* object = static_cast<SceneObject*>(inv->getObjectParameter());
			
			setUsingObject(object);
			
		}
		break;
	case RPC_GETSTRUCTUREOBJECT__:
		{
			
			DistributedObject* _m_res = getStructureObject().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_SETSTRUCTUREOBJECT__STRUCTUREOBJECT_:
		{
			StructureObject* structure = static_cast<StructureObject*>(inv->getObjectParameter());
			
			setStructureObject(structure);
			
		}
		break;
	case RPC_ISSUIBOXPAGE__:
		{
			
			bool _m_res = isSuiBoxPage();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void SuiBoxAdapter::initialize() {
	(static_cast<SuiBox*>(stub))->initialize();
}

void SuiBoxAdapter::finalize() {
	(static_cast<SuiBox*>(stub))->finalize();
}

void SuiBoxAdapter::initializeTransientMembers() {
	(static_cast<SuiBox*>(stub))->initializeTransientMembers();
}

void SuiBoxAdapter::addSetting(const String& optType, const String& variable, const String& setting, const String& value) {
	(static_cast<SuiBox*>(stub))->addSetting(optType, variable, setting, value);
}

void SuiBoxAdapter::addHeader(const String& variable, const String& type) {
	(static_cast<SuiBox*>(stub))->addHeader(variable, type);
}

void SuiBoxAdapter::clearOptions() {
	(static_cast<SuiBox*>(stub))->clearOptions();
}

int SuiBoxAdapter::compareTo(SuiBox* obj) {
	return (static_cast<SuiBox*>(stub))->compareTo(obj);
}

bool SuiBoxAdapter::hasGeneratedMessage() {
	return (static_cast<SuiBox*>(stub))->hasGeneratedMessage();
}

void SuiBoxAdapter::setPromptTitle(const String& name) {
	(static_cast<SuiBox*>(stub))->setPromptTitle(name);
}

void SuiBoxAdapter::setPromptText(const String& name) {
	(static_cast<SuiBox*>(stub))->setPromptText(name);
}

String SuiBoxAdapter::getPromptTitle() {
	return (static_cast<SuiBox*>(stub))->getPromptTitle();
}

void SuiBoxAdapter::setHandlerText(const String& text) {
	(static_cast<SuiBox*>(stub))->setHandlerText(text);
}

void SuiBoxAdapter::setWindowType(unsigned int type) {
	(static_cast<SuiBox*>(stub))->setWindowType(type);
}

void SuiBoxAdapter::setBoxType(int type) {
	(static_cast<SuiBox*>(stub))->setBoxType(type);
}

bool SuiBoxAdapter::isInputBox() {
	return (static_cast<SuiBox*>(stub))->isInputBox();
}

bool SuiBoxAdapter::isListBox() {
	return (static_cast<SuiBox*>(stub))->isListBox();
}

bool SuiBoxAdapter::isFireworkDelayBox() {
	return (static_cast<SuiBox*>(stub))->isFireworkDelayBox();
}

bool SuiBoxAdapter::isMessageBox() {
	return (static_cast<SuiBox*>(stub))->isMessageBox();
}

bool SuiBoxAdapter::isTransferBox() {
	return (static_cast<SuiBox*>(stub))->isTransferBox();
}

bool SuiBoxAdapter::isBankTransferBox() {
	return (static_cast<SuiBox*>(stub))->isBankTransferBox();
}

bool SuiBoxAdapter::isSlicingBox() {
	return (static_cast<SuiBox*>(stub))->isSlicingBox();
}

bool SuiBoxAdapter::isCharacterBuilderBox() {
	return (static_cast<SuiBox*>(stub))->isCharacterBuilderBox();
}

bool SuiBoxAdapter::isColorPicker() {
	return (static_cast<SuiBox*>(stub))->isColorPicker();
}

void SuiBoxAdapter::setCancelButton(bool value, const String& cancelText) {
	(static_cast<SuiBox*>(stub))->setCancelButton(value, cancelText);
}

void SuiBoxAdapter::setOtherButton(bool value, const String& backText) {
	(static_cast<SuiBox*>(stub))->setOtherButton(value, backText);
}

void SuiBoxAdapter::setOkButton(bool value, const String& okText) {
	(static_cast<SuiBox*>(stub))->setOkButton(value, okText);
}

void SuiBoxAdapter::setForceCloseDistance(float dist) {
	(static_cast<SuiBox*>(stub))->setForceCloseDistance(dist);
}

void SuiBoxAdapter::setForceCloseDisabled() {
	(static_cast<SuiBox*>(stub))->setForceCloseDisabled();
}

ManagedWeakReference<CreatureObject* > SuiBoxAdapter::getPlayer() {
	return (static_cast<SuiBox*>(stub))->getPlayer();
}

unsigned int SuiBoxAdapter::getBoxID() {
	return (static_cast<SuiBox*>(stub))->getBoxID();
}

int SuiBoxAdapter::getWindowType() {
	return (static_cast<SuiBox*>(stub))->getWindowType();
}

ManagedWeakReference<SceneObject* > SuiBoxAdapter::getUsingObject() {
	return (static_cast<SuiBox*>(stub))->getUsingObject();
}

void SuiBoxAdapter::setUsingObject(SceneObject* object) {
	(static_cast<SuiBox*>(stub))->setUsingObject(object);
}

ManagedWeakReference<StructureObject* > SuiBoxAdapter::getStructureObject() {
	return (static_cast<SuiBox*>(stub))->getStructureObject();
}

void SuiBoxAdapter::setStructureObject(StructureObject* structure) {
	(static_cast<SuiBox*>(stub))->setStructureObject(structure);
}

bool SuiBoxAdapter::isSuiBoxPage() {
	return (static_cast<SuiBox*>(stub))->isSuiBoxPage();
}

/*
 *	SuiBoxHelper
 */

SuiBoxHelper* SuiBoxHelper::staticInitializer = SuiBoxHelper::instance();

SuiBoxHelper::SuiBoxHelper() {
	className = "SuiBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiBoxHelper::finalizeHelper() {
	SuiBoxHelper::finalize();
}

DistributedObject* SuiBoxHelper::instantiateObject() {
	return new SuiBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiBoxHelper::instantiateServant() {
	return new SuiBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* SuiBoxHelper::instantiatePOD() {
	return new SuiBoxPOD();
}

DistributedObjectAdapter* SuiBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiBoxAdapter(static_cast<SuiBox*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SuiBoxPOD
 */

SuiBoxPOD::~SuiBoxPOD() {
	finalize();
}

SuiBoxPOD::SuiBoxPOD(void) {
	_className = "SuiBox";
}


void SuiBoxPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiBoxPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiBoxPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (player) {
	_nameHashCode = 0x68aa8f23; //SuiBox.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (suiCallback) {
	_nameHashCode = 0xdebde43d; //SuiBox.suiCallback
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<SuiCallback* > >::toBinaryStream(&suiCallback.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (boxID) {
	_nameHashCode = 0x4643db2c; //SuiBox.boxID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&boxID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (usingObject) {
	_nameHashCode = 0xed36e132; //SuiBox.usingObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<SceneObjectPOD* > >::toBinaryStream(&usingObject.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (structureObject) {
	_nameHashCode = 0x39c55065; //SuiBox.structureObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<StructureObjectPOD* > >::toBinaryStream(&structureObject.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (handlerStr) {
	_nameHashCode = 0xc45c8ae2; //SuiBox.handlerStr
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&handlerStr.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (cancelButtonText) {
	_nameHashCode = 0xfcc7d2b6; //SuiBox.cancelButtonText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&cancelButtonText.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (cancelButton) {
	_nameHashCode = 0xcaa399ec; //SuiBox.cancelButton
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cancelButton.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (okButtonText) {
	_nameHashCode = 0xbfdef345; //SuiBox.okButtonText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&okButtonText.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (okButton) {
	_nameHashCode = 0x1532319b; //SuiBox.okButton
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&okButton.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (otherButtonText) {
	_nameHashCode = 0x81434ff3; //SuiBox.otherButtonText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&otherButtonText.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (otherButton) {
	_nameHashCode = 0x1720842a; //SuiBox.otherButton
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&otherButton.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (promptTitle) {
	_nameHashCode = 0x299fff58; //SuiBox.promptTitle
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&promptTitle.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (promptText) {
	_nameHashCode = 0x854b6043; //SuiBox.promptText
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&promptText.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (boxType) {
	_nameHashCode = 0xf363336b; //SuiBox.boxType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&boxType.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (windowType) {
	_nameHashCode = 0xcb88a3ae; //SuiBox.windowType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&windowType.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (forceCloseDistance) {
	_nameHashCode = 0xb150a8ab; //SuiBox.forceCloseDistance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&forceCloseDistance.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (headerSets) {
	_nameHashCode = 0xf965e28f; //SuiBox.headerSets
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&headerSets.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (optionSets) {
	_nameHashCode = 0xccc3dbba; //SuiBox.optionSets
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&optionSets.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (hdrOptCount) {
	_nameHashCode = 0x61483cc2; //SuiBox.hdrOptCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&hdrOptCount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (hasGenerated) {
	_nameHashCode = 0xa57c3889; //SuiBox.hasGenerated
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&hasGenerated.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool SuiBoxPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x68aa8f23: //SuiBox.player
		{
			ManagedWeakReference<CreatureObjectPOD* > _mnplayer;
			TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::parseFromBinaryStream(&_mnplayer, stream);
			player = std::move(_mnplayer);
		}
		return true;

	case 0xdebde43d: //SuiBox.suiCallback
		{
			Reference<SuiCallback* > _mnsuiCallback;
			TypeInfo<Reference<SuiCallback* > >::parseFromBinaryStream(&_mnsuiCallback, stream);
			suiCallback = std::move(_mnsuiCallback);
		}
		return true;

	case 0x4643db2c: //SuiBox.boxID
		{
			unsigned int _mnboxID;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mnboxID, stream);
			boxID = std::move(_mnboxID);
		}
		return true;

	case 0xed36e132: //SuiBox.usingObject
		{
			ManagedWeakReference<SceneObjectPOD* > _mnusingObject;
			TypeInfo<ManagedWeakReference<SceneObjectPOD* > >::parseFromBinaryStream(&_mnusingObject, stream);
			usingObject = std::move(_mnusingObject);
		}
		return true;

	case 0x39c55065: //SuiBox.structureObject
		{
			ManagedWeakReference<StructureObjectPOD* > _mnstructureObject;
			TypeInfo<ManagedWeakReference<StructureObjectPOD* > >::parseFromBinaryStream(&_mnstructureObject, stream);
			structureObject = std::move(_mnstructureObject);
		}
		return true;

	case 0xc45c8ae2: //SuiBox.handlerStr
		{
			String _mnhandlerStr;
			TypeInfo<String >::parseFromBinaryStream(&_mnhandlerStr, stream);
			handlerStr = std::move(_mnhandlerStr);
		}
		return true;

	case 0xfcc7d2b6: //SuiBox.cancelButtonText
		{
			String _mncancelButtonText;
			TypeInfo<String >::parseFromBinaryStream(&_mncancelButtonText, stream);
			cancelButtonText = std::move(_mncancelButtonText);
		}
		return true;

	case 0xcaa399ec: //SuiBox.cancelButton
		{
			bool _mncancelButton;
			TypeInfo<bool >::parseFromBinaryStream(&_mncancelButton, stream);
			cancelButton = std::move(_mncancelButton);
		}
		return true;

	case 0xbfdef345: //SuiBox.okButtonText
		{
			String _mnokButtonText;
			TypeInfo<String >::parseFromBinaryStream(&_mnokButtonText, stream);
			okButtonText = std::move(_mnokButtonText);
		}
		return true;

	case 0x1532319b: //SuiBox.okButton
		{
			bool _mnokButton;
			TypeInfo<bool >::parseFromBinaryStream(&_mnokButton, stream);
			okButton = std::move(_mnokButton);
		}
		return true;

	case 0x81434ff3: //SuiBox.otherButtonText
		{
			String _mnotherButtonText;
			TypeInfo<String >::parseFromBinaryStream(&_mnotherButtonText, stream);
			otherButtonText = std::move(_mnotherButtonText);
		}
		return true;

	case 0x1720842a: //SuiBox.otherButton
		{
			bool _mnotherButton;
			TypeInfo<bool >::parseFromBinaryStream(&_mnotherButton, stream);
			otherButton = std::move(_mnotherButton);
		}
		return true;

	case 0x299fff58: //SuiBox.promptTitle
		{
			String _mnpromptTitle;
			TypeInfo<String >::parseFromBinaryStream(&_mnpromptTitle, stream);
			promptTitle = std::move(_mnpromptTitle);
		}
		return true;

	case 0x854b6043: //SuiBox.promptText
		{
			String _mnpromptText;
			TypeInfo<String >::parseFromBinaryStream(&_mnpromptText, stream);
			promptText = std::move(_mnpromptText);
		}
		return true;

	case 0xf363336b: //SuiBox.boxType
		{
			int _mnboxType;
			TypeInfo<int >::parseFromBinaryStream(&_mnboxType, stream);
			boxType = std::move(_mnboxType);
		}
		return true;

	case 0xcb88a3ae: //SuiBox.windowType
		{
			unsigned int _mnwindowType;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mnwindowType, stream);
			windowType = std::move(_mnwindowType);
		}
		return true;

	case 0xb150a8ab: //SuiBox.forceCloseDistance
		{
			float _mnforceCloseDistance;
			TypeInfo<float >::parseFromBinaryStream(&_mnforceCloseDistance, stream);
			forceCloseDistance = std::move(_mnforceCloseDistance);
		}
		return true;

	case 0xf965e28f: //SuiBox.headerSets
		{
			Vector<String> _mnheaderSets;
			TypeInfo<Vector<String> >::parseFromBinaryStream(&_mnheaderSets, stream);
			headerSets = std::move(_mnheaderSets);
		}
		return true;

	case 0xccc3dbba: //SuiBox.optionSets
		{
			Vector<String> _mnoptionSets;
			TypeInfo<Vector<String> >::parseFromBinaryStream(&_mnoptionSets, stream);
			optionSets = std::move(_mnoptionSets);
		}
		return true;

	case 0x61483cc2: //SuiBox.hdrOptCount
		{
			int _mnhdrOptCount;
			TypeInfo<int >::parseFromBinaryStream(&_mnhdrOptCount, stream);
			hdrOptCount = std::move(_mnhdrOptCount);
		}
		return true;

	case 0xa57c3889: //SuiBox.hasGenerated
		{
			bool _mnhasGenerated;
			TypeInfo<bool >::parseFromBinaryStream(&_mnhasGenerated, stream);
			hasGenerated = std::move(_mnhasGenerated);
		}
		return true;

	}

	return false;
}

void SuiBoxPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiBoxPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void SuiBoxPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);

	TypeInfo<Reference<SuiCallback* > >::toBinaryStream(&suiCallback.value(), stream);

	TypeInfo<unsigned int >::toBinaryStream(&boxID.value(), stream);

	TypeInfo<ManagedWeakReference<SceneObjectPOD* > >::toBinaryStream(&usingObject.value(), stream);

	TypeInfo<ManagedWeakReference<StructureObjectPOD* > >::toBinaryStream(&structureObject.value(), stream);

	TypeInfo<String >::toBinaryStream(&handlerStr.value(), stream);

	TypeInfo<String >::toBinaryStream(&cancelButtonText.value(), stream);

	TypeInfo<bool >::toBinaryStream(&cancelButton.value(), stream);

	TypeInfo<String >::toBinaryStream(&okButtonText.value(), stream);

	TypeInfo<bool >::toBinaryStream(&okButton.value(), stream);

	TypeInfo<String >::toBinaryStream(&otherButtonText.value(), stream);

	TypeInfo<bool >::toBinaryStream(&otherButton.value(), stream);

	TypeInfo<String >::toBinaryStream(&promptTitle.value(), stream);

	TypeInfo<String >::toBinaryStream(&promptText.value(), stream);

	TypeInfo<int >::toBinaryStream(&boxType.value(), stream);

	TypeInfo<unsigned int >::toBinaryStream(&windowType.value(), stream);

	TypeInfo<float >::toBinaryStream(&forceCloseDistance.value(), stream);

	TypeInfo<Vector<String> >::toBinaryStream(&headerSets.value(), stream);

	TypeInfo<Vector<String> >::toBinaryStream(&optionSets.value(), stream);

	TypeInfo<int >::toBinaryStream(&hdrOptCount.value(), stream);

	TypeInfo<bool >::toBinaryStream(&hasGenerated.value(), stream);


}

