/*
 *	autogen/server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.h generated by engine3 IDL compiler 0.70
 */

#ifndef SUICHARACTERBUILDERBOX_H_
#define SUICHARACTERBUILDERBOX_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "templates/tangible/CharacterBuilderMenuNode.h"

#include "server/zone/objects/player/sui/SuiWindowType.h"

#include "engine/service/proto/BaseMessage.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace characterbuilderbox {

class SuiCharacterBuilderBox : public SuiListBox {
public:
	SuiCharacterBuilderBox(CreatureObject* player, const CharacterBuilderMenuNode* root);

	BaseMessage* generateMessage();

	const CharacterBuilderMenuNode* getCurrentNode();

	void setCurrentNode(const CharacterBuilderMenuNode* node);

	bool isCharacterBuilderBox();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SuiCharacterBuilderBox(DummyConstructorParameter* param);

	virtual ~SuiCharacterBuilderBox();

	friend class SuiCharacterBuilderBoxHelper;
};

} // namespace characterbuilderbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::characterbuilderbox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace characterbuilderbox {

class SuiCharacterBuilderBoxImplementation : public SuiListBoxImplementation {
protected:
	Reference<const CharacterBuilderMenuNode* > rootNode;

	Reference<const CharacterBuilderMenuNode* > currentNode;

public:
	SuiCharacterBuilderBoxImplementation(CreatureObject* player, const CharacterBuilderMenuNode* root);

	SuiCharacterBuilderBoxImplementation(DummyConstructorParameter* param);

	BaseMessage* generateMessage();

	const CharacterBuilderMenuNode* getCurrentNode();

	void setCurrentNode(const CharacterBuilderMenuNode* node);

	bool isCharacterBuilderBox();

	WeakReference<SuiCharacterBuilderBox*> _this;

	operator const SuiCharacterBuilderBox*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~SuiCharacterBuilderBoxImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SuiCharacterBuilderBox;
};

class SuiCharacterBuilderBoxAdapter : public SuiListBoxAdapter {
public:
	SuiCharacterBuilderBoxAdapter(SuiCharacterBuilderBox* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isCharacterBuilderBox();

};

class SuiCharacterBuilderBoxHelper : public DistributedObjectClassHelper, public Singleton<SuiCharacterBuilderBoxHelper> {
	static SuiCharacterBuilderBoxHelper* staticInitializer;

public:
	SuiCharacterBuilderBoxHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SuiCharacterBuilderBoxHelper>;
};

} // namespace characterbuilderbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::characterbuilderbox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace characterbuilderbox {

class SuiCharacterBuilderBoxPOD : public SuiListBoxPOD {
public:
	String _className;
	SuiCharacterBuilderBoxPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~SuiCharacterBuilderBoxPOD();

};

} // namespace characterbuilderbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::characterbuilderbox;

#endif /*SUICHARACTERBUILDERBOXPOD_H_*/
