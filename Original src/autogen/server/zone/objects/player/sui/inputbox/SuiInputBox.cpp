/*
 *	autogen/server/zone/objects/player/sui/inputbox/SuiInputBox.cpp generated by engine3 IDL compiler 0.70
 */

#include "SuiInputBox.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SuiInputBoxStub
 */

enum {RPC_SETMAXINPUTSIZE__INT_,RPC_SETDEFAULTINPUT__STRING_,RPC_ISFILTERBOX__,RPC_ISINPUTBOX__};

SuiInputBox::SuiInputBox(CreatureObject* player, unsigned int windowType, int inputtype) : SuiBox(DummyConstructorParameter::instance()) {
	SuiInputBoxImplementation* _implementation = new SuiInputBoxImplementation(player, windowType, inputtype);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiInputBox");
}

SuiInputBox::SuiInputBox(DummyConstructorParameter* param) : SuiBox(param) {
	_setClassName("SuiInputBox");
}

SuiInputBox::~SuiInputBox() {
}



BaseMessage* SuiInputBox::generateMessage() {
	SuiInputBoxImplementation* _implementation = static_cast<SuiInputBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->generateMessage();
	}
}

void SuiInputBox::setMaxInputSize(int size) {
	SuiInputBoxImplementation* _implementation = static_cast<SuiInputBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXINPUTSIZE__INT_);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else {
		_implementation->setMaxInputSize(size);
	}
}

void SuiInputBox::setDefaultInput(const String& text) {
	SuiInputBoxImplementation* _implementation = static_cast<SuiInputBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEFAULTINPUT__STRING_);
		method.addAsciiParameter(text);

		method.executeWithVoidReturn();
	} else {
		_implementation->setDefaultInput(text);
	}
}

bool SuiInputBox::isFilterBox() {
	SuiInputBoxImplementation* _implementation = static_cast<SuiInputBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFILTERBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isFilterBox();
	}
}

bool SuiInputBox::isInputBox() {
	SuiInputBoxImplementation* _implementation = static_cast<SuiInputBoxImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINPUTBOX__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInputBox();
	}
}

DistributedObjectServant* SuiInputBox::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SuiInputBox::_getImplementationForRead() const {
	return _impl;
}

void SuiInputBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiInputBoxImplementation
 */

SuiInputBoxImplementation::SuiInputBoxImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiInputBoxImplementation::~SuiInputBoxImplementation() {
}


void SuiInputBoxImplementation::finalize() {
}

void SuiInputBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiInputBoxHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiInputBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiInputBox*>(stub);
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiInputBoxImplementation::_getStub() {
	return _this.get();
}

SuiInputBoxImplementation::operator const SuiInputBox*() {
	return _this.get();
}

void SuiInputBoxImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiInputBoxImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiInputBoxImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiInputBoxImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiInputBoxImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiInputBoxImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiInputBoxImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiInputBoxImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiInputBox");

}

void SuiInputBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiInputBoxImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiInputBoxImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SuiBoxImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6be1f7a4: //SuiInputBox.maxInputSize
		TypeInfo<int >::parseFromBinaryStream(&maxInputSize, stream);
		return true;

	case 0x199b69b0: //SuiInputBox.defaultInput
		TypeInfo<String >::parseFromBinaryStream(&defaultInput, stream);
		return true;

	case 0x2b66abc2: //SuiInputBox.inputType
		TypeInfo<int >::parseFromBinaryStream(&inputType, stream);
		return true;

	}

	return false;
}

void SuiInputBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiInputBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiInputBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SuiBoxImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x6be1f7a4; //SuiInputBox.maxInputSize
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxInputSize, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x199b69b0; //SuiInputBox.defaultInput
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&defaultInput, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x2b66abc2; //SuiInputBox.inputType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&inputType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

SuiInputBoxImplementation::SuiInputBoxImplementation(CreatureObject* player, unsigned int windowType, int inputtype) : SuiBoxImplementation(player, windowType, SuiBox::INPUTBOX) {
	_initializeImplementation();
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		maxInputSize = 25;
	maxInputSize = 25;
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		inputType = inputtype;
	inputType = inputtype;
}

void SuiInputBoxImplementation::setMaxInputSize(int size) {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		maxInputSize = size;
	maxInputSize = size;
}

void SuiInputBoxImplementation::setDefaultInput(const String& text) {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		defaultInput = text;
	defaultInput = text;
}

bool SuiInputBoxImplementation::isFilterBox() {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		return inputType == FILTER;
	return inputType == FILTER;
}

bool SuiInputBoxImplementation::isInputBox() {
	// server/zone/objects/player/sui/inputbox/SuiInputBox.idl():  		return true;
	return true;
}

/*
 *	SuiInputBoxAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiInputBoxAdapter::SuiInputBoxAdapter(SuiInputBox* obj) : SuiBoxAdapter(obj) {
}

void SuiInputBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETMAXINPUTSIZE__INT_:
		{
			int size = inv->getSignedIntParameter();
			
			setMaxInputSize(size);
			
		}
		break;
	case RPC_SETDEFAULTINPUT__STRING_:
		{
			 String text; inv->getAsciiParameter(text);
			
			setDefaultInput(text);
			
		}
		break;
	case RPC_ISFILTERBOX__:
		{
			
			bool _m_res = isFilterBox();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISINPUTBOX__:
		{
			
			bool _m_res = isInputBox();
			resp->insertBoolean(_m_res);
		}
		break;
	default:
		SuiBoxAdapter::invokeMethod(methid, inv);
	}
}

void SuiInputBoxAdapter::setMaxInputSize(int size) {
	(static_cast<SuiInputBox*>(stub))->setMaxInputSize(size);
}

void SuiInputBoxAdapter::setDefaultInput(const String& text) {
	(static_cast<SuiInputBox*>(stub))->setDefaultInput(text);
}

bool SuiInputBoxAdapter::isFilterBox() {
	return (static_cast<SuiInputBox*>(stub))->isFilterBox();
}

bool SuiInputBoxAdapter::isInputBox() {
	return (static_cast<SuiInputBox*>(stub))->isInputBox();
}

/*
 *	SuiInputBoxHelper
 */

SuiInputBoxHelper* SuiInputBoxHelper::staticInitializer = SuiInputBoxHelper::instance();

SuiInputBoxHelper::SuiInputBoxHelper() {
	className = "SuiInputBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiInputBoxHelper::finalizeHelper() {
	SuiInputBoxHelper::finalize();
}

DistributedObject* SuiInputBoxHelper::instantiateObject() {
	return new SuiInputBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiInputBoxHelper::instantiateServant() {
	return new SuiInputBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* SuiInputBoxHelper::instantiatePOD() {
	return new SuiInputBoxPOD();
}

DistributedObjectAdapter* SuiInputBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiInputBoxAdapter(static_cast<SuiInputBox*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SuiInputBoxPOD
 */

SuiInputBoxPOD::~SuiInputBoxPOD() {
	finalize();
}

SuiInputBoxPOD::SuiInputBoxPOD(void) {
	_className = "SuiInputBox";
}


void SuiInputBoxPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiInputBoxPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiInputBoxPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SuiBoxPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (maxInputSize) {
	_nameHashCode = 0x6be1f7a4; //SuiInputBox.maxInputSize
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxInputSize.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (defaultInput) {
	_nameHashCode = 0x199b69b0; //SuiInputBox.defaultInput
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&defaultInput.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (inputType) {
	_nameHashCode = 0x2b66abc2; //SuiInputBox.inputType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&inputType.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool SuiInputBoxPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SuiBoxPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x6be1f7a4: //SuiInputBox.maxInputSize
		{
			int _mnmaxInputSize;
			TypeInfo<int >::parseFromBinaryStream(&_mnmaxInputSize, stream);
			maxInputSize = std::move(_mnmaxInputSize);
		}
		return true;

	case 0x199b69b0: //SuiInputBox.defaultInput
		{
			String _mndefaultInput;
			TypeInfo<String >::parseFromBinaryStream(&_mndefaultInput, stream);
			defaultInput = std::move(_mndefaultInput);
		}
		return true;

	case 0x2b66abc2: //SuiInputBox.inputType
		{
			int _mninputType;
			TypeInfo<int >::parseFromBinaryStream(&_mninputType, stream);
			inputType = std::move(_mninputType);
		}
		return true;

	}

	return false;
}

void SuiInputBoxPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiInputBoxPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void SuiInputBoxPOD::writeObjectCompact(ObjectOutputStream* stream) {
	SuiBoxPOD::writeObjectCompact(stream);

	TypeInfo<int >::toBinaryStream(&maxInputSize.value(), stream);

	TypeInfo<String >::toBinaryStream(&defaultInput.value(), stream);

	TypeInfo<int >::toBinaryStream(&inputType.value(), stream);


}

