/*
 *	autogen/server/zone/objects/player/PlayerObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef PLAYEROBJECT_H_
#define PLAYEROBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

class BuildingObjectPOD;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class PlayerDisconnectEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class PlayerRecoveryEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class ForceRegenerationEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class PvpTefRemovalTask;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObject;

class StructureObjectPOD;

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace waypoint {

class WaypointObject;

class WaypointObjectPOD;

} // namespace waypoint
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::waypoint;

namespace server {
namespace zone {

class ZoneClientSession;

class ZoneClientSessionPOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace login {
namespace account {

class Account;

class AccountPOD;

} // namespace account
} // namespace login
} // namespace server

using namespace server::login::account;

#include "server/zone/objects/creature/ai/AiAgent.h"

#include "templates/SharedObjectTemplate.h"

#include "system/lang/ref/Reference.h"

#include "system/lang/Time.h"

#include "server/login/account/GalaxyAccountInfo.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/player/sui/SuiBox.h"

#include "server/zone/objects/player/ValidatedPosition.h"

#include "server/zone/objects/player/variables/Ability.h"

#include "server/zone/objects/player/variables/AbilityList.h"

#include "server/zone/objects/player/variables/FactionStandingList.h"

#include "server/zone/objects/player/variables/FriendList.h"

#include "server/zone/objects/player/variables/FrsData.h"

#include "server/zone/objects/player/variables/IgnoreList.h"

#include "server/zone/objects/player/variables/SchematicList.h"

#include "server/zone/objects/player/variables/WaypointList.h"

#include "server/zone/objects/player/variables/PlayerQuestData.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/DeltaBitArray.h"

#include "server/zone/objects/transaction/TransactionLog.h"

#include "server/zone/objects/player/PlayerBitmasks.h"

#include "engine/log/Logger.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/util/u3d/Vector3.h"

#include "server/zone/objects/intangible/IntangibleObject.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

#include "system/util/SynchronizedSortedVector.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject : public IntangibleObject {
public:
	static const int ONLINE = 1;

	static const int OFFLINE = 2;

	static const int LINKDEAD = 3;

	static const int LOGGINGOUT = 5;

	static const int PVP_RATING_FLOOR = 500;

	unsigned static const long long PVP_RESET_TIME;

	PlayerObject();

	PlayerObject* asPlayerObject();

	void setLogLevel(int newLevel);

	int getLogLevel() const;

	int getCountMaxCov() const;

	void setCountMaxCov(int newMaxCov);

	void setClientPathWaypoint(SceneObject* obj);

	void initializeAccount();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	void unload();

	int calculateBhReward();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendMessage(BasePacket* msg);

	void addOwnedStructure(StructureObject* obj);

	void removeOwnedStructure(StructureObject* obj);

	int getAcceptedTOSVersion() const;

	void setAcceptedTOSVersion(int version);

	void checkAndShowTOS();

	void createHelperDroid();

	int getTotalOwnedStructureCount();

	bool isOwnedStructure(StructureObject* obj);

	unsigned long long getOwnedStructure(int i);

	int getLotsRemaining();

	bool hasLotsRemaining(int lots);

	void notifySceneReady();

	void checkPendingMessages();

	/**
	 * Adds experience of a type to the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to add.
	 * @param xp The value of experience to add.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience gain.
	 * @return returns total experience awarded
	 */
	int addExperience(TransactionLog& trx, const String& xpType, int xp, bool notifyClient = true);

	/**
	 * Removes experience of a type from the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to remove.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience loss.
	 */
	void removeExperience(TransactionLog& trx, const String& xpType, bool notifyClient = true);

	/**
	 * Checks if the player has capped the experience type.
	 * @param xpType The string value for the type of experience to check.
	 * @return true if experience is capped, false otherwise.
	 */
	bool hasCappedExperience(const String& xpType) const;

	/**
	 * Adds waypoint object to waypointList
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param waypoint waypoint object to add
	 * @param checkName determines whether to remove existing Waypoint with equal customName
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient = true);

	void setWaypoint(WaypointObject* waypoint, bool notifyClient = true);

	/**
	 * Adds a new waypoint with the specified coordinates
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param planet planet where waypoint will be created
	 * @param positionX waypoint position X
	 * @param positionY waypoint position Y
	 * @param notifyClient determines whether to update the client with the changes
	 */
	WaypointObject* addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient = true);

	/**
	 * Removes a waypoint from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain the specified waypoint }
	 * @param waypointID waypoint object id to remove
	 * @param notifyClient determines whether to update the client with the changes
	 * @param destroy determines whether to remove the waypoint from the database
	 */
	void removeWaypoint(unsigned long long waypointID, bool notifyClient = true, bool destroy = true);

	/**
	 * Updates the client with a waypoint change
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param waypointID waypoint object id to update
	 */
	void updateWaypoint(unsigned long long waypointID);

	/**
	 * Removes a waypoint of a special type from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain a waypoint of the special type }
	 * @param specialTypeID id of special type to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeWaypointBySpecialType(int specialTypeID, bool notifyClient = true);

	/**
	 * Gets the first waypoint of a special type from this player
	 * @param specialTypeID id of special type to find
	 */
	WaypointObject* getWaypointBySpecialType(int specialTypeID) const;

	WaypointObject* getSurveyWaypoint() const;

	bool hasWaypoint(unsigned long long objectID) const;

	WaypointObject* getWaypointAt(float x, float y, String& planet) const;

	void insertWaypointListToMessage(BaseMessage* msg) const;

	int getWaypointListSize() const;

	WaypointObject* getWaypoint(int index) const;

	/**
	 * Adds new abilities commands to player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param abilities Vector of abilities to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void addAbility(Ability* ability, bool notifyClient = true);

	/**
	 * Removes certifications from player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void removeAbility(Ability* ability, bool notifyClient = true);

	bool addSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	void removeSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	bool addRewardedSchematic(DraftSchematic* schematic, short type, int quantity = 1, bool notifyClient = true);

	void removeRewardedSchematic(DraftSchematic* schematic, bool notifyClient = true);

	void decreaseSchematicUseCount(DraftSchematic* schematic);

	/**
	 * Sets the specified language id
	 * @pre { }
	 * @post { }
	 * @param language language id to set
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void setLanguageID(byte language, bool notifyClient = true);

	/**
	 * Adds a friend to the friend list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name friends name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addFriend(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified friend from the friend list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name friend name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeFriend(const String& name, bool notifyClient = true);

	void removeAllReverseFriends(const String& oldName);

	/**
	 * Adds a player to the ignore list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name player name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addIgnore(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified player from the ignore list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name player name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeIgnore(const String& name, bool notifyClient = true);

	void setTitle(const String& characterTitle, bool notifyClient = true);

	void setFoodFilling(int newValue, bool notifyClient = true);

	void setDrinkFilling(int newValue, bool notifyClient = true);

	/**
	 * Adds the amount of faction points to the faction point list.
	 * @pre { this locked }
	 * @post { this locked }
	 * @param factionName The string key for the faction the faction points are to be added.
	 * @param amount The float amount of faction points to add.
	 */
	void increaseFactionStanding(const String& factionName, float amount);

	void giveCoaBonus(const String& factionName, float amount, float currentStanding);

	void decreaseFactionStanding(const String& factionName, float amount);

	void setFactionStanding(const String& factionName, float amount);

	float getFactionStanding(const String& factionName) const;

	void setScreenPlayData(const String& screenPlay, const String& variable, const String& data);

	void deleteScreenPlayData(const String& screenPlay, const String& variable);

	String getScreenPlayData(const String& screenPlay, const String& variable) const;

	void clearScreenPlayData(const String& screenPlay);

	void activateRecovery();

	void activateForcePowerRegen();

	void doRecovery(int latency);

	void disconnect(bool closeClient, bool doLock);

	void reload(ZoneClientSession* client);

	void setOffline();

	void setLinkDead(bool isSafeLogout = false);

	void setOnline();

	void setLoggingOut();

	void activateJournalQuest(unsigned int questCrc, bool notifyClient = true);

	void completeJournalQuest(unsigned int questCrc, bool notifyClient = true);

	void clearJournalQuest(unsigned int questCrc, bool notifyClient = true);

	void activateJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient = true);

	void completeJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient = true);

	void clearJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient = true);

	bool isJournalQuestActive(unsigned int questCrc);

	bool isJournalQuestComplete(unsigned int questCrc);

	bool isJournalQuestTaskActive(unsigned int questCrc, int taskNum);

	bool isJournalQuestTaskComplete(unsigned int questCrc, int taskNum);

	/**
	 * Sends a badges response message
	 * @pre { }
	 * @post { }
	 * @param player CreatureObject to receive badges response message
	 */
	void sendBadgesResponseTo(CreatureObject* player);

	void logout(bool doLock);

	void setJediState(int state, bool notifyClient = true);

	void setActiveQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearActiveQuestsBit(int bitIndex, bool notifyClient = true);

	bool canActivateQuest(int questID);

	void activateQuest(int questID);

	bool hasActiveQuestBitSet(int bitIndex) const;

	bool hasCompletedQuestsBitSet(int bitIndex) const;

	void setCompletedQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearCompletedQuestsBit(int bitIndex, bool notifyClient = true);

	void completeQuest(int questID);

	PlayerQuestData getQuestData(unsigned int questCrc) const;

	bool hasQuestData(unsigned int questCrc) const;

	void setPlayerQuestData(unsigned int questCrc, PlayerQuestData& data, bool notifyClient = true);

	void clearPlayerQuestData(unsigned int questCrc, bool notifyClient = true);

	/**
	 * Gets the faction point list.
	 */
	FactionStandingList* getFactionStandingList();

	void setLastNpcConvStr(const String& conv);

	void setLastNpcConvMessStr(const String& mess);

	String getLastNpcConvStr() const;

	String getLastNpcConvMessStr() const;

	String getLastNpcConvOption(int idx) const;

	void addLastNpcConvOptions(const String& option);

	int countLastNpcConvOptions() const;

	void clearLastNpcConvOptions();

	void setConversatingCreature(CreatureObject* creature);

	unsigned long long getConversatingCreature() const;

	void setTrainerCoordinates(const Vector3& trainer);

	Vector3 getTrainerCoordinates() const;

	void setTrainerZoneName(String& zoneName);

	String getTrainerZoneName() const;

	SortedVector<unsigned long long>* getPersistentMessages();

	void addPersistentMessage(unsigned long long id);

	void dropPersistentMessage(unsigned long long id);

	/**
	 * Unloads all the spawned creatures from the datapad control devices
	 */
	void unloadSpawnedChildren();

	void addToConsentList(const String& name);

	bool hasInConsentList(const String& name) const;

	void removeFromConsentList(const String& name);

	String getConsentName(int i) const;

	int getConsentListSize() const;

	int getReactionFines() const;

	String getFactionRank() const;

	void setFactionRank(const String& rank);

	void setCommandMessageString(unsigned int actionCRC, String& message);

	void removeCommandMessageString(unsigned int actionCRC);

	unsigned long long getDeclaredResidence() const;

	void setDeclaredResidence(BuildingObject* residence);

	void setCloningFacility(BuildingObject* cloningfac);

	unsigned long long getCloningFacility() const;

	/**
	 * Notifies all reverse friends online status
	 * @pre { }
	 * @post { }
	 */
	void notifyOnline();

	void doDigest(int fillingReduction);

	bool isDigesting() const;

	String getSavedTerrainName() const;

	void setSavedParentID(unsigned long long id);

	void setSavedTerrainName(const String& name);

	void setBirthDate(int date);

	void setForcePower(int fp, bool notifyClient = true);

	void setForcePowerMax(int newValue, bool notifyClient = true);

	void doForceRegen();

	void recalculateForcePower();

	int getForcePowerRegen();

	unsigned long long getSavedParentID() const;

	unsigned int getNewSuiBoxID(unsigned int type);

	bool hasSuiBox(unsigned int boxID) const;

	Reference<SuiBox* > getSuiBox(unsigned int boxID) const;

	/**
	 * Removes the specified box id and optionally closes the client sui
	 */
	void removeSuiBox(unsigned int boxID, bool closeWindowToClient = false);

	void removeSuiBoxType(unsigned int windowType);

	bool hasSuiBoxWindowType(unsigned int windowType);

	void closeSuiWindowType(unsigned int windowType);

	Reference<SuiBox* > getSuiBoxFromWindowType(unsigned int windowType);

	void addSuiBox(SuiBox* sui);

	void addPermissionGroup(const String& group, bool updatePermissions = false);

	void removePermissionGroup(const String& group, bool updatePermissions = false);

	void updateInRangeBuildingPermissions();

	bool hasPermissionGroup(const String& group) const;

	SortedVector<String>* getPermissionGroups();

	void addIncapacitationTime();

	byte getIncapacitationCounter() const;

	void resetIncapacitationTimes();

	void addToDuelList(CreatureObject* targetPlayer);

	void removeFromDuelList(CreatureObject* targetPlayer);

	Reference<CreatureObject* > getDuelListObject(int index);

	bool requestedDuelTo(CreatureObject* targetPlayer) const;

	bool isDuelListEmpty() const;

	int getDuelListSize() const;

	void addToActivePets(AiAgent* pet);

	void removeFromActivePets(AiAgent* pet);

	AiAgent* getActivePet(int index);

	bool hasActivePet(AiAgent* pet) const;

	int getActivePetsSize() const;

	UnicodeString getBiography() const;

	/**
	 * Notifies all reverse friends offline status
	 * @pre { }
	 * @post { }
	 */
	void notifyOffline();

	void resetSessionStats(bool isSessionStart);

	void incrementSessionMovement(float moveDelta);

	void logSessionStats(bool isSessionEnd);

	void setBadge(unsigned int badge);

	void revokeBadge(unsigned int badge);

	void awardBadge(unsigned int badge);

	void setTeleporting(bool val);

	void setOnLoadScreen(bool val);

	void setForcedTransform(bool val);

	int getNumBadges() const;

	int getBadgeTypeCount(unsigned int type) const;

	bool hasFriend(const String& name) const;

	int getFriendListSize() const;

	bool isIgnoring(const String& name) const;

	void addReverseFriend(const String& name);

	void removeReverseFriend(const String& name);

	void sendFriendLists();

	/**
	 * Checks to see if this player object has the specified ability.
	 * @param ability The ability to search for.
	 * @return True if the player has the ability.
	 */
	bool hasAbility(const String& ability) const;

	bool hasCommandMessageString(unsigned int actionCRC) const;

	const PlayerBitmasks* getPlayerBitmasks() const;

	String getTitle() const;

	unsigned int getAdminLevel() const;

	void setAdminLevel(unsigned int adminlvl);

	int getPriviledgeFlag() const;

	void setPriviledgeFlag(int flag);

	void setBiography(const UnicodeString& bio);

	bool hasGodMode() const;

	bool isPrivileged() const;

	bool isStaff() const;

	bool isAdmin() const;

	bool setPlayerBit(unsigned int bit, bool notifyClient = false);

	bool clearPlayerBit(unsigned int bit, bool notifyClient = false);

	void toggleCharacterBit(unsigned int bit);

	bool isLFG() const;

	bool isAFK() const;

	bool isAnonymous() const;

	bool isRoleplayer() const;

	bool isNewbieHelper() const;

	const VectorMap<String, int>* getXpTypeCapList() const;

	VectorMap<String, int>* getXpTypeCapList();

	const DeltaVectorMap<String, int>* getExperienceList() const;

	DeltaVectorMap<String, int>* getExperienceList();

	const DeltaVectorMap<uint32, PlayerQuestData >* getPlayerQuestsData() const;

	const DeltaBitArray* getActiveQuests() const;

	const DeltaBitArray* getCompletedQuests() const;

	int getTotalPlayedTime() const;

	int getForcePower() const;

	int getForcePowerMax() const;

	const AbilityList* getAbilityList() const;

	FrsData* getFrsData();

	const SchematicList* getSchematics() const;

	SchematicList* getSchematics();

	DraftSchematic* getSchematic(int i) const;

	Vector<ManagedReference<DraftSchematic* > > filterSchematicList(CreatureObject* player, Vector<unsigned int>* enabledTabs, int complexityLevel);

	int getFoodFilling() const;

	int getFoodFillingMax() const;

	int getDrinkFilling() const;

	int getDrinkFillingMax() const;

	int getJediState() const;

	byte getLanguageID() const;

	const DeltaVector<String>* getFriendList() const;

	bool isTeleporting() const;

	bool isOnLoadScreen() const;

	bool isForcedTransform() const;

	void addChatRoom(unsigned int roomID);

	void removeChatRoom(unsigned int roomID);

	void addOwnedChatRoom(unsigned int roomID);

	void removeOwnedChatRoom(unsigned int roomID);

	int getOwnedChatRoomCount();

	void setBankLocation(const String& location);

	String getBankLocation() const;

	const DeltaVector<String>* getIgnoreList() const;

	int getExperience(const String& xp) const;

	/**
	 * Maximizes all types of experience for the player.
	 */
	void maximizeExperience();

	void activateMissions();

	String getCommandMessageString(unsigned int actionCRC) const;

	bool hasBadge(unsigned int badge) const;

	void clearDisconnectEvent();

	bool isOnline() const;

	bool isOffline() const;

	bool isLinkDead() const;

	bool isLoggingOut() const;

	Time* getLastLogout();

	int getDaysSinceLastLogout() const;

	void setSkillPoints(int points);

	void addSkillPoints(int points);

	int getSkillPoints() const;

	void setLastLogoutWorldPosition(const Vector3& position);

	Vector3 getLastLogoutWorldPosition() const;

	ValidatedPosition* getLastValidatedPosition();

	const ValidatedPosition* getLastValidatedPosition() const;

	void updateLastValidatedPosition();

	unsigned int getAccountID() const;

	GalaxyAccountInfo* getGalaxyAccountInfo() const;

	unsigned long long getServerMovementTimeDelta() const;

	Time* getServerMovementTimeStamp();

	void setClientLastMovementStamp(unsigned int stamp);

	void updateServerLastMovementStamp();

	void setAccountID(unsigned int id);

	unsigned int getClientLastMovementStamp() const;

	void addHologrindProfession(byte prof);

	const Vector<byte>* getHologrindProfessions() const;

	void setMaximumLots(byte lots);

	byte getMaximumLots() const;

	String getStarterProfession() const;

	void setStarterProfession(String& profession);

	unsigned long long getPerformanceBuffTarget() const;

	void setPerformanceBuffTarget(unsigned long long target);

	void setDebug(bool value);

	bool getDebug() const;

	float getVisibility() const;

	void setVisibility(float value);

	Time getLastVisibilityUpdateTimestamp() const;

	Time getLastBhPvpCombatActionTimestamp() const;

	Time getLastGcwPvpCombatActionTimestamp() const;

	Time getLastGcwCrackdownCombatActionTimestamp() const;

	Time getLastPvpAreaCombatActionTimestamp() const;

	void updateLastCombatActionTimestamp(bool updateGcwCrackdownAction, bool updateGcwAction, bool updateBhAction);

	void updateLastBhPvpCombatActionTimestamp();

	void updateLastGcwPvpCombatActionTimestamp();

	void updateLastPvpAreaCombatActionTimestamp();

	bool hasTef() const;

	bool hasPvpTef() const;

	bool hasGcwTef() const;

	bool hasBhTef() const;

	void setCrackdownTefTowards(unsigned int factionCrc, bool scheduleTefRemovalTask = true);

	bool hasCrackdownTefTowards(unsigned int factionCrc) const;

	bool hasCrackdownTef() const;

	void schedulePvpTefRemovalTask(bool removeCrackdownGcwTefNow, bool removeGcwTefNow, bool removeBhTefNow);

	void schedulePvpTefRemovalTask(bool removeNow = false);

	bool isInPvpArea(bool checkTime = true);

	void addVendor(SceneObject* vendor);

	void removeVendor(SceneObject* vendor);

	int getVendorCount();

	const SortedVector<unsigned long long>* getOwnedVendors() const;

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void deleteAllPersistentMessages();

	bool isJedi() const;

	bool isJediLight() const;

	bool isJediDark() const;

	bool isMuted() const;

	void setMutedState(bool mute);

	String getMutedReason() const;

	void setMutedReason(String& reason);

	String getInstalledHoloEmote() const;

	void setInstalledHoloEmote(String& holoEmote);

	void removeInstalledHoloEmote();

	int getHoloEmoteUseCount() const;

	void decreaseHoloEmoteUseCount();

	bool isMarried() const;

	String getSpouseName() const;

	void setSpouseName(String& firstName);

	void removeSpouse();

	Account* getAccount();

	String getChosenVeteranReward(unsigned int milestone) const;

	bool hasChosenVeteranReward(const String& rewardTemplate) const;

	void clearVeteranReward(unsigned int milestone);

	void addEventPerk(SceneObject* deed);

	void removeEventPerk(SceneObject* deed);

	int getEventPerkCount() const;

	int getCharacterAgeInDays();

	int getBirthDate();

	void addToReactionFines(int fine);

	void setReactionFines(int amount);

	void subtractFromReactionFines(int amount);

	void updateReactionFineTimestamp();

	void updateReactionFineMailTimestamp();

	Time* getReactionFineTimestamp();

	Time* getReactionFineMailTimestamp();

	int getXpCap(const String& type) const;

	int getSpentJediSkillPoints();

	bool hasSchematic(DraftSchematic* schematic) const;

	bool hasEventPerk(const String& templatePath) const;

	void doFieldFactionChange(int newStatus);

	void addToVictimList(unsigned int playerID);

	bool hasOnVictimList(unsigned int playerID);

	int getPvpRating() const;

	void setPvpRating(int rating);

	bool isCloning() const;

	void setCloning(bool val);

	unsigned long long getPlayedMiliSecs() const;

	unsigned long long getSessionMiliSecs() const;

	unsigned long long getSessionTotalMovement() const;

	long long getSessionTotalCredits() const;

	String getMiliSecsTimeString(unsigned long long miliSecs, bool verbose = false) const;

	String getPlayedTimeString(bool verbose = false) const;

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerObject(DummyConstructorParameter* param);

	virtual ~PlayerObject();

	PlayerObject* __asPlayerObject();

	friend class PlayerObjectHelper;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObjectImplementation : public IntangibleObjectImplementation {
protected:
	int playerLogLevel;

	PlayerBitmasks playerBitmask;

	String title;

	String savedTerrainName;

	unsigned long long savedParentID;

	Badges badges;

	int birthDate;

	int forcePower;

	int forcePowerMax;

	int foodFilling;

	int foodFillingMax;

	int drinkFilling;

	int drinkFillingMax;

	int reactionFines;

	Reference<GalaxyAccountInfo* > galaxyAccountInfo;

	ManagedReference<Account* > account;

	int countMaxCov;

	Time reactionFineTimestamp;

	Time reactionFineMailTimestamp;

	String starterProfession;

	String bankLocation;

	bool teleporting;

	bool onLoadScreen;

	bool forcedTransform;

	bool muted;

	String mutedReason;

	int tosVersionAccepted;

	SortedVector<unsigned long long> ownedStructures;

	SortedVector<unsigned long long> ownedVendors;

	byte maximumLots;

	int jediState;

	unsigned int adminLevel;

	int priviledgeFlag;

	byte languageID;

	VectorMap<String, int> xpTypeCapList;

	VectorMap<unsigned int, String> commandMessageStrings;

	DeltaVectorMap<String, int> experienceList;

	FrsData frsData;

	WaypointList waypointList;

	AbilityList abilityList;

	FriendList friendList;

	IgnoreList ignoreList;

	FactionStandingList factionStandingList;

	SchematicList schematicList;

	Vector<unsigned int> incapacitationTimes;

	unsigned int suiBoxNextID;

	VectorMap<unsigned int, ManagedReference<SuiBox* > > suiBoxes;

	SortedVector<unsigned int> chatRooms;

	SortedVector<unsigned int> ownedChatRooms;

	SynchronizedSortedVector<ManagedReference<CreatureObject* > > duelList;

	Vector<unsigned long long> victimList;

	unsigned long long declaredResidence;

	unsigned long long cloningFacility;

	bool isPlayerCloning;

	SortedVector<unsigned long long> persistentMessages;

	UnicodeString biography;

	SortedVector<String> consentList;

	String lastNpcConvoMessage;

	String lastNpcConvo;

	Vector<String> lastNpcConvoOptions;

	unsigned long long conversatingCreature;

	Vector3 trainerCoordinates;

	Vector3 lastLogoutWorldPosition;

	String trainerZoneName;

	Reference<PlayerDisconnectEvent*> disconnectEvent;

	Reference<PlayerRecoveryEvent*> recoveryEvent;

	Reference<ForceRegenerationEvent*> forceRegenerationEvent;

	Time logoutTimeStamp;

	int onlineStatus;

	int skillPoints;

	int pvpRating;

	Time lastPvpRatingUpdate;

	Vector<byte> hologrindProfessions;

	unsigned int clientLastMovementStamp;

	Time serverLastMovementStamp;

	ValidatedPosition lastValidatedPosition;

	unsigned int accountID;

	VectorMap<String, String> screenPlayData;

	SortedVector<String> permissionGroups;

	unsigned long long performanceBuffTarget;

	bool debugOutput;

	float visibility;

	Time lastVisibilityUpdateTimestamp;

	Time lastBhPvpCombatActionTimestamp;

	Time lastGcwPvpCombatActionTimestamp;

	Time lastCrackdownGcwCombatActionTimestamp;

	Time lastPvpAreaCombatActionTimestamp;

	unsigned int crackdownFactionTefCrc;

	Reference<PvpTefRemovalTask*> pvpTefTask;

	Time lastDigestion;

	SortedVector<ManagedReference<AiAgent* > > activePets;

	DeltaBitArray activeQuests;

	DeltaBitArray completedQuests;

	String installedHoloEmote;

	int holoEmoteUseCount;

	String spouseName;

	VectorMap<unsigned int, String> chosenVeteranRewards;

	SortedVector<unsigned long long> currentEventPerks;

	ManagedWeakReference<SceneObject* > currentClientPathWaypoint;

	/**
	 * the key is the quest.hashCode()
	 */
	DeltaVectorMap<uint32, PlayerQuestData > playerQuestsData;

	unsigned long long miliSecsPlayed;

	unsigned long long miliSecsSession;

	unsigned long long sessionStatsMiliSecs;

	long long sessionStatsLastCredits;

	int sessionStatsLastSkillPoints;

	unsigned long long sessionStatsActivityXP;

	unsigned long long sessionStatsActivityMovement;

	unsigned long long sessionStatsTotalMovement;

	unsigned long long sessionStatsTotalCredits;

	String sessionStatsIPAddress;

public:
	static const int ONLINE = 1;

	static const int OFFLINE = 2;

	static const int LINKDEAD = 3;

	static const int LOGGINGOUT = 5;

	static const int PVP_RATING_FLOOR = 500;

	unsigned static const long long PVP_RESET_TIME;

	PlayerObjectImplementation();

	PlayerObjectImplementation(DummyConstructorParameter* param);

	void finalize();

	PlayerObject* asPlayerObject();

	void setLogLevel(int newLevel);

	int getLogLevel() const;

	int getCountMaxCov() const;

	void setCountMaxCov(int newMaxCov);

	void setClientPathWaypoint(SceneObject* obj);

	void initializeAccount();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	void unload();

	int calculateBhReward();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void sendMessage(BasePacket* msg);

	void addOwnedStructure(StructureObject* obj);

	void removeOwnedStructure(StructureObject* obj);

	int getAcceptedTOSVersion() const;

	void setAcceptedTOSVersion(int version);

	void checkAndShowTOS();

	void createHelperDroid();

	int getTotalOwnedStructureCount();

	bool isOwnedStructure(StructureObject* obj);

	unsigned long long getOwnedStructure(int i);

	int getLotsRemaining();

	bool hasLotsRemaining(int lots);

	void notifySceneReady();

	void checkPendingMessages();

	/**
	 * Adds experience of a type to the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to add.
	 * @param xp The value of experience to add.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience gain.
	 * @return returns total experience awarded
	 */
	int addExperience(TransactionLog& trx, const String& xpType, int xp, bool notifyClient = true);

	/**
	 * Removes experience of a type from the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to remove.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience loss.
	 */
	void removeExperience(TransactionLog& trx, const String& xpType, bool notifyClient = true);

	/**
	 * Checks if the player has capped the experience type.
	 * @param xpType The string value for the type of experience to check.
	 * @return true if experience is capped, false otherwise.
	 */
	bool hasCappedExperience(const String& xpType) const;

	/**
	 * Adds waypoint object to waypointList
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param waypoint waypoint object to add
	 * @param checkName determines whether to remove existing Waypoint with equal customName
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient = true);

	void setWaypoint(WaypointObject* waypoint, bool notifyClient = true);

	/**
	 * Adds a new waypoint with the specified coordinates
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param planet planet where waypoint will be created
	 * @param positionX waypoint position X
	 * @param positionY waypoint position Y
	 * @param notifyClient determines whether to update the client with the changes
	 */
	WaypointObject* addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient = true);

	/**
	 * Removes a waypoint from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain the specified waypoint }
	 * @param waypointID waypoint object id to remove
	 * @param notifyClient determines whether to update the client with the changes
	 * @param destroy determines whether to remove the waypoint from the database
	 */
	void removeWaypoint(unsigned long long waypointID, bool notifyClient = true, bool destroy = true);

	/**
	 * Updates the client with a waypoint change
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param waypointID waypoint object id to update
	 */
	void updateWaypoint(unsigned long long waypointID);

	/**
	 * Removes a waypoint of a special type from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain a waypoint of the special type }
	 * @param specialTypeID id of special type to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeWaypointBySpecialType(int specialTypeID, bool notifyClient = true);

	/**
	 * Gets the first waypoint of a special type from this player
	 * @param specialTypeID id of special type to find
	 */
	WaypointObject* getWaypointBySpecialType(int specialTypeID) const;

	WaypointObject* getSurveyWaypoint() const;

	bool hasWaypoint(unsigned long long objectID) const;

	WaypointObject* getWaypointAt(float x, float y, String& planet) const;

	void insertWaypointListToMessage(BaseMessage* msg) const;

	int getWaypointListSize() const;

	WaypointObject* getWaypoint(int index) const;

	/**
	 * Adds new abilities commands to player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param abilities Vector of abilities to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void addAbility(Ability* ability, bool notifyClient = true);

	/**
	 * Removes certifications from player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeAbilities(Vector<Ability*>& abilities, bool notifyClient = true);

	void removeAbility(Ability* ability, bool notifyClient = true);

	bool addSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	void removeSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient = true);

	bool addRewardedSchematic(DraftSchematic* schematic, short type, int quantity = 1, bool notifyClient = true);

	void removeRewardedSchematic(DraftSchematic* schematic, bool notifyClient = true);

	void decreaseSchematicUseCount(DraftSchematic* schematic);

	/**
	 * Sets the specified language id
	 * @pre { }
	 * @post { }
	 * @param language language id to set
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void setLanguageID(byte language, bool notifyClient = true);

	/**
	 * Adds a friend to the friend list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name friends name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addFriend(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified friend from the friend list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name friend name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeFriend(const String& name, bool notifyClient = true);

	void removeAllReverseFriends(const String& oldName);

	/**
	 * Adds a player to the ignore list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name player name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void addIgnore(const String& name, bool notifyClient = true);

	/**
	 * Removes the specified player from the ignore list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name player name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	void removeIgnore(const String& name, bool notifyClient = true);

	void setTitle(const String& characterTitle, bool notifyClient = true);

	void setFoodFilling(int newValue, bool notifyClient = true);

	void setDrinkFilling(int newValue, bool notifyClient = true);

	/**
	 * Adds the amount of faction points to the faction point list.
	 * @pre { this locked }
	 * @post { this locked }
	 * @param factionName The string key for the faction the faction points are to be added.
	 * @param amount The float amount of faction points to add.
	 */
	void increaseFactionStanding(const String& factionName, float amount);

	void giveCoaBonus(const String& factionName, float amount, float currentStanding);

	void decreaseFactionStanding(const String& factionName, float amount);

	void setFactionStanding(const String& factionName, float amount);

	float getFactionStanding(const String& factionName) const;

	void setScreenPlayData(const String& screenPlay, const String& variable, const String& data);

	void deleteScreenPlayData(const String& screenPlay, const String& variable);

	String getScreenPlayData(const String& screenPlay, const String& variable) const;

	void clearScreenPlayData(const String& screenPlay);

	void activateRecovery();

	void activateForcePowerRegen();

	void doRecovery(int latency);

	void disconnect(bool closeClient, bool doLock);

	void reload(ZoneClientSession* client);

	void setOffline();

	void setLinkDead(bool isSafeLogout = false);

	void setOnline();

	void setLoggingOut();

	void activateJournalQuest(unsigned int questCrc, bool notifyClient = true);

	void completeJournalQuest(unsigned int questCrc, bool notifyClient = true);

	void clearJournalQuest(unsigned int questCrc, bool notifyClient = true);

	void activateJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient = true);

	void completeJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient = true);

	void clearJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient = true);

	bool isJournalQuestActive(unsigned int questCrc);

	bool isJournalQuestComplete(unsigned int questCrc);

	bool isJournalQuestTaskActive(unsigned int questCrc, int taskNum);

	bool isJournalQuestTaskComplete(unsigned int questCrc, int taskNum);

	/**
	 * Sends a badges response message
	 * @pre { }
	 * @post { }
	 * @param player CreatureObject to receive badges response message
	 */
	void sendBadgesResponseTo(CreatureObject* player);

	void logout(bool doLock);

	void setJediState(int state, bool notifyClient = true);

	void setActiveQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearActiveQuestsBit(int bitIndex, bool notifyClient = true);

	bool canActivateQuest(int questID);

	void activateQuest(int questID);

	bool hasActiveQuestBitSet(int bitIndex) const;

	bool hasCompletedQuestsBitSet(int bitIndex) const;

	void setCompletedQuestsBit(int bitIndex, byte value, bool notifyClient = true);

	void clearCompletedQuestsBit(int bitIndex, bool notifyClient = true);

	void completeQuest(int questID);

	PlayerQuestData getQuestData(unsigned int questCrc) const;

	bool hasQuestData(unsigned int questCrc) const;

	void setPlayerQuestData(unsigned int questCrc, PlayerQuestData& data, bool notifyClient = true);

	void clearPlayerQuestData(unsigned int questCrc, bool notifyClient = true);

	/**
	 * Gets the faction point list.
	 */
	FactionStandingList* getFactionStandingList();

	void setLastNpcConvStr(const String& conv);

	void setLastNpcConvMessStr(const String& mess);

	String getLastNpcConvStr() const;

	String getLastNpcConvMessStr() const;

	String getLastNpcConvOption(int idx) const;

	void addLastNpcConvOptions(const String& option);

	int countLastNpcConvOptions() const;

	void clearLastNpcConvOptions();

	void setConversatingCreature(CreatureObject* creature);

	unsigned long long getConversatingCreature() const;

	void setTrainerCoordinates(const Vector3& trainer);

	Vector3 getTrainerCoordinates() const;

	void setTrainerZoneName(String& zoneName);

	String getTrainerZoneName() const;

	SortedVector<unsigned long long>* getPersistentMessages();

	void addPersistentMessage(unsigned long long id);

	void dropPersistentMessage(unsigned long long id);

	/**
	 * Unloads all the spawned creatures from the datapad control devices
	 */
	void unloadSpawnedChildren();

	void addToConsentList(const String& name);

	bool hasInConsentList(const String& name) const;

	void removeFromConsentList(const String& name);

	String getConsentName(int i) const;

	int getConsentListSize() const;

	int getReactionFines() const;

	String getFactionRank() const;

	void setFactionRank(const String& rank);

	void setCommandMessageString(unsigned int actionCRC, String& message);

	void removeCommandMessageString(unsigned int actionCRC);

	unsigned long long getDeclaredResidence() const;

	void setDeclaredResidence(BuildingObject* residence);

	void setCloningFacility(BuildingObject* cloningfac);

	unsigned long long getCloningFacility() const;

	/**
	 * Notifies all reverse friends online status
	 * @pre { }
	 * @post { }
	 */
	void notifyOnline();

	void doDigest(int fillingReduction);

	bool isDigesting() const;

	String getSavedTerrainName() const;

	void setSavedParentID(unsigned long long id);

	void setSavedTerrainName(const String& name);

	void setBirthDate(int date);

	void setForcePower(int fp, bool notifyClient = true);

	void setForcePowerMax(int newValue, bool notifyClient = true);

	void doForceRegen();

	void recalculateForcePower();

	int getForcePowerRegen();

	unsigned long long getSavedParentID() const;

	unsigned int getNewSuiBoxID(unsigned int type);

	bool hasSuiBox(unsigned int boxID) const;

	Reference<SuiBox* > getSuiBox(unsigned int boxID) const;

	/**
	 * Removes the specified box id and optionally closes the client sui
	 */
	void removeSuiBox(unsigned int boxID, bool closeWindowToClient = false);

	void removeSuiBoxType(unsigned int windowType);

	bool hasSuiBoxWindowType(unsigned int windowType);

	void closeSuiWindowType(unsigned int windowType);

	Reference<SuiBox* > getSuiBoxFromWindowType(unsigned int windowType);

	void addSuiBox(SuiBox* sui);

	void addPermissionGroup(const String& group, bool updatePermissions = false);

	void removePermissionGroup(const String& group, bool updatePermissions = false);

	void updateInRangeBuildingPermissions();

	bool hasPermissionGroup(const String& group) const;

	SortedVector<String>* getPermissionGroups();

	void addIncapacitationTime();

	byte getIncapacitationCounter() const;

	void resetIncapacitationTimes();

	void addToDuelList(CreatureObject* targetPlayer);

	void removeFromDuelList(CreatureObject* targetPlayer);

	Reference<CreatureObject* > getDuelListObject(int index);

	bool requestedDuelTo(CreatureObject* targetPlayer) const;

	bool isDuelListEmpty() const;

	int getDuelListSize() const;

	void addToActivePets(AiAgent* pet);

	void removeFromActivePets(AiAgent* pet);

	AiAgent* getActivePet(int index);

	bool hasActivePet(AiAgent* pet) const;

	int getActivePetsSize() const;

	UnicodeString getBiography() const;

	/**
	 * Notifies all reverse friends offline status
	 * @pre { }
	 * @post { }
	 */
	void notifyOffline();

	void resetSessionStats(bool isSessionStart);

	void incrementSessionMovement(float moveDelta);

	void logSessionStats(bool isSessionEnd);

	void setBadge(unsigned int badge);

	void revokeBadge(unsigned int badge);

	void awardBadge(unsigned int badge);

	void setTeleporting(bool val);

	void setOnLoadScreen(bool val);

	void setForcedTransform(bool val);

	int getNumBadges() const;

	int getBadgeTypeCount(unsigned int type) const;

	bool hasFriend(const String& name) const;

	int getFriendListSize() const;

	bool isIgnoring(const String& name) const;

	void addReverseFriend(const String& name);

	void removeReverseFriend(const String& name);

	void sendFriendLists();

	/**
	 * Checks to see if this player object has the specified ability.
	 * @param ability The ability to search for.
	 * @return True if the player has the ability.
	 */
	bool hasAbility(const String& ability) const;

	bool hasCommandMessageString(unsigned int actionCRC) const;

	const PlayerBitmasks* getPlayerBitmasks() const;

	String getTitle() const;

	unsigned int getAdminLevel() const;

	void setAdminLevel(unsigned int adminlvl);

	int getPriviledgeFlag() const;

	void setPriviledgeFlag(int flag);

	void setBiography(const UnicodeString& bio);

	bool hasGodMode() const;

	bool isPrivileged() const;

	bool isStaff() const;

	bool isAdmin() const;

	bool setPlayerBit(unsigned int bit, bool notifyClient = false);

	bool clearPlayerBit(unsigned int bit, bool notifyClient = false);

	void toggleCharacterBit(unsigned int bit);

	bool isLFG() const;

	bool isAFK() const;

	bool isAnonymous() const;

	bool isRoleplayer() const;

	bool isNewbieHelper() const;

	const VectorMap<String, int>* getXpTypeCapList() const;

	VectorMap<String, int>* getXpTypeCapList();

	const DeltaVectorMap<String, int>* getExperienceList() const;

	DeltaVectorMap<String, int>* getExperienceList();

	const DeltaVectorMap<uint32, PlayerQuestData >* getPlayerQuestsData() const;

	const DeltaBitArray* getActiveQuests() const;

	const DeltaBitArray* getCompletedQuests() const;

	int getTotalPlayedTime() const;

	int getForcePower() const;

	int getForcePowerMax() const;

	const AbilityList* getAbilityList() const;

	FrsData* getFrsData();

	const SchematicList* getSchematics() const;

	SchematicList* getSchematics();

	DraftSchematic* getSchematic(int i) const;

	Vector<ManagedReference<DraftSchematic* > > filterSchematicList(CreatureObject* player, Vector<unsigned int>* enabledTabs, int complexityLevel);

	int getFoodFilling() const;

	int getFoodFillingMax() const;

	int getDrinkFilling() const;

	int getDrinkFillingMax() const;

	int getJediState() const;

	byte getLanguageID() const;

	const DeltaVector<String>* getFriendList() const;

	bool isTeleporting() const;

	bool isOnLoadScreen() const;

	bool isForcedTransform() const;

	void addChatRoom(unsigned int roomID);

	void removeChatRoom(unsigned int roomID);

	void addOwnedChatRoom(unsigned int roomID);

	void removeOwnedChatRoom(unsigned int roomID);

	int getOwnedChatRoomCount();

	void setBankLocation(const String& location);

	String getBankLocation() const;

	const DeltaVector<String>* getIgnoreList() const;

	int getExperience(const String& xp) const;

	/**
	 * Maximizes all types of experience for the player.
	 */
	void maximizeExperience();

	void activateMissions();

	String getCommandMessageString(unsigned int actionCRC) const;

	bool hasBadge(unsigned int badge) const;

	void clearDisconnectEvent();

	bool isOnline() const;

	bool isOffline() const;

	bool isLinkDead() const;

	bool isLoggingOut() const;

	Time* getLastLogout();

	int getDaysSinceLastLogout() const;

	void setSkillPoints(int points);

	void addSkillPoints(int points);

	int getSkillPoints() const;

	void setLastLogoutWorldPosition(const Vector3& position);

	Vector3 getLastLogoutWorldPosition() const;

	ValidatedPosition* getLastValidatedPosition();

	const ValidatedPosition* getLastValidatedPosition() const;

	void updateLastValidatedPosition();

	unsigned int getAccountID() const;

	GalaxyAccountInfo* getGalaxyAccountInfo() const;

	unsigned long long getServerMovementTimeDelta() const;

	Time* getServerMovementTimeStamp();

	void setClientLastMovementStamp(unsigned int stamp);

	void updateServerLastMovementStamp();

	void setAccountID(unsigned int id);

	unsigned int getClientLastMovementStamp() const;

	void addHologrindProfession(byte prof);

	const Vector<byte>* getHologrindProfessions() const;

	void setMaximumLots(byte lots);

	byte getMaximumLots() const;

	String getStarterProfession() const;

	void setStarterProfession(String& profession);

	unsigned long long getPerformanceBuffTarget() const;

	void setPerformanceBuffTarget(unsigned long long target);

	void setDebug(bool value);

	bool getDebug() const;

	float getVisibility() const;

	void setVisibility(float value);

	Time getLastVisibilityUpdateTimestamp() const;

	Time getLastBhPvpCombatActionTimestamp() const;

	Time getLastGcwPvpCombatActionTimestamp() const;

	Time getLastGcwCrackdownCombatActionTimestamp() const;

	Time getLastPvpAreaCombatActionTimestamp() const;

	void updateLastCombatActionTimestamp(bool updateGcwCrackdownAction, bool updateGcwAction, bool updateBhAction);

	void updateLastBhPvpCombatActionTimestamp();

	void updateLastGcwPvpCombatActionTimestamp();

	void updateLastPvpAreaCombatActionTimestamp();

	bool hasTef() const;

	bool hasPvpTef() const;

	bool hasGcwTef() const;

	bool hasBhTef() const;

	void setCrackdownTefTowards(unsigned int factionCrc, bool scheduleTefRemovalTask = true);

	bool hasCrackdownTefTowards(unsigned int factionCrc) const;

	bool hasCrackdownTef() const;

	void schedulePvpTefRemovalTask(bool removeCrackdownGcwTefNow, bool removeGcwTefNow, bool removeBhTefNow);

	void schedulePvpTefRemovalTask(bool removeNow = false);

	bool isInPvpArea(bool checkTime = true);

	void addVendor(SceneObject* vendor);

	void removeVendor(SceneObject* vendor);

	int getVendorCount();

	const SortedVector<unsigned long long>* getOwnedVendors() const;

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

private:
	void removeAllFriends();

public:
	void deleteAllPersistentMessages();

private:
	void deleteAllWaypoints();

public:
	bool isJedi() const;

	bool isJediLight() const;

	bool isJediDark() const;

	bool isMuted() const;

	void setMutedState(bool mute);

	String getMutedReason() const;

	void setMutedReason(String& reason);

	String getInstalledHoloEmote() const;

	void setInstalledHoloEmote(String& holoEmote);

	void removeInstalledHoloEmote();

	int getHoloEmoteUseCount() const;

	void decreaseHoloEmoteUseCount();

	bool isMarried() const;

	String getSpouseName() const;

	void setSpouseName(String& firstName);

	void removeSpouse();

	Account* getAccount();

	String getChosenVeteranReward(unsigned int milestone) const;

	bool hasChosenVeteranReward(const String& rewardTemplate) const;

	void clearVeteranReward(unsigned int milestone);

	void addEventPerk(SceneObject* deed);

	void removeEventPerk(SceneObject* deed);

	int getEventPerkCount() const;

	int getCharacterAgeInDays();

	int getBirthDate();

	void addToReactionFines(int fine);

	void setReactionFines(int amount);

	void subtractFromReactionFines(int amount);

	void updateReactionFineTimestamp();

	void updateReactionFineMailTimestamp();

	Time* getReactionFineTimestamp();

	Time* getReactionFineMailTimestamp();

	int getXpCap(const String& type) const;

	int getSpentJediSkillPoints();

	bool hasSchematic(DraftSchematic* schematic) const;

	bool hasEventPerk(const String& templatePath) const;

	void doFieldFactionChange(int newStatus);

	void addToVictimList(unsigned int playerID);

	bool hasOnVictimList(unsigned int playerID);

	int getPvpRating() const;

	void setPvpRating(int rating);

	bool isCloning() const;

	void setCloning(bool val);

	unsigned long long getPlayedMiliSecs() const;

	unsigned long long getSessionMiliSecs() const;

	unsigned long long getSessionTotalMovement() const;

	long long getSessionTotalCredits() const;

	String getMiliSecsTimeString(unsigned long long miliSecs, bool verbose = false) const;

	String getPlayedTimeString(bool verbose = false) const;

	WeakReference<PlayerObject*> _this;

	operator const PlayerObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~PlayerObjectImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerObject;
};

class PlayerObjectAdapter : public IntangibleObjectAdapter {
public:
	PlayerObjectAdapter(PlayerObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void finalize();

	void setLogLevel(int newLevel);

	int getLogLevel() const;

	int getCountMaxCov() const;

	void setCountMaxCov(int newMaxCov);

	void setClientPathWaypoint(SceneObject* obj);

	void initializeAccount();

	void notifyLoadFromDatabase();

	void unload();

	int calculateBhReward();

	void initializeTransientMembers();

	void sendBaselinesTo(SceneObject* player);

	void addOwnedStructure(StructureObject* obj);

	void removeOwnedStructure(StructureObject* obj);

	int getAcceptedTOSVersion() const;

	void setAcceptedTOSVersion(int version);

	void checkAndShowTOS();

	void createHelperDroid();

	int getTotalOwnedStructureCount();

	bool isOwnedStructure(StructureObject* obj);

	unsigned long long getOwnedStructure(int i);

	int getLotsRemaining();

	bool hasLotsRemaining(int lots);

	void notifySceneReady();

	void checkPendingMessages();

	bool hasCappedExperience(const String& xpType) const;

	void addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient);

	void setWaypoint(WaypointObject* waypoint, bool notifyClient);

	void removeWaypoint(unsigned long long waypointID, bool notifyClient, bool destroy);

	void updateWaypoint(unsigned long long waypointID);

	void removeWaypointBySpecialType(int specialTypeID, bool notifyClient);

	WaypointObject* getWaypointBySpecialType(int specialTypeID) const;

	WaypointObject* getSurveyWaypoint() const;

	bool hasWaypoint(unsigned long long objectID) const;

	WaypointObject* getWaypointAt(float x, float y, String& planet) const;

	int getWaypointListSize() const;

	WaypointObject* getWaypoint(int index) const;

	void setLanguageID(byte language, bool notifyClient);

	void addFriend(const String& name, bool notifyClient);

	void removeFriend(const String& name, bool notifyClient);

	void removeAllReverseFriends(const String& oldName);

	void addIgnore(const String& name, bool notifyClient);

	void removeIgnore(const String& name, bool notifyClient);

	void setTitle(const String& characterTitle, bool notifyClient);

	void setFoodFilling(int newValue, bool notifyClient);

	void setDrinkFilling(int newValue, bool notifyClient);

	void increaseFactionStanding(const String& factionName, float amount);

	void giveCoaBonus(const String& factionName, float amount, float currentStanding);

	void decreaseFactionStanding(const String& factionName, float amount);

	void setFactionStanding(const String& factionName, float amount);

	float getFactionStanding(const String& factionName) const;

	void setScreenPlayData(const String& screenPlay, const String& variable, const String& data);

	void deleteScreenPlayData(const String& screenPlay, const String& variable);

	String getScreenPlayData(const String& screenPlay, const String& variable) const;

	void clearScreenPlayData(const String& screenPlay);

	void activateRecovery();

	void activateForcePowerRegen();

	void doRecovery(int latency);

	void disconnect(bool closeClient, bool doLock);

	void reload(ZoneClientSession* client);

	void setOffline();

	void setLinkDead(bool isSafeLogout);

	void setOnline();

	void setLoggingOut();

	void activateJournalQuest(unsigned int questCrc, bool notifyClient);

	void completeJournalQuest(unsigned int questCrc, bool notifyClient);

	void clearJournalQuest(unsigned int questCrc, bool notifyClient);

	void activateJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient);

	void completeJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient);

	void clearJournalQuestTask(unsigned int questCrc, int taskNum, bool notifyClient);

	bool isJournalQuestActive(unsigned int questCrc);

	bool isJournalQuestComplete(unsigned int questCrc);

	bool isJournalQuestTaskActive(unsigned int questCrc, int taskNum);

	bool isJournalQuestTaskComplete(unsigned int questCrc, int taskNum);

	void sendBadgesResponseTo(CreatureObject* player);

	void logout(bool doLock);

	void setJediState(int state, bool notifyClient);

	void setActiveQuestsBit(int bitIndex, byte value, bool notifyClient);

	void clearActiveQuestsBit(int bitIndex, bool notifyClient);

	bool canActivateQuest(int questID);

	void activateQuest(int questID);

	bool hasActiveQuestBitSet(int bitIndex) const;

	bool hasCompletedQuestsBitSet(int bitIndex) const;

	void setCompletedQuestsBit(int bitIndex, byte value, bool notifyClient);

	void clearCompletedQuestsBit(int bitIndex, bool notifyClient);

	void completeQuest(int questID);

	bool hasQuestData(unsigned int questCrc) const;

	void setLastNpcConvStr(const String& conv);

	void setLastNpcConvMessStr(const String& mess);

	String getLastNpcConvStr() const;

	String getLastNpcConvMessStr() const;

	String getLastNpcConvOption(int idx) const;

	void addLastNpcConvOptions(const String& option);

	int countLastNpcConvOptions() const;

	void clearLastNpcConvOptions();

	void setConversatingCreature(CreatureObject* creature);

	unsigned long long getConversatingCreature() const;

	void setTrainerZoneName(String& zoneName);

	String getTrainerZoneName() const;

	void addPersistentMessage(unsigned long long id);

	void dropPersistentMessage(unsigned long long id);

	void unloadSpawnedChildren();

	void addToConsentList(const String& name);

	bool hasInConsentList(const String& name) const;

	void removeFromConsentList(const String& name);

	String getConsentName(int i) const;

	int getConsentListSize() const;

	int getReactionFines() const;

	String getFactionRank() const;

	void setCommandMessageString(unsigned int actionCRC, String& message);

	void removeCommandMessageString(unsigned int actionCRC);

	unsigned long long getDeclaredResidence() const;

	void setDeclaredResidence(BuildingObject* residence);

	void setCloningFacility(BuildingObject* cloningfac);

	unsigned long long getCloningFacility() const;

	void notifyOnline();

	void doDigest(int fillingReduction);

	bool isDigesting() const;

	String getSavedTerrainName() const;

	void setSavedParentID(unsigned long long id);

	void setSavedTerrainName(const String& name);

	void setBirthDate(int date);

	void setForcePower(int fp, bool notifyClient);

	void setForcePowerMax(int newValue, bool notifyClient);

	void doForceRegen();

	void recalculateForcePower();

	int getForcePowerRegen();

	unsigned long long getSavedParentID() const;

	unsigned int getNewSuiBoxID(unsigned int type);

	bool hasSuiBox(unsigned int boxID) const;

	Reference<SuiBox* > getSuiBox(unsigned int boxID) const;

	void removeSuiBox(unsigned int boxID, bool closeWindowToClient);

	void removeSuiBoxType(unsigned int windowType);

	bool hasSuiBoxWindowType(unsigned int windowType);

	void closeSuiWindowType(unsigned int windowType);

	Reference<SuiBox* > getSuiBoxFromWindowType(unsigned int windowType);

	void addSuiBox(SuiBox* sui);

	void addPermissionGroup(const String& group, bool updatePermissions);

	void removePermissionGroup(const String& group, bool updatePermissions);

	void updateInRangeBuildingPermissions();

	bool hasPermissionGroup(const String& group) const;

	void addIncapacitationTime();

	byte getIncapacitationCounter() const;

	void resetIncapacitationTimes();

	void addToDuelList(CreatureObject* targetPlayer);

	void removeFromDuelList(CreatureObject* targetPlayer);

	Reference<CreatureObject* > getDuelListObject(int index);

	bool requestedDuelTo(CreatureObject* targetPlayer) const;

	bool isDuelListEmpty() const;

	int getDuelListSize() const;

	void addToActivePets(AiAgent* pet);

	void removeFromActivePets(AiAgent* pet);

	AiAgent* getActivePet(int index);

	bool hasActivePet(AiAgent* pet) const;

	int getActivePetsSize() const;

	UnicodeString getBiography() const;

	void notifyOffline();

	void resetSessionStats(bool isSessionStart);

	void incrementSessionMovement(float moveDelta);

	void logSessionStats(bool isSessionEnd);

	void setBadge(unsigned int badge);

	void revokeBadge(unsigned int badge);

	void awardBadge(unsigned int badge);

	void setTeleporting(bool val);

	void setOnLoadScreen(bool val);

	void setForcedTransform(bool val);

	int getNumBadges() const;

	int getBadgeTypeCount(unsigned int type) const;

	bool hasFriend(const String& name) const;

	int getFriendListSize() const;

	bool isIgnoring(const String& name) const;

	void addReverseFriend(const String& name);

	void removeReverseFriend(const String& name);

	void sendFriendLists();

	bool hasAbility(const String& ability) const;

	bool hasCommandMessageString(unsigned int actionCRC) const;

	String getTitle() const;

	unsigned int getAdminLevel() const;

	void setAdminLevel(unsigned int adminlvl);

	int getPriviledgeFlag() const;

	void setPriviledgeFlag(int flag);

	void setBiography(const UnicodeString& bio);

	bool hasGodMode() const;

	bool isPrivileged() const;

	bool isStaff() const;

	bool isAdmin() const;

	bool setPlayerBit(unsigned int bit, bool notifyClient);

	bool clearPlayerBit(unsigned int bit, bool notifyClient);

	void toggleCharacterBit(unsigned int bit);

	bool isLFG() const;

	bool isAFK() const;

	bool isAnonymous() const;

	bool isRoleplayer() const;

	bool isNewbieHelper() const;

	int getTotalPlayedTime() const;

	int getForcePower() const;

	int getForcePowerMax() const;

	DraftSchematic* getSchematic(int i) const;

	int getFoodFilling() const;

	int getFoodFillingMax() const;

	int getDrinkFilling() const;

	int getDrinkFillingMax() const;

	int getJediState() const;

	byte getLanguageID() const;

	bool isTeleporting() const;

	bool isOnLoadScreen() const;

	bool isForcedTransform() const;

	void addChatRoom(unsigned int roomID);

	void removeChatRoom(unsigned int roomID);

	void addOwnedChatRoom(unsigned int roomID);

	void removeOwnedChatRoom(unsigned int roomID);

	int getOwnedChatRoomCount();

	void setBankLocation(const String& location);

	String getBankLocation() const;

	int getExperience(const String& xp) const;

	void maximizeExperience();

	void activateMissions();

	String getCommandMessageString(unsigned int actionCRC) const;

	bool hasBadge(unsigned int badge) const;

	void clearDisconnectEvent();

	bool isOnline() const;

	bool isOffline() const;

	bool isLinkDead() const;

	bool isLoggingOut() const;

	void setSkillPoints(int points);

	void addSkillPoints(int points);

	int getSkillPoints() const;

	void updateLastValidatedPosition();

	unsigned int getAccountID() const;

	unsigned long long getServerMovementTimeDelta() const;

	void setClientLastMovementStamp(unsigned int stamp);

	void updateServerLastMovementStamp();

	void setAccountID(unsigned int id);

	unsigned int getClientLastMovementStamp() const;

	void addHologrindProfession(byte prof);

	void setMaximumLots(byte lots);

	byte getMaximumLots() const;

	String getStarterProfession() const;

	void setStarterProfession(String& profession);

	unsigned long long getPerformanceBuffTarget() const;

	void setPerformanceBuffTarget(unsigned long long target);

	void setDebug(bool value);

	bool getDebug() const;

	float getVisibility() const;

	void setVisibility(float value);

	void updateLastCombatActionTimestamp(bool updateGcwCrackdownAction, bool updateGcwAction, bool updateBhAction);

	void updateLastBhPvpCombatActionTimestamp();

	void updateLastGcwPvpCombatActionTimestamp();

	void updateLastPvpAreaCombatActionTimestamp();

	bool hasTef() const;

	bool hasPvpTef() const;

	bool hasGcwTef() const;

	bool hasBhTef() const;

	void setCrackdownTefTowards(unsigned int factionCrc, bool scheduleTefRemovalTask);

	bool hasCrackdownTefTowards(unsigned int factionCrc) const;

	bool hasCrackdownTef() const;

	void schedulePvpTefRemovalTask(bool removeCrackdownGcwTefNow, bool removeGcwTefNow, bool removeBhTefNow);

	void schedulePvpTefRemovalTask(bool removeNow);

	bool isInPvpArea(bool checkTime);

	void addVendor(SceneObject* vendor);

	void removeVendor(SceneObject* vendor);

	int getVendorCount();

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	void deleteAllPersistentMessages();

	bool isJedi() const;

	bool isJediLight() const;

	bool isJediDark() const;

	bool isMuted() const;

	void setMutedState(bool mute);

	String getMutedReason() const;

	void setMutedReason(String& reason);

	String getInstalledHoloEmote() const;

	void setInstalledHoloEmote(String& holoEmote);

	void removeInstalledHoloEmote();

	int getHoloEmoteUseCount() const;

	void decreaseHoloEmoteUseCount();

	bool isMarried() const;

	String getSpouseName() const;

	void setSpouseName(String& firstName);

	void removeSpouse();

	Account* getAccount();

	String getChosenVeteranReward(unsigned int milestone) const;

	bool hasChosenVeteranReward(const String& rewardTemplate) const;

	void clearVeteranReward(unsigned int milestone);

	void addEventPerk(SceneObject* deed);

	void removeEventPerk(SceneObject* deed);

	int getEventPerkCount() const;

	int getCharacterAgeInDays();

	int getBirthDate();

	void addToReactionFines(int fine);

	void setReactionFines(int amount);

	void subtractFromReactionFines(int amount);

	void updateReactionFineTimestamp();

	void updateReactionFineMailTimestamp();

	int getXpCap(const String& type) const;

	int getSpentJediSkillPoints();

	bool hasSchematic(DraftSchematic* schematic) const;

	bool hasEventPerk(const String& templatePath) const;

	void doFieldFactionChange(int newStatus);

	void addToVictimList(unsigned int playerID);

	bool hasOnVictimList(unsigned int playerID);

	int getPvpRating() const;

	void setPvpRating(int rating);

	bool isCloning() const;

	void setCloning(bool val);

	unsigned long long getPlayedMiliSecs() const;

	unsigned long long getSessionMiliSecs() const;

	unsigned long long getSessionTotalMovement() const;

	long long getSessionTotalCredits() const;

	String getMiliSecsTimeString(unsigned long long miliSecs, bool verbose) const;

	String getPlayedTimeString(bool verbose) const;

};

class PlayerObjectHelper : public DistributedObjectClassHelper, public Singleton<PlayerObjectHelper> {
	static PlayerObjectHelper* staticInitializer;

public:
	PlayerObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerObjectHelper>;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObjectPOD : public IntangibleObjectPOD {
public:
	Optional<int> playerLogLevel;

	Optional<PlayerBitmasks> playerBitmask;

	Optional<String> title;

	Optional<String> savedTerrainName;

	Optional<unsigned long long> savedParentID;

	Optional<Badges> badges;

	Optional<int> birthDate;

	Optional<int> forcePower;

	Optional<int> forcePowerMax;

	Optional<int> foodFilling;

	Optional<int> foodFillingMax;

	Optional<int> drinkFilling;

	Optional<int> drinkFillingMax;

	Optional<int> reactionFines;

	Optional<Time> reactionFineTimestamp;

	Optional<Time> reactionFineMailTimestamp;

	Optional<String> starterProfession;

	Optional<String> bankLocation;

	Optional<bool> teleporting;

	Optional<bool> onLoadScreen;

	Optional<bool> forcedTransform;

	Optional<bool> muted;

	Optional<String> mutedReason;

	Optional<int> tosVersionAccepted;

	Optional<SortedVector<unsigned long long>> ownedStructures;

	Optional<SortedVector<unsigned long long>> ownedVendors;

	Optional<byte> maximumLots;

	Optional<int> jediState;

	Optional<unsigned int> adminLevel;

	Optional<int> priviledgeFlag;

	Optional<byte> languageID;

	Optional<VectorMap<String, int>> xpTypeCapList;

	Optional<VectorMap<unsigned int, String>> commandMessageStrings;

	Optional<DeltaVectorMap<String, int>> experienceList;

	Optional<FrsData> frsData;

	Optional<WaypointList> waypointList;

	Optional<AbilityList> abilityList;

	Optional<FriendList> friendList;

	Optional<IgnoreList> ignoreList;

	Optional<FactionStandingList> factionStandingList;

	Optional<SchematicList> schematicList;

	Optional<Vector<unsigned int>> incapacitationTimes;

	Optional<unsigned int> suiBoxNextID;

	Optional<VectorMap<unsigned int, ManagedReference<SuiBoxPOD* > >> suiBoxes;

	Optional<SortedVector<unsigned int>> chatRooms;

	Optional<SortedVector<unsigned int>> ownedChatRooms;

	Optional<Vector<unsigned long long>> victimList;

	Optional<unsigned long long> declaredResidence;

	Optional<unsigned long long> cloningFacility;

	Optional<bool> isPlayerCloning;

	Optional<SortedVector<unsigned long long>> persistentMessages;

	Optional<UnicodeString> biography;

	Optional<SortedVector<String>> consentList;

	Optional<String> lastNpcConvoMessage;

	Optional<String> lastNpcConvo;

	Optional<Vector<String>> lastNpcConvoOptions;

	Optional<unsigned long long> conversatingCreature;

	Optional<Vector3> trainerCoordinates;

	Optional<Vector3> lastLogoutWorldPosition;

	Optional<String> trainerZoneName;

	Optional<Time> logoutTimeStamp;

	Optional<int> onlineStatus;

	Optional<int> skillPoints;

	Optional<int> pvpRating;

	Optional<Time> lastPvpRatingUpdate;

	Optional<Vector<byte>> hologrindProfessions;

	Optional<unsigned int> clientLastMovementStamp;

	Optional<Time> serverLastMovementStamp;

	Optional<ValidatedPosition> lastValidatedPosition;

	Optional<unsigned int> accountID;

	Optional<VectorMap<String, String>> screenPlayData;

	Optional<SortedVector<String>> permissionGroups;

	Optional<unsigned long long> performanceBuffTarget;

	Optional<bool> debugOutput;

	Optional<float> visibility;

	Optional<Time> lastVisibilityUpdateTimestamp;

	Optional<Time> lastBhPvpCombatActionTimestamp;

	Optional<Time> lastGcwPvpCombatActionTimestamp;

	Optional<Time> lastCrackdownGcwCombatActionTimestamp;

	Optional<Time> lastPvpAreaCombatActionTimestamp;

	Optional<unsigned int> crackdownFactionTefCrc;

	Optional<Time> lastDigestion;

	Optional<SortedVector<ManagedReference<AiAgentPOD* > >> activePets;

	Optional<DeltaBitArray> activeQuests;

	Optional<DeltaBitArray> completedQuests;

	Optional<String> installedHoloEmote;

	Optional<int> holoEmoteUseCount;

	Optional<String> spouseName;

	Optional<VectorMap<unsigned int, String>> chosenVeteranRewards;

	Optional<SortedVector<unsigned long long>> currentEventPerks;

	Optional<DeltaVectorMap<uint32, PlayerQuestData >> playerQuestsData;

	Optional<unsigned long long> miliSecsPlayed;

	Optional<unsigned long long> miliSecsSession;

	Optional<unsigned long long> sessionStatsMiliSecs;

	String _className;
	PlayerObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~PlayerObjectPOD();

};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#endif /*PLAYEROBJECTPOD_H_*/
