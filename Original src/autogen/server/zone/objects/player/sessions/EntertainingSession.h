/*
 *	autogen/server/zone/objects/player/sessions/EntertainingSession.h generated by engine3 IDL compiler 0.70
 */

#ifndef ENTERTAININGSESSION_H_
#define ENTERTAININGSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class Instrument;

class InstrumentPOD;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class EntertainingSessionTask;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

namespace server {
namespace zone {
namespace objects {
namespace player {

class EntertainingObserver;

class EntertainingObserverPOD;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "system/util/Vector.h"

#include "server/zone/objects/player/EntertainingDataMap.h"

#include "system/lang/Time.h"

#include "engine/log/Logger.h"

#include "engine/util/Facade.h"

#include "system/util/SortedVector.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class EntertainingSession : public Facade {
public:
	EntertainingSession(CreatureObject* ent);

	void doEntertainerPatronEffects();

	void doPerformanceAction();

	void addEntertainerFlourishBuff();

	void startDancing(int perfIndex);

	void startPlayingMusic(int perfIndex, Instrument* instrument);

	void joinBand();

	void startEntertaining();

	void healWounds(CreatureObject* creature, float woundHeal, float shockHeal);

	bool isInEntertainingBuilding(CreatureObject* creature);

	void doFlourish(int flourishNumber, bool grantXp);

	bool canHealBattleFatigue();

	bool canGiveEntertainBuff();

	void addFlourishXp(int xp);

	void addHealingXp(int xp);

	void addHealingXpGroup(int xp);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void stopPlaying();

	void stopMusic(bool skipOutro, bool bandStop = false, bool isBandLeader = false);

	void clearOutro(bool bandStop, bool isBandLeader);

	void stopDancing();

	void activateAction();

	void startTickTask();

	void addEntertainerBuffDuration(CreatureObject* creature, int performanceType, float duration);

	void addEntertainerBuffStrength(CreatureObject* creature, int performanceType, float strength);

	void setEntertainerBuffDuration(CreatureObject* creature, int performanceType, float duration);

	void setEntertainerBuffStrength(CreatureObject* creature, int performanceType, float strength);

	int getEntertainerBuffStrength(CreatureObject* creature, int performanceType);

	int getEntertainerBuffDuration(CreatureObject* creature, int performanceType);

	int getEntertainerBuffStartTime(CreatureObject* creature, int performanceType);

	void sendEntertainingUpdate(CreatureObject* creature, int performanceType, bool startPerformance);

	void sendEntertainmentUpdate(CreatureObject* creature, unsigned long long entid, const String& mood);

	void activateEntertainerBuff(CreatureObject* creature, int performanceType);

	String getPerformanceName();

	void addPatron(CreatureObject* creature);

	void removePatron(CreatureObject* creature);

	bool isDancing();

	bool isPlayingMusic();

	bool isAcceptingBandFlourishes();

	void setAcceptingBandFlourishes(bool val);

	void doPerformEffect(int effectId, int effectLevel);

	void updateEntertainerMissionStatus(bool entertaining, const int missionType);

	bool isInDenyServiceList(CreatureObject* target);

	void addToDenyServiceList(CreatureObject* target);

	void removeFromDenyServiceList(CreatureObject* target);

	void increaseEntertainerBuff(CreatureObject* patron);

	void awardEntertainerExperience();

	SortedVector<ManagedReference<CreatureObject* > > getPatrons();

	int getAudienceSize();

	int getBandAudienceSize();

	void incrementApplauseCount();

	int getApplauseCount();

	int getPerformanceIndex();

	bool isPerformingOutro();

	void setPerformingOutro(bool val);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	EntertainingSession(DummyConstructorParameter* param);

	virtual ~EntertainingSession();

	friend class EntertainingSessionHelper;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class EntertainingSessionImplementation : public FacadeImplementation {
protected:
	ManagedWeakReference<CreatureObject* > entertainer;

	ManagedReference<EntertainingObserver* > observer;

	EntertainingDataMap patronDataMap;

	SortedVector<ManagedReference<CreatureObject* > > denyServiceList;

	Reference<EntertainingSessionTask* > tickTask;

	Time nextTick;

	int performanceIndex;

	int flourishXp;

	int oldFlourishXp;

	int healingXp;

	int flourishCount;

	int applauseCount;

	bool acceptingBandFlourishes;

	bool performingOutro;

public:
	EntertainingSessionImplementation(CreatureObject* ent);

	EntertainingSessionImplementation(DummyConstructorParameter* param);

	void doEntertainerPatronEffects();

	void doPerformanceAction();

	void addEntertainerFlourishBuff();

	void startDancing(int perfIndex);

	void startPlayingMusic(int perfIndex, Instrument* instrument);

	void joinBand();

	void startEntertaining();

	void finalize();

	void healWounds(CreatureObject* creature, float woundHeal, float shockHeal);

	bool isInEntertainingBuilding(CreatureObject* creature);

	void doFlourish(int flourishNumber, bool grantXp);

	bool canHealBattleFatigue();

	bool canGiveEntertainBuff();

	void addFlourishXp(int xp);

	void addHealingXp(int xp);

	void addHealingXpGroup(int xp);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void stopPlaying();

	void stopMusic(bool skipOutro, bool bandStop = false, bool isBandLeader = false);

	void clearOutro(bool bandStop, bool isBandLeader);

	void stopDancing();

	void activateAction();

	void startTickTask();

	void addEntertainerBuffDuration(CreatureObject* creature, int performanceType, float duration);

	void addEntertainerBuffStrength(CreatureObject* creature, int performanceType, float strength);

	void setEntertainerBuffDuration(CreatureObject* creature, int performanceType, float duration);

	void setEntertainerBuffStrength(CreatureObject* creature, int performanceType, float strength);

	int getEntertainerBuffStrength(CreatureObject* creature, int performanceType);

	int getEntertainerBuffDuration(CreatureObject* creature, int performanceType);

	int getEntertainerBuffStartTime(CreatureObject* creature, int performanceType);

	void sendEntertainingUpdate(CreatureObject* creature, int performanceType, bool startPerformance);

	void sendEntertainmentUpdate(CreatureObject* creature, unsigned long long entid, const String& mood);

	void activateEntertainerBuff(CreatureObject* creature, int performanceType);

	String getPerformanceName();

	void addPatron(CreatureObject* creature);

	void removePatron(CreatureObject* creature);

	bool isDancing();

	bool isPlayingMusic();

	bool isAcceptingBandFlourishes();

	void setAcceptingBandFlourishes(bool val);

	void doPerformEffect(int effectId, int effectLevel);

	void updateEntertainerMissionStatus(bool entertaining, const int missionType);

	bool isInDenyServiceList(CreatureObject* target);

	void addToDenyServiceList(CreatureObject* target);

	void removeFromDenyServiceList(CreatureObject* target);

	void increaseEntertainerBuff(CreatureObject* patron);

	void awardEntertainerExperience();

	SortedVector<ManagedReference<CreatureObject* > > getPatrons();

	int getAudienceSize();

	int getBandAudienceSize();

	void incrementApplauseCount();

	int getApplauseCount();

	int getPerformanceIndex();

	bool isPerformingOutro();

	void setPerformingOutro(bool val);

	WeakReference<EntertainingSession*> _this;

	operator const EntertainingSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~EntertainingSessionImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class EntertainingSession;
};

class EntertainingSessionAdapter : public FacadeAdapter {
public:
	EntertainingSessionAdapter(EntertainingSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void doEntertainerPatronEffects();

	void doPerformanceAction();

	void addEntertainerFlourishBuff();

	void startDancing(int perfIndex);

	void startPlayingMusic(int perfIndex, Instrument* instrument);

	void joinBand();

	void startEntertaining();

	void finalize();

	void healWounds(CreatureObject* creature, float woundHeal, float shockHeal);

	bool isInEntertainingBuilding(CreatureObject* creature);

	void doFlourish(int flourishNumber, bool grantXp);

	bool canHealBattleFatigue();

	bool canGiveEntertainBuff();

	void addFlourishXp(int xp);

	void addHealingXp(int xp);

	void addHealingXpGroup(int xp);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void stopPlaying();

	void stopMusic(bool skipOutro, bool bandStop, bool isBandLeader);

	void clearOutro(bool bandStop, bool isBandLeader);

	void stopDancing();

	void activateAction();

	void startTickTask();

	int getEntertainerBuffStrength(CreatureObject* creature, int performanceType);

	int getEntertainerBuffDuration(CreatureObject* creature, int performanceType);

	int getEntertainerBuffStartTime(CreatureObject* creature, int performanceType);

	void sendEntertainingUpdate(CreatureObject* creature, int performanceType, bool startPerformance);

	void sendEntertainmentUpdate(CreatureObject* creature, unsigned long long entid, const String& mood);

	void activateEntertainerBuff(CreatureObject* creature, int performanceType);

	String getPerformanceName();

	void addPatron(CreatureObject* creature);

	void removePatron(CreatureObject* creature);

	bool isDancing();

	bool isPlayingMusic();

	bool isAcceptingBandFlourishes();

	void setAcceptingBandFlourishes(bool val);

	void doPerformEffect(int effectId, int effectLevel);

	void updateEntertainerMissionStatus(bool entertaining, const int missionType);

	bool isInDenyServiceList(CreatureObject* target);

	void addToDenyServiceList(CreatureObject* target);

	void removeFromDenyServiceList(CreatureObject* target);

	void increaseEntertainerBuff(CreatureObject* patron);

	void awardEntertainerExperience();

	int getAudienceSize();

	int getBandAudienceSize();

	void incrementApplauseCount();

	int getApplauseCount();

	int getPerformanceIndex();

	bool isPerformingOutro();

	void setPerformingOutro(bool val);

};

class EntertainingSessionHelper : public DistributedObjectClassHelper, public Singleton<EntertainingSessionHelper> {
	static EntertainingSessionHelper* staticInitializer;

public:
	EntertainingSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<EntertainingSessionHelper>;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class EntertainingSessionPOD : public FacadePOD {
public:
	Optional<ManagedWeakReference<CreatureObjectPOD* >> entertainer;

	Optional<ManagedReference<EntertainingObserverPOD* >> observer;

	Optional<EntertainingDataMap> patronDataMap;

	Optional<SortedVector<ManagedReference<CreatureObjectPOD* > >> denyServiceList;

	Optional<Time> nextTick;

	Optional<int> performanceIndex;

	Optional<int> flourishXp;

	Optional<int> oldFlourishXp;

	Optional<int> healingXp;

	Optional<int> flourishCount;

	Optional<int> applauseCount;

	Optional<bool> acceptingBandFlourishes;

	Optional<bool> performingOutro;

	String _className;
	EntertainingSessionPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~EntertainingSessionPOD();

};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

#endif /*ENTERTAININGSESSIONPOD_H_*/
