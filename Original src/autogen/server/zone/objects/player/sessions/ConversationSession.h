/*
 *	autogen/server/zone/objects/player/sessions/ConversationSession.h generated by engine3 IDL compiler 0.70
 */

#ifndef CONVERSATIONSESSION_H_
#define CONVERSATIONSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace conversation {

class ConversationScreen;

} // namespace conversation
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::conversation;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/util/Facade.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class ConversationSession : public Facade {
public:
	ConversationSession(CreatureObject* conversingCreature);

	void setLastConversationScreen(ConversationScreen* screen);

	ConversationScreen* getLastConversationScreen();

	ManagedWeakReference<CreatureObject* > getNPC();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ConversationSession(DummyConstructorParameter* param);

	virtual ~ConversationSession();

	friend class ConversationSessionHelper;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class ConversationSessionImplementation : public FacadeImplementation {
protected:
	Reference<ConversationScreen* > lastConversationScreen;

	ManagedWeakReference<CreatureObject* > npc;

public:
	ConversationSessionImplementation(CreatureObject* conversingCreature);

	ConversationSessionImplementation(DummyConstructorParameter* param);

	void setLastConversationScreen(ConversationScreen* screen);

	ConversationScreen* getLastConversationScreen();

	ManagedWeakReference<CreatureObject* > getNPC();

	WeakReference<ConversationSession*> _this;

	operator const ConversationSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ConversationSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ConversationSession;
};

class ConversationSessionAdapter : public FacadeAdapter {
public:
	ConversationSessionAdapter(ConversationSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	ManagedWeakReference<CreatureObject* > getNPC();

};

class ConversationSessionHelper : public DistributedObjectClassHelper, public Singleton<ConversationSessionHelper> {
	static ConversationSessionHelper* staticInitializer;

public:
	ConversationSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ConversationSessionHelper>;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class ConversationSessionPOD : public FacadePOD {
public:
	Optional<Reference<ConversationScreen* >> lastConversationScreen;

	Optional<ManagedWeakReference<CreatureObjectPOD* >> npc;

	String _className;
	ConversationSessionPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~ConversationSessionPOD();

};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

#endif /*CONVERSATIONSESSIONPOD_H_*/
