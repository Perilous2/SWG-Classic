/*
 *	autogen/server/zone/objects/player/sessions/SlicingSession.cpp generated by engine3 IDL compiler 0.70
 */

#include "SlicingSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

/*
 *	SlicingSessionStub
 */

enum {RPC_INITIALIZESESSION__,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_ENDSLICING__,RPC_ISBASESLICE__,RPC_ISKEYPADSLICE__,RPC_SETKEYPADSLICE__BOOL_,RPC_SETBASESLICE__BOOL_,RPC_GETSLICINGSKILL__CREATUREOBJECT_,RPC_HASPRECISIONLASERKNIFE__BOOL_,RPC_HASWEAPONUPGRADEKIT__,RPC_HASARMORUPGRADEKIT__,RPC_USECLAMPFROMINVENTORY__SLICINGTOOL_,};

SlicingSession::SlicingSession(CreatureObject* parent) : Facade(DummyConstructorParameter::instance()) {
	SlicingSessionImplementation* _implementation = new SlicingSessionImplementation(parent);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SlicingSession");
}

SlicingSession::SlicingSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("SlicingSession");
}

SlicingSession::~SlicingSession() {
}



void SlicingSession::initalizeSlicingMenu(CreatureObject* pl, TangibleObject* obj) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->initalizeSlicingMenu(pl, obj);
	}
}

void SlicingSession::handleMenuSelect(CreatureObject* pl, byte menuID, SuiListBox* suiBox) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->handleMenuSelect(pl, menuID, suiBox);
	}
}

int SlicingSession::initializeSession() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->initializeSession();
	}
}

int SlicingSession::cancelSession() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->cancelSession();
	}
}

int SlicingSession::clearSession() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->clearSession();
	}
}

void SlicingSession::endSlicing() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ENDSLICING__);

		method.executeWithVoidReturn();
	} else {
		_implementation->endSlicing();
	}
}

bool SlicingSession::isBaseSlice() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBASESLICE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isBaseSlice();
	}
}

bool SlicingSession::isKeypadSlice() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISKEYPADSLICE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isKeypadSlice();
	}
}

void SlicingSession::setKeypadSlice(bool val) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETKEYPADSLICE__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		_implementation->setKeypadSlice(val);
	}
}

void SlicingSession::setBaseSlice(bool val) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBASESLICE__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else {
		_implementation->setBaseSlice(val);
	}
}

int SlicingSession::getSlicingSkill(CreatureObject* slicer) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLICINGSKILL__CREATUREOBJECT_);
		method.addObjectParameter(slicer);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getSlicingSkill(slicer);
	}
}

bool SlicingSession::hasPrecisionLaserKnife(bool removeItem) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPRECISIONLASERKNIFE__BOOL_);
		method.addBooleanParameter(removeItem);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasPrecisionLaserKnife(removeItem);
	}
}

bool SlicingSession::hasWeaponUpgradeKit() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASWEAPONUPGRADEKIT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasWeaponUpgradeKit();
	}
}

bool SlicingSession::hasArmorUpgradeKit() {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASARMORUPGRADEKIT__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasArmorUpgradeKit();
	}
}

void SlicingSession::useClampFromInventory(SlicingTool* clamp) {
	SlicingSessionImplementation* _implementation = static_cast<SlicingSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_USECLAMPFROMINVENTORY__SLICINGTOOL_);
		method.addObjectParameter(clamp);

		method.executeWithVoidReturn();
	} else {
		_implementation->useClampFromInventory(clamp);
	}
}

DistributedObjectServant* SlicingSession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SlicingSession::_getImplementationForRead() const {
	return _impl;
}

void SlicingSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SlicingSessionImplementation
 */

SlicingSessionImplementation::SlicingSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


SlicingSessionImplementation::~SlicingSessionImplementation() {
}


void SlicingSessionImplementation::finalize() {
}

void SlicingSessionImplementation::_initializeImplementation() {
	_setClassHelper(SlicingSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SlicingSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SlicingSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* SlicingSessionImplementation::_getStub() {
	return _this.get();
}

SlicingSessionImplementation::operator const SlicingSession*() {
	return _this.get();
}

void SlicingSessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SlicingSessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SlicingSessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SlicingSessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SlicingSessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SlicingSessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SlicingSessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SlicingSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("SlicingSession");

}

void SlicingSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SlicingSessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SlicingSessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xc489db76: //SlicingSession.player
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;

	case 0x6d5b3bbd: //SlicingSession.slicingSuiBox
		TypeInfo<ManagedReference<SuiListBox* > >::parseFromBinaryStream(&slicingSuiBox, stream);
		return true;

	case 0x6356f5e1: //SlicingSession.firstCable
		TypeInfo<byte >::parseFromBinaryStream(&firstCable, stream);
		return true;

	case 0x1409ddfc: //SlicingSession.nodeCable
		TypeInfo<byte >::parseFromBinaryStream(&nodeCable, stream);
		return true;

	case 0xb8dad5ac: //SlicingSession.cableBlue
		TypeInfo<bool >::parseFromBinaryStream(&cableBlue, stream);
		return true;

	case 0x18e215b1: //SlicingSession.cableRed
		TypeInfo<bool >::parseFromBinaryStream(&cableRed, stream);
		return true;

	case 0x9b9ef53c: //SlicingSession.usedNode
		TypeInfo<bool >::parseFromBinaryStream(&usedNode, stream);
		return true;

	case 0x5759dfc: //SlicingSession.usedClamp
		TypeInfo<bool >::parseFromBinaryStream(&usedClamp, stream);
		return true;

	case 0x331f459c: //SlicingSession.baseSlice
		TypeInfo<bool >::parseFromBinaryStream(&baseSlice, stream);
		return true;

	case 0x213c63ae: //SlicingSession.keypadSlice
		TypeInfo<bool >::parseFromBinaryStream(&keypadSlice, stream);
		return true;

	}

	return false;
}

void SlicingSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SlicingSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SlicingSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xc489db76; //SlicingSession.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x6d5b3bbd; //SlicingSession.slicingSuiBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBox* > >::toBinaryStream(&slicingSuiBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x6356f5e1; //SlicingSession.firstCable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&firstCable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1409ddfc; //SlicingSession.nodeCable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&nodeCable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb8dad5ac; //SlicingSession.cableBlue
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cableBlue, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x18e215b1; //SlicingSession.cableRed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cableRed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x9b9ef53c; //SlicingSession.usedNode
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&usedNode, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x5759dfc; //SlicingSession.usedClamp
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&usedClamp, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x331f459c; //SlicingSession.baseSlice
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&baseSlice, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x213c63ae; //SlicingSession.keypadSlice
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&keypadSlice, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void SlicingSessionImplementation::writeJSON(nlohmann::json& j) {
	FacadeImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["player"] = player;

	thisObject["slicingSuiBox"] = slicingSuiBox;

	thisObject["firstCable"] = firstCable;

	thisObject["nodeCable"] = nodeCable;

	thisObject["cableBlue"] = cableBlue;

	thisObject["cableRed"] = cableRed;

	thisObject["usedNode"] = usedNode;

	thisObject["usedClamp"] = usedClamp;

	thisObject["baseSlice"] = baseSlice;

	thisObject["keypadSlice"] = keypadSlice;

	j["SlicingSession"] = thisObject;
}

SlicingSessionImplementation::SlicingSessionImplementation(CreatureObject* parent) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/SlicingSession.idl():  		Logger.setLoggingName("SlicingSession");
	Logger::setLoggingName("SlicingSession");
	// server/zone/objects/player/sessions/SlicingSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/objects/player/sessions/SlicingSession.idl():  		initializeSession();
	initializeSession();
}

int SlicingSessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/SlicingSession.idl():  		player = null;
	player = NULL;
	// server/zone/objects/player/sessions/SlicingSession.idl():  		tangibleObject = null;
	tangibleObject = NULL;
	// server/zone/objects/player/sessions/SlicingSession.idl():  		return 0;
	return 0;
}

String SlicingSessionImplementation::getPrefix(TangibleObject* obj) {
	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	if (obj->isMissionTerminal())	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "terminal_";
	return "terminal_";

	else 	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	if (isBaseSlice())	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "hq_security_";
	return "hq_security_";

	else 	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	if (isKeypadSlice())	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "keypad_";
	return "keypad_";

	else 	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	if (obj->isWeaponObject())	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "weapon_";
	return "weapon_";

	else 	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	if (obj->isArmorObject())	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "armor_";
	return "armor_";

	else 	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	if (obj->isContainerObject() || tangibleObject.get()->getGameObjectType() == 8245)	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "container_";
	return "container_";

	else 	// server/zone/objects/player/sessions/SlicingSession.idl():  			return "";
	return "";
}

byte SlicingSessionImplementation::getProgress() {
	// server/zone/objects/player/sessions/SlicingSession.idl():  		return ((byte) cableBlue + (byte) cableRed);
	return ((byte) cableBlue + (byte) cableRed);
}

bool SlicingSessionImplementation::isBaseSlice() {
	// server/zone/objects/player/sessions/SlicingSession.idl():  		return baseSlice;
	return baseSlice;
}

bool SlicingSessionImplementation::isKeypadSlice() {
	// server/zone/objects/player/sessions/SlicingSession.idl():  		return keypadSlice;
	return keypadSlice;
}

void SlicingSessionImplementation::setKeypadSlice(bool val) {
	// server/zone/objects/player/sessions/SlicingSession.idl():  		keypadSlice = val;
	keypadSlice = val;
}

void SlicingSessionImplementation::setBaseSlice(bool val) {
	// server/zone/objects/player/sessions/SlicingSession.idl():  		baseSlice = val;
	baseSlice = val;
}

/*
 *	SlicingSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SlicingSessionAdapter::SlicingSessionAdapter(SlicingSession* obj) : FacadeAdapter(obj) {
}

void SlicingSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			
			int _m_res = initializeSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CANCELSESSION__:
		{
			
			int _m_res = cancelSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CLEARSESSION__:
		{
			
			int _m_res = clearSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ENDSLICING__:
		{
			
			endSlicing();
			
		}
		break;
	case RPC_ISBASESLICE__:
		{
			
			bool _m_res = isBaseSlice();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ISKEYPADSLICE__:
		{
			
			bool _m_res = isKeypadSlice();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETKEYPADSLICE__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setKeypadSlice(val);
			
		}
		break;
	case RPC_SETBASESLICE__BOOL_:
		{
			bool val = inv->getBooleanParameter();
			
			setBaseSlice(val);
			
		}
		break;
	case RPC_GETSLICINGSKILL__CREATUREOBJECT_:
		{
			CreatureObject* slicer = static_cast<CreatureObject*>(inv->getObjectParameter());
			
			int _m_res = getSlicingSkill(slicer);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_HASPRECISIONLASERKNIFE__BOOL_:
		{
			bool removeItem = inv->getBooleanParameter();
			
			bool _m_res = hasPrecisionLaserKnife(removeItem);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASWEAPONUPGRADEKIT__:
		{
			
			bool _m_res = hasWeaponUpgradeKit();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_HASARMORUPGRADEKIT__:
		{
			
			bool _m_res = hasArmorUpgradeKit();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_USECLAMPFROMINVENTORY__SLICINGTOOL_:
		{
			SlicingTool* clamp = static_cast<SlicingTool*>(inv->getObjectParameter());
			
			useClampFromInventory(clamp);
			
		}
		break;
	default:
		FacadeAdapter::invokeMethod(methid, inv);
	}
}

int SlicingSessionAdapter::initializeSession() {
	return (static_cast<SlicingSession*>(stub))->initializeSession();
}

int SlicingSessionAdapter::cancelSession() {
	return (static_cast<SlicingSession*>(stub))->cancelSession();
}

int SlicingSessionAdapter::clearSession() {
	return (static_cast<SlicingSession*>(stub))->clearSession();
}

void SlicingSessionAdapter::endSlicing() {
	(static_cast<SlicingSession*>(stub))->endSlicing();
}

bool SlicingSessionAdapter::isBaseSlice() {
	return (static_cast<SlicingSession*>(stub))->isBaseSlice();
}

bool SlicingSessionAdapter::isKeypadSlice() {
	return (static_cast<SlicingSession*>(stub))->isKeypadSlice();
}

void SlicingSessionAdapter::setKeypadSlice(bool val) {
	(static_cast<SlicingSession*>(stub))->setKeypadSlice(val);
}

void SlicingSessionAdapter::setBaseSlice(bool val) {
	(static_cast<SlicingSession*>(stub))->setBaseSlice(val);
}

int SlicingSessionAdapter::getSlicingSkill(CreatureObject* slicer) {
	return (static_cast<SlicingSession*>(stub))->getSlicingSkill(slicer);
}

bool SlicingSessionAdapter::hasPrecisionLaserKnife(bool removeItem) {
	return (static_cast<SlicingSession*>(stub))->hasPrecisionLaserKnife(removeItem);
}

bool SlicingSessionAdapter::hasWeaponUpgradeKit() {
	return (static_cast<SlicingSession*>(stub))->hasWeaponUpgradeKit();
}

bool SlicingSessionAdapter::hasArmorUpgradeKit() {
	return (static_cast<SlicingSession*>(stub))->hasArmorUpgradeKit();
}

void SlicingSessionAdapter::useClampFromInventory(SlicingTool* clamp) {
	(static_cast<SlicingSession*>(stub))->useClampFromInventory(clamp);
}

/*
 *	SlicingSessionHelper
 */

SlicingSessionHelper* SlicingSessionHelper::staticInitializer = SlicingSessionHelper::instance();

SlicingSessionHelper::SlicingSessionHelper() {
	className = "SlicingSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void SlicingSessionHelper::finalizeHelper() {
	SlicingSessionHelper::finalize();
}

DistributedObject* SlicingSessionHelper::instantiateObject() {
	return new SlicingSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* SlicingSessionHelper::instantiateServant() {
	return new SlicingSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* SlicingSessionHelper::instantiatePOD() {
	return new SlicingSessionPOD();
}

DistributedObjectAdapter* SlicingSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SlicingSessionAdapter(static_cast<SlicingSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SlicingSessionPOD
 */

SlicingSessionPOD::~SlicingSessionPOD() {
}

SlicingSessionPOD::SlicingSessionPOD(void) {
	_className = "SlicingSession";
}


void SlicingSessionPOD::writeJSON(nlohmann::json& j) {
	FacadePOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (player)
		thisObject["player"] = player.value();

	if (slicingSuiBox)
		thisObject["slicingSuiBox"] = slicingSuiBox.value();

	if (firstCable)
		thisObject["firstCable"] = firstCable.value();

	if (nodeCable)
		thisObject["nodeCable"] = nodeCable.value();

	if (cableBlue)
		thisObject["cableBlue"] = cableBlue.value();

	if (cableRed)
		thisObject["cableRed"] = cableRed.value();

	if (usedNode)
		thisObject["usedNode"] = usedNode.value();

	if (usedClamp)
		thisObject["usedClamp"] = usedClamp.value();

	if (baseSlice)
		thisObject["baseSlice"] = baseSlice.value();

	if (keypadSlice)
		thisObject["keypadSlice"] = keypadSlice.value();

	j["SlicingSession"] = thisObject;
}


void SlicingSessionPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SlicingSessionPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SlicingSessionPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadePOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (player) {
	_nameHashCode = 0xc489db76; //SlicingSession.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (slicingSuiBox) {
	_nameHashCode = 0x6d5b3bbd; //SlicingSession.slicingSuiBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBoxPOD* > >::toBinaryStream(&slicingSuiBox.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (firstCable) {
	_nameHashCode = 0x6356f5e1; //SlicingSession.firstCable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&firstCable.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (nodeCable) {
	_nameHashCode = 0x1409ddfc; //SlicingSession.nodeCable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&nodeCable.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (cableBlue) {
	_nameHashCode = 0xb8dad5ac; //SlicingSession.cableBlue
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cableBlue.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (cableRed) {
	_nameHashCode = 0x18e215b1; //SlicingSession.cableRed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cableRed.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (usedNode) {
	_nameHashCode = 0x9b9ef53c; //SlicingSession.usedNode
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&usedNode.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (usedClamp) {
	_nameHashCode = 0x5759dfc; //SlicingSession.usedClamp
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&usedClamp.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (baseSlice) {
	_nameHashCode = 0x331f459c; //SlicingSession.baseSlice
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&baseSlice.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (keypadSlice) {
	_nameHashCode = 0x213c63ae; //SlicingSession.keypadSlice
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&keypadSlice.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool SlicingSessionPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadePOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xc489db76: //SlicingSession.player
		{
			ManagedWeakReference<CreatureObjectPOD* > _mnplayer;
			TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::parseFromBinaryStream(&_mnplayer, stream);
			player = std::move(_mnplayer);
		}
		return true;

	case 0x6d5b3bbd: //SlicingSession.slicingSuiBox
		{
			ManagedReference<SuiListBoxPOD* > _mnslicingSuiBox;
			TypeInfo<ManagedReference<SuiListBoxPOD* > >::parseFromBinaryStream(&_mnslicingSuiBox, stream);
			slicingSuiBox = std::move(_mnslicingSuiBox);
		}
		return true;

	case 0x6356f5e1: //SlicingSession.firstCable
		{
			byte _mnfirstCable;
			TypeInfo<byte >::parseFromBinaryStream(&_mnfirstCable, stream);
			firstCable = std::move(_mnfirstCable);
		}
		return true;

	case 0x1409ddfc: //SlicingSession.nodeCable
		{
			byte _mnnodeCable;
			TypeInfo<byte >::parseFromBinaryStream(&_mnnodeCable, stream);
			nodeCable = std::move(_mnnodeCable);
		}
		return true;

	case 0xb8dad5ac: //SlicingSession.cableBlue
		{
			bool _mncableBlue;
			TypeInfo<bool >::parseFromBinaryStream(&_mncableBlue, stream);
			cableBlue = std::move(_mncableBlue);
		}
		return true;

	case 0x18e215b1: //SlicingSession.cableRed
		{
			bool _mncableRed;
			TypeInfo<bool >::parseFromBinaryStream(&_mncableRed, stream);
			cableRed = std::move(_mncableRed);
		}
		return true;

	case 0x9b9ef53c: //SlicingSession.usedNode
		{
			bool _mnusedNode;
			TypeInfo<bool >::parseFromBinaryStream(&_mnusedNode, stream);
			usedNode = std::move(_mnusedNode);
		}
		return true;

	case 0x5759dfc: //SlicingSession.usedClamp
		{
			bool _mnusedClamp;
			TypeInfo<bool >::parseFromBinaryStream(&_mnusedClamp, stream);
			usedClamp = std::move(_mnusedClamp);
		}
		return true;

	case 0x331f459c: //SlicingSession.baseSlice
		{
			bool _mnbaseSlice;
			TypeInfo<bool >::parseFromBinaryStream(&_mnbaseSlice, stream);
			baseSlice = std::move(_mnbaseSlice);
		}
		return true;

	case 0x213c63ae: //SlicingSession.keypadSlice
		{
			bool _mnkeypadSlice;
			TypeInfo<bool >::parseFromBinaryStream(&_mnkeypadSlice, stream);
			keypadSlice = std::move(_mnkeypadSlice);
		}
		return true;

	}

	return false;
}

void SlicingSessionPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SlicingSessionPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void SlicingSessionPOD::writeObjectCompact(ObjectOutputStream* stream) {
	FacadePOD::writeObjectCompact(stream);

	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);

	TypeInfo<ManagedReference<SuiListBoxPOD* > >::toBinaryStream(&slicingSuiBox.value(), stream);

	TypeInfo<byte >::toBinaryStream(&firstCable.value(), stream);

	TypeInfo<byte >::toBinaryStream(&nodeCable.value(), stream);

	TypeInfo<bool >::toBinaryStream(&cableBlue.value(), stream);

	TypeInfo<bool >::toBinaryStream(&cableRed.value(), stream);

	TypeInfo<bool >::toBinaryStream(&usedNode.value(), stream);

	TypeInfo<bool >::toBinaryStream(&usedClamp.value(), stream);

	TypeInfo<bool >::toBinaryStream(&baseSlice.value(), stream);

	TypeInfo<bool >::toBinaryStream(&keypadSlice.value(), stream);


}

