/*
 *	autogen/server/zone/objects/player/sessions/CitySpecializationSession.h generated by engine3 IDL compiler 0.70
 */

#ifndef CITYSPECIALIZATIONSESSION_H_
#define CITYSPECIALIZATIONSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegion;

class CityRegionPOD;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "server/zone/objects/scene/SessionFacadeType.h"

#include "engine/util/Facade.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class CitySpecializationSession : public Facade {
public:
	CitySpecializationSession(CreatureObject* creature, CityRegion* city, SceneObject* terminal = NULL);

	int initializeSession();

	int sendConfirmationBox(const String& choice);

	int acceptChoice();

	int cancelSession();

	int clearSession();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CitySpecializationSession(DummyConstructorParameter* param);

	virtual ~CitySpecializationSession();

	friend class CitySpecializationSessionHelper;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class CitySpecializationSessionImplementation : public FacadeImplementation {
protected:
	ManagedReference<CreatureObject* > creatureObject;

	ManagedReference<CityRegion* > cityRegion;

	ManagedReference<SceneObject* > terminalObject;

	String specialization;

public:
	CitySpecializationSessionImplementation(CreatureObject* creature, CityRegion* city, SceneObject* terminal = NULL);

	CitySpecializationSessionImplementation(DummyConstructorParameter* param);

	int initializeSession();

	int sendConfirmationBox(const String& choice);

	int acceptChoice();

	int cancelSession();

	int clearSession();

	WeakReference<CitySpecializationSession*> _this;

	operator const CitySpecializationSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CitySpecializationSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CitySpecializationSession;
};

class CitySpecializationSessionAdapter : public FacadeAdapter {
public:
	CitySpecializationSessionAdapter(CitySpecializationSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int initializeSession();

	int sendConfirmationBox(const String& choice);

	int acceptChoice();

	int cancelSession();

	int clearSession();

};

class CitySpecializationSessionHelper : public DistributedObjectClassHelper, public Singleton<CitySpecializationSessionHelper> {
	static CitySpecializationSessionHelper* staticInitializer;

public:
	CitySpecializationSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CitySpecializationSessionHelper>;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class CitySpecializationSessionPOD : public FacadePOD {
public:
	Optional<ManagedReference<CreatureObjectPOD* >> creatureObject;

	Optional<ManagedReference<CityRegionPOD* >> cityRegion;

	Optional<ManagedReference<SceneObjectPOD* >> terminalObject;

	Optional<String> specialization;

	String _className;
	CitySpecializationSessionPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~CitySpecializationSessionPOD();

};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

#endif /*CITYSPECIALIZATIONSESSIONPOD_H_*/
