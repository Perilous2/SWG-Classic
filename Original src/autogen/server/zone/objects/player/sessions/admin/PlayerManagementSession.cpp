/*
 *	autogen/server/zone/objects/player/sessions/admin/PlayerManagementSession.cpp generated by engine3 IDL compiler 0.70
 */

#include "PlayerManagementSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/login/account/Account.h"

/*
 *	PlayerManagementSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 1653682681,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_ADDACCOUNTSUI__SUILISTBOX_,RPC_BAN__INT_INT_STRING_STRING_,RPC_GETPLAYERINFO__INT_STRING_,RPC_SENDACCOUNTINFO__,RPC_SENDBANDURATION__,RPC_PARSEBANDURATION__STRING_,RPC_SENDBANREASON__BOOL_,RPC_SETBANREASON__STRING_,RPC_SHOWBANSUMMARY__,RPC_SHOWUNBANSUMMARY__,RPC_COMPLETEBAN__,RPC_GETBANDURATION__INT_};

PlayerManagementSession::PlayerManagementSession(Account* account, CreatureObject* adm) : Facade(DummyConstructorParameter::instance()) {
	PlayerManagementSessionImplementation* _implementation = new PlayerManagementSessionImplementation(account, adm);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PlayerManagementSession");
}

PlayerManagementSession::PlayerManagementSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("PlayerManagementSession");
}

PlayerManagementSession::~PlayerManagementSession() {
}



int PlayerManagementSession::initializeSession() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->initializeSession();
	}
}

int PlayerManagementSession::cancelSession() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->cancelSession();
	}
}

int PlayerManagementSession::clearSession() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->clearSession();
	}
}

void PlayerManagementSession::addAccountSui(SuiListBox* box) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACCOUNTSUI__SUILISTBOX_);
		method.addObjectParameter(box);

		method.executeWithVoidReturn();
	} else {
		_implementation->addAccountSui(box);
	}
}

void PlayerManagementSession::ban(const int tablevel, unsigned const int galaxy, const String& gname, const String& name) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BAN__INT_INT_STRING_STRING_);
		method.addSignedIntParameter(tablevel);
		method.addUnsignedIntParameter(galaxy);
		method.addAsciiParameter(gname);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else {
		_implementation->ban(tablevel, galaxy, gname, name);
	}
}

void PlayerManagementSession::getPlayerInfo(const int tablevel, const String& firstName) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERINFO__INT_STRING_);
		method.addSignedIntParameter(tablevel);
		method.addAsciiParameter(firstName);

		method.executeWithVoidReturn();
	} else {
		_implementation->getPlayerInfo(tablevel, firstName);
	}
}

void PlayerManagementSession::sendAccountInfo() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDACCOUNTINFO__);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendAccountInfo();
	}
}

void PlayerManagementSession::sendBanDuration() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBANDURATION__);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBanDuration();
	}
}

void PlayerManagementSession::parseBanDuration(const String& duration) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PARSEBANDURATION__STRING_);
		method.addAsciiParameter(duration);

		method.executeWithVoidReturn();
	} else {
		_implementation->parseBanDuration(duration);
	}
}

void PlayerManagementSession::sendBanReason(bool unban) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBANREASON__BOOL_);
		method.addBooleanParameter(unban);

		method.executeWithVoidReturn();
	} else {
		_implementation->sendBanReason(unban);
	}
}

void PlayerManagementSession::setBanReason(const String& reason) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBANREASON__STRING_);
		method.addAsciiParameter(reason);

		method.executeWithVoidReturn();
	} else {
		_implementation->setBanReason(reason);
	}
}

void PlayerManagementSession::showBanSummary() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHOWBANSUMMARY__);

		method.executeWithVoidReturn();
	} else {
		_implementation->showBanSummary();
	}
}

void PlayerManagementSession::showUnbanSummary() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHOWUNBANSUMMARY__);

		method.executeWithVoidReturn();
	} else {
		_implementation->showUnbanSummary();
	}
}

void PlayerManagementSession::completeBan() {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETEBAN__);

		method.executeWithVoidReturn();
	} else {
		_implementation->completeBan();
	}
}

String PlayerManagementSession::getBanDuration(unsigned int timestamp) {
	PlayerManagementSessionImplementation* _implementation = static_cast<PlayerManagementSessionImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBANDURATION__INT_);
		method.addUnsignedIntParameter(timestamp);

		String _return_getBanDuration;
		method.executeWithAsciiReturn(_return_getBanDuration);
		return _return_getBanDuration;
	} else {
		return _implementation->getBanDuration(timestamp);
	}
}

DistributedObjectServant* PlayerManagementSession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PlayerManagementSession::_getImplementationForRead() const {
	return _impl;
}

void PlayerManagementSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerManagementSessionImplementation
 */

PlayerManagementSessionImplementation::PlayerManagementSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


PlayerManagementSessionImplementation::~PlayerManagementSessionImplementation() {
}


void PlayerManagementSessionImplementation::finalize() {
}

void PlayerManagementSessionImplementation::_initializeImplementation() {
	_setClassHelper(PlayerManagementSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PlayerManagementSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PlayerManagementSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerManagementSessionImplementation::_getStub() {
	return _this.get();
}

PlayerManagementSessionImplementation::operator const PlayerManagementSession*() {
	return _this.get();
}

void PlayerManagementSessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PlayerManagementSessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PlayerManagementSessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PlayerManagementSessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PlayerManagementSessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PlayerManagementSessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PlayerManagementSessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PlayerManagementSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("PlayerManagementSession");

}

void PlayerManagementSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlayerManagementSessionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerManagementSessionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf2b7e88f: //PlayerManagementSession.admin
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&admin, stream);
		return true;

	case 0x8497f64c: //PlayerManagementSession.accountBox
		TypeInfo<ManagedReference<SuiListBox* > >::parseFromBinaryStream(&accountBox, stream);
		return true;

	case 0x26a71554: //PlayerManagementSession.durationBox
		TypeInfo<ManagedReference<SuiInputBox* > >::parseFromBinaryStream(&durationBox, stream);
		return true;

	case 0x7f2ff705: //PlayerManagementSession.reasonBox
		TypeInfo<ManagedReference<SuiInputBox* > >::parseFromBinaryStream(&reasonBox, stream);
		return true;

	case 0x65ca7ceb: //PlayerManagementSession.summaryBox
		TypeInfo<ManagedReference<SuiListBox* > >::parseFromBinaryStream(&summaryBox, stream);
		return true;

	case 0xce888e34: //PlayerManagementSession.unbanSummaryBox
		TypeInfo<ManagedReference<SuiMessageBox* > >::parseFromBinaryStream(&unbanSummaryBox, stream);
		return true;

	case 0xe931623e: //PlayerManagementSession.playerManager
		TypeInfo<ManagedReference<PlayerManager* > >::parseFromBinaryStream(&playerManager, stream);
		return true;

	case 0xcc82fa1: //PlayerManagementSession.banType
		TypeInfo<int >::parseFromBinaryStream(&banType, stream);
		return true;

	case 0x92779967: //PlayerManagementSession.banMode
		TypeInfo<int >::parseFromBinaryStream(&banMode, stream);
		return true;

	case 0xb79290df: //PlayerManagementSession.targetAccount
		TypeInfo<ManagedReference<Account* > >::parseFromBinaryStream(&targetAccount, stream);
		return true;

	case 0xb9103959: //PlayerManagementSession.galaxyID
		TypeInfo<unsigned int >::parseFromBinaryStream(&galaxyID, stream);
		return true;

	case 0x86f29370: //PlayerManagementSession.galaxyName
		TypeInfo<String >::parseFromBinaryStream(&galaxyName, stream);
		return true;

	case 0x3efa8770: //PlayerManagementSession.banExpiration
		TypeInfo<unsigned int >::parseFromBinaryStream(&banExpiration, stream);
		return true;

	case 0xa251b468: //PlayerManagementSession.banReason
		TypeInfo<String >::parseFromBinaryStream(&banReason, stream);
		return true;

	case 0x1f7a3fee: //PlayerManagementSession.targetName
		TypeInfo<String >::parseFromBinaryStream(&targetName, stream);
		return true;

	}

	return false;
}

void PlayerManagementSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerManagementSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerManagementSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xf2b7e88f; //PlayerManagementSession.admin
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&admin, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x8497f64c; //PlayerManagementSession.accountBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBox* > >::toBinaryStream(&accountBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x26a71554; //PlayerManagementSession.durationBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiInputBox* > >::toBinaryStream(&durationBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x7f2ff705; //PlayerManagementSession.reasonBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiInputBox* > >::toBinaryStream(&reasonBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x65ca7ceb; //PlayerManagementSession.summaryBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBox* > >::toBinaryStream(&summaryBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xce888e34; //PlayerManagementSession.unbanSummaryBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiMessageBox* > >::toBinaryStream(&unbanSummaryBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe931623e; //PlayerManagementSession.playerManager
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<PlayerManager* > >::toBinaryStream(&playerManager, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xcc82fa1; //PlayerManagementSession.banType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&banType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x92779967; //PlayerManagementSession.banMode
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&banMode, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb79290df; //PlayerManagementSession.targetAccount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<Account* > >::toBinaryStream(&targetAccount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xb9103959; //PlayerManagementSession.galaxyID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&galaxyID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x86f29370; //PlayerManagementSession.galaxyName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&galaxyName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x3efa8770; //PlayerManagementSession.banExpiration
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&banExpiration, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xa251b468; //PlayerManagementSession.banReason
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&banReason, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x1f7a3fee; //PlayerManagementSession.targetName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&targetName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

PlayerManagementSessionImplementation::PlayerManagementSessionImplementation(Account* account, CreatureObject* adm) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		targetAccount = account;
	targetAccount = account;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		admin = adm;
	admin = adm;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		banMode = NONE;
	banMode = NONE;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		galaxyID = 0;
	galaxyID = 0;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		galaxyName = "";
	galaxyName = "";
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		accountBox = null;
	accountBox = NULL;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		durationBox = null;
	durationBox = NULL;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		reasonBox = null;
	reasonBox = NULL;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		summaryBox = null;
	summaryBox = NULL;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		unbanSummaryBox = null;
	unbanSummaryBox = NULL;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		Logger.setLoggingName("PlayerManagementSession");
	Logger::setLoggingName("PlayerManagementSession");
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		initializeSession();
	initializeSession();
}

int PlayerManagementSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		CreatureObject adm = admin;
	ManagedReference<CreatureObject* > adm = admin;
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		clearSession(
	if (adm)	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  			adm.dropActiveSession(SessionFacadeType.PLAYERMANAGEMENT);
	adm->dropActiveSession(SessionFacadeType::PLAYERMANAGEMENT);
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		clearSession();
	clearSession();
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		return 0;
	return 0;
}

void PlayerManagementSessionImplementation::addAccountSui(SuiListBox* box) {
	// server/zone/objects/player/sessions/admin/PlayerManagementSession.idl():  		accountBox = box;
	accountBox = box;
}

/*
 *	PlayerManagementSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PlayerManagementSessionAdapter::PlayerManagementSessionAdapter(PlayerManagementSession* obj) : FacadeAdapter(obj) {
}

void PlayerManagementSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			
			int _m_res = initializeSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CANCELSESSION__:
		{
			
			int _m_res = cancelSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_CLEARSESSION__:
		{
			
			int _m_res = clearSession();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDACCOUNTSUI__SUILISTBOX_:
		{
			SuiListBox* box = static_cast<SuiListBox*>(inv->getObjectParameter());
			
			addAccountSui(box);
			
		}
		break;
	case RPC_BAN__INT_INT_STRING_STRING_:
		{
			 int tablevel = inv->getSignedIntParameter();
			unsigned const int galaxy = inv->getUnsignedIntParameter();
			 String gname; inv->getAsciiParameter(gname);
			 String name; inv->getAsciiParameter(name);
			
			ban(tablevel, galaxy, gname, name);
			
		}
		break;
	case RPC_GETPLAYERINFO__INT_STRING_:
		{
			 int tablevel = inv->getSignedIntParameter();
			 String firstName; inv->getAsciiParameter(firstName);
			
			getPlayerInfo(tablevel, firstName);
			
		}
		break;
	case RPC_SENDACCOUNTINFO__:
		{
			
			sendAccountInfo();
			
		}
		break;
	case RPC_SENDBANDURATION__:
		{
			
			sendBanDuration();
			
		}
		break;
	case RPC_PARSEBANDURATION__STRING_:
		{
			 String duration; inv->getAsciiParameter(duration);
			
			parseBanDuration(duration);
			
		}
		break;
	case RPC_SENDBANREASON__BOOL_:
		{
			bool unban = inv->getBooleanParameter();
			
			sendBanReason(unban);
			
		}
		break;
	case RPC_SETBANREASON__STRING_:
		{
			 String reason; inv->getAsciiParameter(reason);
			
			setBanReason(reason);
			
		}
		break;
	case RPC_SHOWBANSUMMARY__:
		{
			
			showBanSummary();
			
		}
		break;
	case RPC_SHOWUNBANSUMMARY__:
		{
			
			showUnbanSummary();
			
		}
		break;
	case RPC_COMPLETEBAN__:
		{
			
			completeBan();
			
		}
		break;
	case RPC_GETBANDURATION__INT_:
		{
			unsigned int timestamp = inv->getUnsignedIntParameter();
			
			String _m_res = getBanDuration(timestamp);
			resp->insertAscii(_m_res);
		}
		break;
	default:
		FacadeAdapter::invokeMethod(methid, inv);
	}
}

int PlayerManagementSessionAdapter::initializeSession() {
	return (static_cast<PlayerManagementSession*>(stub))->initializeSession();
}

int PlayerManagementSessionAdapter::cancelSession() {
	return (static_cast<PlayerManagementSession*>(stub))->cancelSession();
}

int PlayerManagementSessionAdapter::clearSession() {
	return (static_cast<PlayerManagementSession*>(stub))->clearSession();
}

void PlayerManagementSessionAdapter::addAccountSui(SuiListBox* box) {
	(static_cast<PlayerManagementSession*>(stub))->addAccountSui(box);
}

void PlayerManagementSessionAdapter::ban(const int tablevel, unsigned const int galaxy, const String& gname, const String& name) {
	(static_cast<PlayerManagementSession*>(stub))->ban(tablevel, galaxy, gname, name);
}

void PlayerManagementSessionAdapter::getPlayerInfo(const int tablevel, const String& firstName) {
	(static_cast<PlayerManagementSession*>(stub))->getPlayerInfo(tablevel, firstName);
}

void PlayerManagementSessionAdapter::sendAccountInfo() {
	(static_cast<PlayerManagementSession*>(stub))->sendAccountInfo();
}

void PlayerManagementSessionAdapter::sendBanDuration() {
	(static_cast<PlayerManagementSession*>(stub))->sendBanDuration();
}

void PlayerManagementSessionAdapter::parseBanDuration(const String& duration) {
	(static_cast<PlayerManagementSession*>(stub))->parseBanDuration(duration);
}

void PlayerManagementSessionAdapter::sendBanReason(bool unban) {
	(static_cast<PlayerManagementSession*>(stub))->sendBanReason(unban);
}

void PlayerManagementSessionAdapter::setBanReason(const String& reason) {
	(static_cast<PlayerManagementSession*>(stub))->setBanReason(reason);
}

void PlayerManagementSessionAdapter::showBanSummary() {
	(static_cast<PlayerManagementSession*>(stub))->showBanSummary();
}

void PlayerManagementSessionAdapter::showUnbanSummary() {
	(static_cast<PlayerManagementSession*>(stub))->showUnbanSummary();
}

void PlayerManagementSessionAdapter::completeBan() {
	(static_cast<PlayerManagementSession*>(stub))->completeBan();
}

String PlayerManagementSessionAdapter::getBanDuration(unsigned int timestamp) {
	return (static_cast<PlayerManagementSession*>(stub))->getBanDuration(timestamp);
}

/*
 *	PlayerManagementSessionHelper
 */

PlayerManagementSessionHelper* PlayerManagementSessionHelper::staticInitializer = PlayerManagementSessionHelper::instance();

PlayerManagementSessionHelper::PlayerManagementSessionHelper() {
	className = "PlayerManagementSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerManagementSessionHelper::finalizeHelper() {
	PlayerManagementSessionHelper::finalize();
}

DistributedObject* PlayerManagementSessionHelper::instantiateObject() {
	return new PlayerManagementSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerManagementSessionHelper::instantiateServant() {
	return new PlayerManagementSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* PlayerManagementSessionHelper::instantiatePOD() {
	return new PlayerManagementSessionPOD();
}

DistributedObjectAdapter* PlayerManagementSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerManagementSessionAdapter(static_cast<PlayerManagementSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerManagementSessionPOD
 */

PlayerManagementSessionPOD::~PlayerManagementSessionPOD() {
}

PlayerManagementSessionPOD::PlayerManagementSessionPOD(void) {
	_className = "PlayerManagementSession";
}


void PlayerManagementSessionPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerManagementSessionPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerManagementSessionPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadePOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (admin) {
	_nameHashCode = 0xf2b7e88f; //PlayerManagementSession.admin
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&admin.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (accountBox) {
	_nameHashCode = 0x8497f64c; //PlayerManagementSession.accountBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBoxPOD* > >::toBinaryStream(&accountBox.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (durationBox) {
	_nameHashCode = 0x26a71554; //PlayerManagementSession.durationBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiInputBoxPOD* > >::toBinaryStream(&durationBox.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (reasonBox) {
	_nameHashCode = 0x7f2ff705; //PlayerManagementSession.reasonBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiInputBoxPOD* > >::toBinaryStream(&reasonBox.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (summaryBox) {
	_nameHashCode = 0x65ca7ceb; //PlayerManagementSession.summaryBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBoxPOD* > >::toBinaryStream(&summaryBox.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (unbanSummaryBox) {
	_nameHashCode = 0xce888e34; //PlayerManagementSession.unbanSummaryBox
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiMessageBoxPOD* > >::toBinaryStream(&unbanSummaryBox.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (playerManager) {
	_nameHashCode = 0xe931623e; //PlayerManagementSession.playerManager
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<PlayerManagerPOD* > >::toBinaryStream(&playerManager.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (banType) {
	_nameHashCode = 0xcc82fa1; //PlayerManagementSession.banType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&banType.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (banMode) {
	_nameHashCode = 0x92779967; //PlayerManagementSession.banMode
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&banMode.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (targetAccount) {
	_nameHashCode = 0xb79290df; //PlayerManagementSession.targetAccount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<AccountPOD* > >::toBinaryStream(&targetAccount.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (galaxyID) {
	_nameHashCode = 0xb9103959; //PlayerManagementSession.galaxyID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&galaxyID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (galaxyName) {
	_nameHashCode = 0x86f29370; //PlayerManagementSession.galaxyName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&galaxyName.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (banExpiration) {
	_nameHashCode = 0x3efa8770; //PlayerManagementSession.banExpiration
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&banExpiration.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (banReason) {
	_nameHashCode = 0xa251b468; //PlayerManagementSession.banReason
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&banReason.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (targetName) {
	_nameHashCode = 0x1f7a3fee; //PlayerManagementSession.targetName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&targetName.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool PlayerManagementSessionPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (FacadePOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xf2b7e88f: //PlayerManagementSession.admin
		{
			ManagedWeakReference<CreatureObjectPOD* > _mnadmin;
			TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::parseFromBinaryStream(&_mnadmin, stream);
			admin = std::move(_mnadmin);
		}
		return true;

	case 0x8497f64c: //PlayerManagementSession.accountBox
		{
			ManagedReference<SuiListBoxPOD* > _mnaccountBox;
			TypeInfo<ManagedReference<SuiListBoxPOD* > >::parseFromBinaryStream(&_mnaccountBox, stream);
			accountBox = std::move(_mnaccountBox);
		}
		return true;

	case 0x26a71554: //PlayerManagementSession.durationBox
		{
			ManagedReference<SuiInputBoxPOD* > _mndurationBox;
			TypeInfo<ManagedReference<SuiInputBoxPOD* > >::parseFromBinaryStream(&_mndurationBox, stream);
			durationBox = std::move(_mndurationBox);
		}
		return true;

	case 0x7f2ff705: //PlayerManagementSession.reasonBox
		{
			ManagedReference<SuiInputBoxPOD* > _mnreasonBox;
			TypeInfo<ManagedReference<SuiInputBoxPOD* > >::parseFromBinaryStream(&_mnreasonBox, stream);
			reasonBox = std::move(_mnreasonBox);
		}
		return true;

	case 0x65ca7ceb: //PlayerManagementSession.summaryBox
		{
			ManagedReference<SuiListBoxPOD* > _mnsummaryBox;
			TypeInfo<ManagedReference<SuiListBoxPOD* > >::parseFromBinaryStream(&_mnsummaryBox, stream);
			summaryBox = std::move(_mnsummaryBox);
		}
		return true;

	case 0xce888e34: //PlayerManagementSession.unbanSummaryBox
		{
			ManagedReference<SuiMessageBoxPOD* > _mnunbanSummaryBox;
			TypeInfo<ManagedReference<SuiMessageBoxPOD* > >::parseFromBinaryStream(&_mnunbanSummaryBox, stream);
			unbanSummaryBox = std::move(_mnunbanSummaryBox);
		}
		return true;

	case 0xe931623e: //PlayerManagementSession.playerManager
		{
			ManagedReference<PlayerManagerPOD* > _mnplayerManager;
			TypeInfo<ManagedReference<PlayerManagerPOD* > >::parseFromBinaryStream(&_mnplayerManager, stream);
			playerManager = std::move(_mnplayerManager);
		}
		return true;

	case 0xcc82fa1: //PlayerManagementSession.banType
		{
			int _mnbanType;
			TypeInfo<int >::parseFromBinaryStream(&_mnbanType, stream);
			banType = std::move(_mnbanType);
		}
		return true;

	case 0x92779967: //PlayerManagementSession.banMode
		{
			int _mnbanMode;
			TypeInfo<int >::parseFromBinaryStream(&_mnbanMode, stream);
			banMode = std::move(_mnbanMode);
		}
		return true;

	case 0xb79290df: //PlayerManagementSession.targetAccount
		{
			ManagedReference<AccountPOD* > _mntargetAccount;
			TypeInfo<ManagedReference<AccountPOD* > >::parseFromBinaryStream(&_mntargetAccount, stream);
			targetAccount = std::move(_mntargetAccount);
		}
		return true;

	case 0xb9103959: //PlayerManagementSession.galaxyID
		{
			unsigned int _mngalaxyID;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mngalaxyID, stream);
			galaxyID = std::move(_mngalaxyID);
		}
		return true;

	case 0x86f29370: //PlayerManagementSession.galaxyName
		{
			String _mngalaxyName;
			TypeInfo<String >::parseFromBinaryStream(&_mngalaxyName, stream);
			galaxyName = std::move(_mngalaxyName);
		}
		return true;

	case 0x3efa8770: //PlayerManagementSession.banExpiration
		{
			unsigned int _mnbanExpiration;
			TypeInfo<unsigned int >::parseFromBinaryStream(&_mnbanExpiration, stream);
			banExpiration = std::move(_mnbanExpiration);
		}
		return true;

	case 0xa251b468: //PlayerManagementSession.banReason
		{
			String _mnbanReason;
			TypeInfo<String >::parseFromBinaryStream(&_mnbanReason, stream);
			banReason = std::move(_mnbanReason);
		}
		return true;

	case 0x1f7a3fee: //PlayerManagementSession.targetName
		{
			String _mntargetName;
			TypeInfo<String >::parseFromBinaryStream(&_mntargetName, stream);
			targetName = std::move(_mntargetName);
		}
		return true;

	}

	return false;
}

void PlayerManagementSessionPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlayerManagementSessionPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void PlayerManagementSessionPOD::writeObjectCompact(ObjectOutputStream* stream) {
	FacadePOD::writeObjectCompact(stream);

	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&admin.value(), stream);

	TypeInfo<ManagedReference<SuiListBoxPOD* > >::toBinaryStream(&accountBox.value(), stream);

	TypeInfo<ManagedReference<SuiInputBoxPOD* > >::toBinaryStream(&durationBox.value(), stream);

	TypeInfo<ManagedReference<SuiInputBoxPOD* > >::toBinaryStream(&reasonBox.value(), stream);

	TypeInfo<ManagedReference<SuiListBoxPOD* > >::toBinaryStream(&summaryBox.value(), stream);

	TypeInfo<ManagedReference<SuiMessageBoxPOD* > >::toBinaryStream(&unbanSummaryBox.value(), stream);

	TypeInfo<ManagedReference<PlayerManagerPOD* > >::toBinaryStream(&playerManager.value(), stream);

	TypeInfo<int >::toBinaryStream(&banType.value(), stream);

	TypeInfo<int >::toBinaryStream(&banMode.value(), stream);

	TypeInfo<ManagedReference<AccountPOD* > >::toBinaryStream(&targetAccount.value(), stream);

	TypeInfo<unsigned int >::toBinaryStream(&galaxyID.value(), stream);

	TypeInfo<String >::toBinaryStream(&galaxyName.value(), stream);

	TypeInfo<unsigned int >::toBinaryStream(&banExpiration.value(), stream);

	TypeInfo<String >::toBinaryStream(&banReason.value(), stream);

	TypeInfo<String >::toBinaryStream(&targetName.value(), stream);


}

