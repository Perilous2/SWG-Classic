/*
 *	autogen/server/zone/objects/player/sessions/SlicingSession.h generated by engine3 IDL compiler 0.70
 */

#ifndef SLICINGSESSION_H_
#define SLICINGSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

class TangibleObjectPOD;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

#include "server/zone/objects/tangible/tool/smuggler/SlicingTool.h"

#include "server/zone/objects/tangible/RelockLootContainerEvent.h"

#include "engine/log/Logger.h"

#include "engine/util/Facade.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class SlicingSession : public Facade {
public:
	SlicingSession(CreatureObject* parent);

	void initalizeSlicingMenu(CreatureObject* pl, TangibleObject* obj);

	void handleMenuSelect(CreatureObject* pl, byte menuID, SuiListBox* suiBox);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void endSlicing();

	bool isBaseSlice();

	bool isKeypadSlice();

	void setKeypadSlice(bool val);

	void setBaseSlice(bool val);

	int getSlicingSkill(CreatureObject* slicer);

	bool hasPrecisionLaserKnife(bool removeItem = true);

	bool hasWeaponUpgradeKit();

	bool hasArmorUpgradeKit();

	void useClampFromInventory(SlicingTool* clamp);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SlicingSession(DummyConstructorParameter* param);

	virtual ~SlicingSession();

	friend class SlicingSessionHelper;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class SlicingSessionImplementation : public FacadeImplementation {
protected:
	ManagedWeakReference<CreatureObject* > player;

	ManagedWeakReference<TangibleObject* > tangibleObject;

	ManagedReference<SuiListBox* > slicingSuiBox;

	Reference<RelockLootContainerEvent* > relockEvent;

	byte firstCable;

	byte nodeCable;

	bool cableBlue;

	bool cableRed;

	bool usedNode;

	bool usedClamp;

	bool baseSlice;

	bool keypadSlice;

public:
	SlicingSessionImplementation(CreatureObject* parent);

	SlicingSessionImplementation(DummyConstructorParameter* param);

	void initalizeSlicingMenu(CreatureObject* pl, TangibleObject* obj);

	void handleMenuSelect(CreatureObject* pl, byte menuID, SuiListBox* suiBox);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void endSlicing();

private:
	void generateSliceMenu(SuiListBox* suiBox);

	String getPrefix(TangibleObject* obj);

	byte getProgress();

public:
	bool isBaseSlice();

	bool isKeypadSlice();

	void setKeypadSlice(bool val);

	void setBaseSlice(bool val);

private:
	void handleSliceFailed();

public:
	int getSlicingSkill(CreatureObject* slicer);

	bool hasPrecisionLaserKnife(bool removeItem = true);

	bool hasWeaponUpgradeKit();

	bool hasArmorUpgradeKit();

	void useClampFromInventory(SlicingTool* clamp);

private:
	void detachPowerUp(CreatureObject* player, WeaponObject* weap);

	void handleUseClamp();

	void handleUseFlowAnalyzer();

	void handleSlice(SuiListBox* suiBox);

	void handleWeaponSlice();

	void handleSliceDamage(byte percent);

	void handleSliceSpeed(byte percent);

	void handleArmorSlice();

	void handleSliceEncumbrance(byte percent);

	void handleSliceEffectiveness(byte percent);

	void handleContainerSlice();

public:
	WeakReference<SlicingSession*> _this;

	operator const SlicingSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~SlicingSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SlicingSession;
};

class SlicingSessionAdapter : public FacadeAdapter {
public:
	SlicingSessionAdapter(SlicingSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void endSlicing();

	bool isBaseSlice();

	bool isKeypadSlice();

	void setKeypadSlice(bool val);

	void setBaseSlice(bool val);

	int getSlicingSkill(CreatureObject* slicer);

	bool hasPrecisionLaserKnife(bool removeItem);

	bool hasWeaponUpgradeKit();

	bool hasArmorUpgradeKit();

	void useClampFromInventory(SlicingTool* clamp);

};

class SlicingSessionHelper : public DistributedObjectClassHelper, public Singleton<SlicingSessionHelper> {
	static SlicingSessionHelper* staticInitializer;

public:
	SlicingSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SlicingSessionHelper>;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class SlicingSessionPOD : public FacadePOD {
public:
	Optional<ManagedWeakReference<CreatureObjectPOD* >> player;

	Optional<ManagedReference<SuiListBoxPOD* >> slicingSuiBox;

	Optional<byte> firstCable;

	Optional<byte> nodeCable;

	Optional<bool> cableBlue;

	Optional<bool> cableRed;

	Optional<bool> usedNode;

	Optional<bool> usedClamp;

	Optional<bool> baseSlice;

	Optional<bool> keypadSlice;

	String _className;
	SlicingSessionPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~SlicingSessionPOD();

};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

#endif /*SLICINGSESSIONPOD_H_*/
