/*
 *	autogen/server/zone/objects/installation/factory/FactoryHopperObserver.cpp generated by engine3 IDL compiler 0.70
 */

#include "FactoryHopperObserver.h"

/*
 *	FactoryHopperObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 2663347641};

FactoryHopperObserver::FactoryHopperObserver(FactoryObject* fact) : Observer(DummyConstructorParameter::instance()) {
	FactoryHopperObserverImplementation* _implementation = new FactoryHopperObserverImplementation(fact);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FactoryHopperObserver");
}

FactoryHopperObserver::FactoryHopperObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("FactoryHopperObserver");
}

FactoryHopperObserver::~FactoryHopperObserver() {
}



int FactoryHopperObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	FactoryHopperObserverImplementation* _implementation = static_cast<FactoryHopperObserverImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

DistributedObjectServant* FactoryHopperObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* FactoryHopperObserver::_getImplementationForRead() const {
	return _impl;
}

void FactoryHopperObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FactoryHopperObserverImplementation
 */

FactoryHopperObserverImplementation::FactoryHopperObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


FactoryHopperObserverImplementation::~FactoryHopperObserverImplementation() {
}


void FactoryHopperObserverImplementation::finalize() {
}

void FactoryHopperObserverImplementation::_initializeImplementation() {
	_setClassHelper(FactoryHopperObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FactoryHopperObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FactoryHopperObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* FactoryHopperObserverImplementation::_getStub() {
	return _this.get();
}

FactoryHopperObserverImplementation::operator const FactoryHopperObserver*() {
	return _this.get();
}

void FactoryHopperObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void FactoryHopperObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void FactoryHopperObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void FactoryHopperObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void FactoryHopperObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void FactoryHopperObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void FactoryHopperObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void FactoryHopperObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("FactoryHopperObserver");

}

void FactoryHopperObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FactoryHopperObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FactoryHopperObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x1a59bcfc: //FactoryHopperObserver.factory
		TypeInfo<ManagedWeakReference<FactoryObject* > >::parseFromBinaryStream(&factory, stream);
		return true;

	}

	return false;
}

void FactoryHopperObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FactoryHopperObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FactoryHopperObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x1a59bcfc; //FactoryHopperObserver.factory
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<FactoryObject* > >::toBinaryStream(&factory, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void FactoryHopperObserverImplementation::writeJSON(nlohmann::json& j) {
	ObserverImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["factory"] = factory;

	j["FactoryHopperObserver"] = thisObject;
}

FactoryHopperObserverImplementation::FactoryHopperObserverImplementation(FactoryObject* fact) {
	_initializeImplementation();
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		factory = fact;
	factory = fact;
}

int FactoryHopperObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		FactoryObject strongRef = factory;
	ManagedReference<FactoryObject* > strongRef = factory;
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		if 
	if (!strongRef)	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  			return 0;
	return 0;
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		return 
	if (eventType == ObserverEventType::OPENCONTAINER){
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  			strongRef.openHopper(observable, arg1);
	strongRef->openHopper(observable, arg1);
}

	else 	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		return 
	if (eventType == ObserverEventType::CLOSECONTAINER){
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  			strongRef.closeHopper(observable, arg1);
	strongRef->closeHopper(observable, arg1);
}
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		return 0;
	return 0;
}

/*
 *	FactoryHopperObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FactoryHopperObserverAdapter::FactoryHopperObserverAdapter(FactoryHopperObserver* obj) : ObserverAdapter(obj) {
}

void FactoryHopperObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int FactoryHopperObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<FactoryHopperObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	FactoryHopperObserverHelper
 */

FactoryHopperObserverHelper* FactoryHopperObserverHelper::staticInitializer = FactoryHopperObserverHelper::instance();

FactoryHopperObserverHelper::FactoryHopperObserverHelper() {
	className = "FactoryHopperObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void FactoryHopperObserverHelper::finalizeHelper() {
	FactoryHopperObserverHelper::finalize();
}

DistributedObject* FactoryHopperObserverHelper::instantiateObject() {
	return new FactoryHopperObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* FactoryHopperObserverHelper::instantiateServant() {
	return new FactoryHopperObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* FactoryHopperObserverHelper::instantiatePOD() {
	return new FactoryHopperObserverPOD();
}

DistributedObjectAdapter* FactoryHopperObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryHopperObserverAdapter(static_cast<FactoryHopperObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FactoryHopperObserverPOD
 */

FactoryHopperObserverPOD::~FactoryHopperObserverPOD() {
}

FactoryHopperObserverPOD::FactoryHopperObserverPOD(void) {
	_className = "FactoryHopperObserver";
}


void FactoryHopperObserverPOD::writeJSON(nlohmann::json& j) {
	ObserverPOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (factory)
		thisObject["factory"] = factory.value();

	j["FactoryHopperObserver"] = thisObject;
}


void FactoryHopperObserverPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FactoryHopperObserverPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FactoryHopperObserverPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (factory) {
	_nameHashCode = 0x1a59bcfc; //FactoryHopperObserver.factory
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<FactoryObjectPOD* > >::toBinaryStream(&factory.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool FactoryHopperObserverPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x1a59bcfc: //FactoryHopperObserver.factory
		{
			ManagedWeakReference<FactoryObjectPOD* > _mnfactory;
			TypeInfo<ManagedWeakReference<FactoryObjectPOD* > >::parseFromBinaryStream(&_mnfactory, stream);
			factory = std::move(_mnfactory);
		}
		return true;

	}

	return false;
}

void FactoryHopperObserverPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FactoryHopperObserverPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void FactoryHopperObserverPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);

	TypeInfo<ManagedWeakReference<FactoryObjectPOD* > >::toBinaryStream(&factory.value(), stream);


}

