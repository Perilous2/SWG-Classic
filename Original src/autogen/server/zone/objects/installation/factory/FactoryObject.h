/*
 *	autogen/server/zone/objects/installation/factory/FactoryObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef FACTORYOBJECT_H_
#define FACTORYOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace manufactureschematic {

class ManufactureSchematic;

class ManufactureSchematicPOD;

} // namespace manufactureschematic
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::manufactureschematic;

namespace server {
namespace zone {
namespace objects {
namespace factorycrate {

class FactoryCrate;

class FactoryCratePOD;

} // namespace factorycrate
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::factorycrate;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

class TangibleObjectPOD;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace factory {

class FactoryHopperObserver;

class FactoryHopperObserverPOD;

} // namespace factory
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::factory;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

#include "server/zone/objects/manufactureschematic/factoryblueprint/BlueprintEntry.h"

#include "system/util/Vector.h"

#include "templates/SharedObjectTemplate.h"

#include "server/zone/objects/installation/InstallationObject.h"

#include "engine/util/Observable.h"

#include "engine/core/ManagedObject.h"

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace factory {

class FactoryObject : public InstallationObject {
public:
	FactoryObject();

	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	bool isFactory();

	/**
	 * Handles creating the hoppers
	 */
	void createChildObjects();

	/**
	 * Handles sending the SUI full of manufacturing schematics
	 * that will work in this station
	 */
	void sendInsertManuSui(CreatureObject* player);

	void sendIngredientsNeededSui(CreatureObject* player);

	void sendIngredientHopper(CreatureObject* player);

	void sendOutputHopper(CreatureObject* player);

	void openHopper(Observable* observable, ManagedObject* arg1);

	void closeHopper(Observable* observable, ManagedObject* arg1);

	/**
	 * Handles inputting the schematic to the
	 * factory
	 */
	void handleInsertFactorySchem(CreatureObject* player, ManufactureSchematic* schematic);

	/**
	 * Handles inputting the schematic to the
	 * factory
	 */
	bool handleRemoveFactorySchem(CreatureObject* player);

	void handleOperateToggle(CreatureObject* player);

	bool startFactory();

	void createNewObject();

	String getRedeedMessage();

	void sendRemoveFailureMessage(CreatureObject* player, ManufactureSchematic* schematic);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FactoryObject(DummyConstructorParameter* param);

	virtual ~FactoryObject();

	friend class FactoryObjectHelper;
};

} // namespace factory
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::factory;

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace factory {

class FactoryObjectImplementation : public InstallationObjectImplementation {
protected:
	Vector<int> craftingTabsSupported;

	int timer;

	String currentUserName;

	int currentRunCount;

	ManagedReference<FactoryHopperObserver* > hopperObserver;

public:
	FactoryObjectImplementation();

	FactoryObjectImplementation(DummyConstructorParameter* param);

	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	bool isFactory();

	/**
	 * Handles creating the hoppers
	 */
	void createChildObjects();

	/**
	 * Handles sending the SUI full of manufacturing schematics
	 * that will work in this station
	 */
	void sendInsertManuSui(CreatureObject* player);

	void sendIngredientsNeededSui(CreatureObject* player);

	void sendIngredientHopper(CreatureObject* player);

	void sendOutputHopper(CreatureObject* player);

	void openHopper(Observable* observable, ManagedObject* arg1);

	void closeHopper(Observable* observable, ManagedObject* arg1);

	/**
	 * Handles inputting the schematic to the
	 * factory
	 */
	void handleInsertFactorySchem(CreatureObject* player, ManufactureSchematic* schematic);

	/**
	 * Handles inputting the schematic to the
	 * factory
	 */
	bool handleRemoveFactorySchem(CreatureObject* player);

	void handleOperateToggle(CreatureObject* player);

	bool startFactory();

private:
	void stopFactory(const String& message, const String& tt, const String& to, const int di);

	void stopFactory(String& type, String& displayedName);

public:
	void createNewObject();

private:
	FactoryCrate* locateCrateInOutputHopper(TangibleObject* prototype);

	FactoryCrate* createNewFactoryCrate(TangibleObject* prototype, int maxSize, String& crateType);

	TangibleObject* createNewUncratedItem(TangibleObject* prototype);

	bool populateSchematicBlueprint(ManufactureSchematic* schematic);

	void collectMatchesInInputHopper(BlueprintEntry* entry, SceneObject* inputHopper);

public:
	String getRedeedMessage();

	void sendRemoveFailureMessage(CreatureObject* player, ManufactureSchematic* schematic);

	WeakReference<FactoryObject*> _this;

	operator const FactoryObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~FactoryObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FactoryObject;
};

class FactoryObjectAdapter : public InstallationObjectAdapter {
public:
	FactoryObjectAdapter(FactoryObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void notifyLoadFromDatabase();

	bool isFactory();

	void createChildObjects();

	void sendInsertManuSui(CreatureObject* player);

	void sendIngredientsNeededSui(CreatureObject* player);

	void sendIngredientHopper(CreatureObject* player);

	void sendOutputHopper(CreatureObject* player);

	void openHopper(Observable* observable, ManagedObject* arg1);

	void closeHopper(Observable* observable, ManagedObject* arg1);

	void handleInsertFactorySchem(CreatureObject* player, ManufactureSchematic* schematic);

	bool handleRemoveFactorySchem(CreatureObject* player);

	void handleOperateToggle(CreatureObject* player);

	bool startFactory();

	void createNewObject();

	String getRedeedMessage();

	void sendRemoveFailureMessage(CreatureObject* player, ManufactureSchematic* schematic);

};

class FactoryObjectHelper : public DistributedObjectClassHelper, public Singleton<FactoryObjectHelper> {
	static FactoryObjectHelper* staticInitializer;

public:
	FactoryObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FactoryObjectHelper>;
};

} // namespace factory
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::factory;

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace factory {

class FactoryObjectPOD : public InstallationObjectPOD {
public:
	Optional<Vector<int>> craftingTabsSupported;

	Optional<int> timer;

	Optional<String> currentUserName;

	Optional<int> currentRunCount;

	String _className;
	FactoryObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~FactoryObjectPOD();

};

} // namespace factory
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::factory;

#endif /*FACTORYOBJECTPOD_H_*/
