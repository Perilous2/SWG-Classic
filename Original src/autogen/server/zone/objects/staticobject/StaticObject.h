/*
 *	autogen/server/zone/objects/staticobject/StaticObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef STATICOBJECT_H_
#define STATICOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class CloseObjectsVector;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/SceneObject.h"

namespace server {
namespace zone {
namespace objects {
namespace staticobject {

class StaticObject : public SceneObject {
public:
	StaticObject();

	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	void sendBaselinesTo(SceneObject* player);

	StaticObject* asStaticObject();

	bool isStaticObjectClass();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	StaticObject(DummyConstructorParameter* param);

	virtual ~StaticObject();

	friend class StaticObjectHelper;
};

} // namespace staticobject
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::staticobject;

namespace server {
namespace zone {
namespace objects {
namespace staticobject {

class StaticObjectImplementation : public SceneObjectImplementation {

public:
	StaticObjectImplementation();

	StaticObjectImplementation(DummyConstructorParameter* param);

	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	void sendBaselinesTo(SceneObject* player);

	virtual StaticObject* asStaticObject();

	bool isStaticObjectClass();

	WeakReference<StaticObject*> _this;

	operator const StaticObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~StaticObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class StaticObject;
};

class StaticObjectAdapter : public SceneObjectAdapter {
public:
	StaticObjectAdapter(StaticObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendBaselinesTo(SceneObject* player);

	bool isStaticObjectClass();

};

class StaticObjectHelper : public DistributedObjectClassHelper, public Singleton<StaticObjectHelper> {
	static StaticObjectHelper* staticInitializer;

public:
	StaticObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StaticObjectHelper>;
};

} // namespace staticobject
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::staticobject;

namespace server {
namespace zone {
namespace objects {
namespace staticobject {

class StaticObjectPOD : public SceneObjectPOD {
public:

	StaticObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~StaticObjectPOD();

};

} // namespace staticobject
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::staticobject;

#endif /*STATICOBJECTPOD_H_*/
