/*
 *	autogen/server/zone/objects/structure/StructureObject.h generated by engine3 IDL compiler 0.70
 */

#ifndef STRUCTUREOBJECT_H_
#define STRUCTUREOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {

class Zone;

class ZonePOD;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace structure {
namespace events {

class StructureMaintenanceTask;

} // namespace events
} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure::events;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

class SceneObjectPOD;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace pathfinding {

class NavArea;

class NavAreaPOD;

} // namespace pathfinding
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::pathfinding;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace credits {

class CreditObject;

class CreditObjectPOD;

} // namespace credits
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::credits;

#include "templates/SharedObjectTemplate.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "server/zone/CloseObjectsVector.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/lang/Time.h"

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObject : public TangibleObject {
public:
	StructureObject();

	void initializeTransientMembers();

	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	void destroyObjectFromWorld(bool sendSelfDestroy);

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void notifyInsertToZone(Zone* zone);

	void createChildObjects();

	int getReceiverFlags() const;

	/**
	 * Gets called when the structure has been created;
	 */
	int notifyStructurePlaced(CreatureObject* creature);

	void destroyOrphanCivicStructure();

	bool checkRequisitesForPlacement(CreatureObject* player);

	String getTimeString(unsigned int timestamp) const;

	/**
	 * Schedules the event that will be fired when maintenance is due to run out.
	 * This method calls updateStructureStatus before running.
	 */
	void scheduleMaintenanceExpirationEvent();

	/**
	 * Schedules the maintenance task.
	 * @param timeFromNow the time till the task should be run.
	 */
	void scheduleMaintenanceTask(int timeFromNow);

	/**
	 * This method should be called anytime a method needs up to date information about
	 * maintenance, power, and condition of the structure.
	 */
	void updateStructureStatus();

	String getDebugStructureStatus() const;

	/**
	 * Checks if the player is on the admin list.
	 * @param player The creo of the player to check for admin permission.
	 * @return Returns true if the player has admin permissions.
	 */
	bool isOnAdminList(CreatureObject* player) const;

	/**
	 * Checks if the player/guild is on the admin list.
	 * For PermissionsListModify command
	 * @param objectID The oid of the player/guild to check for admin permission.
	 * @return Returns true if the player/guild has admin permissions.
	 */
	bool isOnAdminList(unsigned const long long objectID) const;

	/**
	 * Checks if the player is on the entry list.
	 * @param player The creo of the player to check for entry permission.
	 * @return Returns true if the player has entry permissions.
	 */
	bool isOnEntryList(CreatureObject* player) const;

	/**
	 * Checks if the player is on the ban list.
	 * @param player The creo of the player to check for ban permission.
	 * @return Returns true if the player has ban permissions.
	 */
	bool isOnBanList(CreatureObject* player) const;

	/**
	 * Checks if the player/guild is on the ban list.
	 * For PermissionsListModify command
	 * @param objectID The oid of the player/guild to check for ban permission.
	 * @return Returns true if the player/guild has ban permissions.
	 */
	bool isOnBanList(unsigned const long long objectID) const;

	/**
	 * Checks if the player is on the hopper list.
	 * @param player The creo of the player to check for hopper permission.
	 * @return Returns true if the player has hopper permissions.
	 */
	bool isOnHopperList(CreatureObject* player) const;

	/**
	 * Checks if the player is the on the specified permission list.
	 * @param listName The name of the list to check.
	 * @param player The creo of the player to check.
	 * @return Returns true if the player was found on the list.
	 */
	bool isOnPermissionList(const String& listName, CreatureObject* player) const;

	/**
	 * Checks if the player/guild is the on the specified permission list.
	 * For PermissionsListModify command
	 * @param listName The name of the list to check.
	 * @param objectID The oid of the player/guild to check.
	 * @return Returns true if the player/guild was found on the list.
	 */
	bool isOnPermissionList(const String& listName, unsigned const long long objectID) const;

	bool isOwnerOf(SceneObject* obj) const;

	bool isOwnerOf(unsigned long long oid) const;

	bool isOnAccessList(SceneObject* obj) const;

	bool isOnAccessList(unsigned long long oid) const;

	void sendPermissionListTo(CreatureObject* creature, const String& listName);

	bool hasPermissionList(const String& listName) const;

	bool isPermissionListFull(const String& listName) const;

	int togglePermission(const String& listName, unsigned const long long objectID);

	int grantPermission(const String& listName, unsigned const long long objectID);

	int revokePermission(const String& listName, unsigned const long long objectID);

	int revokeAllPermissions(unsigned const long long objectID);

	void revokeAllPermissions();

	/**
	 * Returns the cost to redeed this building. The redeed cost is 50 times the hourly maintenance rate.
	 * @return int The cost to redeed this building.
	 */
	int getRedeedCost() const;

	CreatureObject* getOwnerCreatureObject() const;

	unsigned long long getOwnerObjectID() const;

	unsigned long long getDeedObjectID() const;

	int getLotSize() const;

	void setMaintenanceReduced(bool value);

	float getMaintenanceRate() const;

	String getMaintenanceMods() const;

	int getBaseMaintenanceRate() const;

	int getBasePowerRate() const;

	float getDelayDestroyHours() const;

	int getSurplusMaintenance() const;

	int getSurplusPower() const;

	bool isPublicStructure() const;

	bool isPrivateStructure() const;

	void setOwner(unsigned long long objectID);

	void setWaypointID(unsigned long long objectID);

	unsigned long long getWaypointID() const;

	void setDeedObjectID(unsigned long long deedID);

	void setSurplusMaintenance(int surplus);

	void addMaintenance(float add);

	void subtractMaintenance(float subtract);

	/**
	 * Withdraws maintenance from payer and deposits it in the structure
	 * maintenance pool. Updates maintenance modifier depending on skill
	 * of payer.
	 * @pre payer and structure objects are locked.
	 * @post payer and structure objects are locked.
	 * @param maintenance maintenance amount to deposit.
	 * @param payer payer object.
	 * @param cashFirst Indicates if the amount should be withdrawn from
	 * the player's cash or bank account first.
	 */
	void payMaintenance(int maintenance, CreditObject* creditObj, bool cashFirst);

	void setSurplusPower(int surplus);

	void addPower(float add);

	bool isDecaying() const;

	bool isDecayed();

	int getDecayPercentage();

	bool isCondemned();

	void setPublicStructure(bool privacy);

	bool isStructureObject();

	bool isCampStructure() const;

	bool isRedeedable();

	/**
	 * Adds this object's skill mod map to the target object's skill mod map
	 * @param targetObject The targeted object containing the SkillModMap which will be affected.
	 */
	void addTemplateSkillMods(TangibleObject* targetObject) const;

	void removeTemplateSkillMods(TangibleObject* tangibleObject) const;

	String getRedeedMessage();

	bool isCivicStructure() const;

	bool isCityHall();

	bool isCommercialStructure() const;

	bool isGuildHall() const;

	void migratePermissions();

	NavArea* getNavArea() const;

	bool hasNavmesh() const;

	void createNavMesh();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	StructureObject(DummyConstructorParameter* param);

	virtual ~StructureObject();

	friend class StructureObjectHelper;
};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObjectImplementation : public TangibleObjectImplementation {
protected:
	Reference<StructureMaintenanceTask* > structureMaintenanceTask;

	ManagedReference<NavArea* > navArea;

	StructurePermissionList structurePermissionList;

	Time lastMaintenanceTime;

	Time maintenanceExpires;

	Time powerExpires;

	unsigned long long ownerObjectID;

	unsigned long long deedObjectID;

	unsigned long long waypointID;

	float surplusMaintenance;

	float surplusPower;

	bool maintenanceReduced;

	bool permissionsFixed;

public:
	StructureObjectImplementation();

	StructureObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void finalize();

	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void notifyLoadFromDatabase();

	void destroyObjectFromWorld(bool sendSelfDestroy);

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	void notifyInsertToZone(Zone* zone);

	void createChildObjects();

	virtual int getReceiverFlags() const;

	/**
	 * Gets called when the structure has been created;
	 */
	virtual int notifyStructurePlaced(CreatureObject* creature);

	void destroyOrphanCivicStructure();

	virtual bool checkRequisitesForPlacement(CreatureObject* player);

	String getTimeString(unsigned int timestamp) const;

	/**
	 * Schedules the event that will be fired when maintenance is due to run out.
	 * This method calls updateStructureStatus before running.
	 */
	void scheduleMaintenanceExpirationEvent();

	/**
	 * Schedules the maintenance task.
	 * @param timeFromNow the time till the task should be run.
	 */
	void scheduleMaintenanceTask(int timeFromNow);

	/**
	 * This method should be called anytime a method needs up to date information about
	 * maintenance, power, and condition of the structure.
	 */
	virtual void updateStructureStatus();

	String getDebugStructureStatus() const;

	/**
	 * Checks if the player is on the admin list.
	 * @param player The creo of the player to check for admin permission.
	 * @return Returns true if the player has admin permissions.
	 */
	bool isOnAdminList(CreatureObject* player) const;

	/**
	 * Checks if the player/guild is on the admin list.
	 * For PermissionsListModify command
	 * @param objectID The oid of the player/guild to check for admin permission.
	 * @return Returns true if the player/guild has admin permissions.
	 */
	bool isOnAdminList(unsigned const long long objectID) const;

	/**
	 * Checks if the player is on the entry list.
	 * @param player The creo of the player to check for entry permission.
	 * @return Returns true if the player has entry permissions.
	 */
	bool isOnEntryList(CreatureObject* player) const;

	/**
	 * Checks if the player is on the ban list.
	 * @param player The creo of the player to check for ban permission.
	 * @return Returns true if the player has ban permissions.
	 */
	bool isOnBanList(CreatureObject* player) const;

	/**
	 * Checks if the player/guild is on the ban list.
	 * For PermissionsListModify command
	 * @param objectID The oid of the player/guild to check for ban permission.
	 * @return Returns true if the player/guild has ban permissions.
	 */
	bool isOnBanList(unsigned const long long objectID) const;

	/**
	 * Checks if the player is on the hopper list.
	 * @param player The creo of the player to check for hopper permission.
	 * @return Returns true if the player has hopper permissions.
	 */
	bool isOnHopperList(CreatureObject* player) const;

	/**
	 * Checks if the player is the on the specified permission list.
	 * @param listName The name of the list to check.
	 * @param player The creo of the player to check.
	 * @return Returns true if the player was found on the list.
	 */
	bool isOnPermissionList(const String& listName, CreatureObject* player) const;

	/**
	 * Checks if the player/guild is the on the specified permission list.
	 * For PermissionsListModify command
	 * @param listName The name of the list to check.
	 * @param objectID The oid of the player/guild to check.
	 * @return Returns true if the player/guild was found on the list.
	 */
	bool isOnPermissionList(const String& listName, unsigned const long long objectID) const;

	bool isOwnerOf(SceneObject* obj) const;

	bool isOwnerOf(unsigned long long oid) const;

	bool isOnAccessList(SceneObject* obj) const;

	bool isOnAccessList(unsigned long long oid) const;

	void sendPermissionListTo(CreatureObject* creature, const String& listName);

	bool hasPermissionList(const String& listName) const;

	bool isPermissionListFull(const String& listName) const;

	int togglePermission(const String& listName, unsigned const long long objectID);

	int grantPermission(const String& listName, unsigned const long long objectID);

	int revokePermission(const String& listName, unsigned const long long objectID);

	int revokeAllPermissions(unsigned const long long objectID);

	void revokeAllPermissions();

	/**
	 * Returns the cost to redeed this building. The redeed cost is 50 times the hourly maintenance rate.
	 * @return int The cost to redeed this building.
	 */
	int getRedeedCost() const;

	CreatureObject* getOwnerCreatureObject() const;

	unsigned long long getOwnerObjectID() const;

	unsigned long long getDeedObjectID() const;

	int getLotSize() const;

	void setMaintenanceReduced(bool value);

	float getMaintenanceRate() const;

	String getMaintenanceMods() const;

	int getBaseMaintenanceRate() const;

	virtual int getBasePowerRate() const;

	float getDelayDestroyHours() const;

	int getSurplusMaintenance() const;

	int getSurplusPower() const;

	virtual bool isPublicStructure() const;

	virtual bool isPrivateStructure() const;

	void setOwner(unsigned long long objectID);

	void setWaypointID(unsigned long long objectID);

	unsigned long long getWaypointID() const;

	void setDeedObjectID(unsigned long long deedID);

	void setSurplusMaintenance(int surplus);

	void addMaintenance(float add);

	void subtractMaintenance(float subtract);

	/**
	 * Withdraws maintenance from payer and deposits it in the structure
	 * maintenance pool. Updates maintenance modifier depending on skill
	 * of payer.
	 * @pre payer and structure objects are locked.
	 * @post payer and structure objects are locked.
	 * @param maintenance maintenance amount to deposit.
	 * @param payer payer object.
	 * @param cashFirst Indicates if the amount should be withdrawn from
	 * the player's cash or bank account first.
	 */
	void payMaintenance(int maintenance, CreditObject* creditObj, bool cashFirst);

	void setSurplusPower(int surplus);

	void addPower(float add);

	bool isDecaying() const;

	bool isDecayed();

	int getDecayPercentage();

	virtual bool isCondemned();

	virtual void setPublicStructure(bool privacy);

	bool isStructureObject();

	bool isCampStructure() const;

	bool isRedeedable();

	/**
	 * Adds this object's skill mod map to the target object's skill mod map
	 * @param targetObject The targeted object containing the SkillModMap which will be affected.
	 */
	void addTemplateSkillMods(TangibleObject* targetObject) const;

	void removeTemplateSkillMods(TangibleObject* tangibleObject) const;

	virtual String getRedeedMessage();

	bool isCivicStructure() const;

	bool isCityHall();

	bool isCommercialStructure() const;

	bool isGuildHall() const;

	void migratePermissions();

	NavArea* getNavArea() const;

	bool hasNavmesh() const;

	virtual void createNavMesh();

	WeakReference<StructureObject*> _this;

	operator const StructureObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~StructureObjectImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class StructureObject;
};

class StructureObjectAdapter : public TangibleObjectAdapter {
public:
	StructureObjectAdapter(StructureObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void finalize();

	void notifyLoadFromDatabase();

	void destroyObjectFromWorld(bool sendSelfDestroy);

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	void notifyInsertToZone(Zone* zone);

	void createChildObjects();

	int getReceiverFlags() const;

	int notifyStructurePlaced(CreatureObject* creature);

	void destroyOrphanCivicStructure();

	bool checkRequisitesForPlacement(CreatureObject* player);

	String getTimeString(unsigned int timestamp) const;

	void scheduleMaintenanceExpirationEvent();

	void scheduleMaintenanceTask(int timeFromNow);

	void updateStructureStatus();

	String getDebugStructureStatus() const;

	bool isOnAdminList(CreatureObject* player) const;

	bool isOnAdminList(unsigned const long long objectID) const;

	bool isOnEntryList(CreatureObject* player) const;

	bool isOnBanList(CreatureObject* player) const;

	bool isOnBanList(unsigned const long long objectID) const;

	bool isOnHopperList(CreatureObject* player) const;

	bool isOnPermissionList(const String& listName, CreatureObject* player) const;

	bool isOnPermissionList(const String& listName, unsigned const long long objectID) const;

	bool isOwnerOf(SceneObject* obj) const;

	bool isOwnerOf(unsigned long long oid) const;

	bool isOnAccessList(SceneObject* obj) const;

	bool isOnAccessList(unsigned long long oid) const;

	void sendPermissionListTo(CreatureObject* creature, const String& listName);

	bool hasPermissionList(const String& listName) const;

	bool isPermissionListFull(const String& listName) const;

	int togglePermission(const String& listName, unsigned const long long objectID);

	int grantPermission(const String& listName, unsigned const long long objectID);

	int revokePermission(const String& listName, unsigned const long long objectID);

	int revokeAllPermissions(unsigned const long long objectID);

	void revokeAllPermissions();

	int getRedeedCost() const;

	CreatureObject* getOwnerCreatureObject() const;

	unsigned long long getOwnerObjectID() const;

	unsigned long long getDeedObjectID() const;

	int getLotSize() const;

	void setMaintenanceReduced(bool value);

	float getMaintenanceRate() const;

	String getMaintenanceMods() const;

	int getBaseMaintenanceRate() const;

	int getBasePowerRate() const;

	float getDelayDestroyHours() const;

	int getSurplusMaintenance() const;

	int getSurplusPower() const;

	bool isPublicStructure() const;

	bool isPrivateStructure() const;

	void setOwner(unsigned long long objectID);

	void setWaypointID(unsigned long long objectID);

	unsigned long long getWaypointID() const;

	void setDeedObjectID(unsigned long long deedID);

	void setSurplusMaintenance(int surplus);

	void addMaintenance(float add);

	void subtractMaintenance(float subtract);

	void payMaintenance(int maintenance, CreditObject* creditObj, bool cashFirst);

	void setSurplusPower(int surplus);

	void addPower(float add);

	bool isDecaying() const;

	bool isDecayed();

	int getDecayPercentage();

	bool isCondemned();

	void setPublicStructure(bool privacy);

	bool isStructureObject();

	bool isCampStructure() const;

	bool isRedeedable();

	String getRedeedMessage();

	bool isCivicStructure() const;

	bool isCityHall();

	bool isCommercialStructure() const;

	bool isGuildHall() const;

	void migratePermissions();

	NavArea* getNavArea() const;

	bool hasNavmesh() const;

	void createNavMesh();

};

class StructureObjectHelper : public DistributedObjectClassHelper, public Singleton<StructureObjectHelper> {
	static StructureObjectHelper* staticInitializer;

public:
	StructureObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StructureObjectHelper>;
};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObjectPOD : public TangibleObjectPOD {
public:
	Optional<ManagedReference<NavAreaPOD* >> navArea;

	Optional<StructurePermissionList> structurePermissionList;

	Optional<Time> lastMaintenanceTime;

	Optional<Time> maintenanceExpires;

	Optional<Time> powerExpires;

	Optional<unsigned long long> ownerObjectID;

	Optional<unsigned long long> deedObjectID;

	Optional<unsigned long long> waypointID;

	Optional<float> surplusMaintenance;

	Optional<float> surplusPower;

	Optional<bool> maintenanceReduced;

	Optional<bool> permissionsFixed;

	String _className;
	StructureObjectPOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~StructureObjectPOD();

};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

#endif /*STRUCTUREOBJECTPOD_H_*/
