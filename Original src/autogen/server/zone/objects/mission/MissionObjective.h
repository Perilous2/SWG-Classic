/*
 *	autogen/server/zone/objects/mission/MissionObjective.h generated by engine3 IDL compiler 0.70
 */

#ifndef MISSIONOBJECTIVE_H_
#define MISSIONOBJECTIVE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/log/Logger.h"

#include "engine/core/ManagedObject.h"

#include "engine/util/u3d/Vector3.h"

#include "system/lang/Time.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/mission/events/FailMissionAfterCertainTimeTask.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/transaction/TransactionLog.h"

#include "engine/util/Observable.h"

#include "system/util/SortedVector.h"

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObjective : public ManagedObject {
public:
	static const int MISSIONDURATION = 172800000;

	MissionObjective(MissionObject* parent);

	void initializeTransientMembers();

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 */
	void destroyObjectFromDatabase();

	int notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void addObserver(MissionObserver* observer, bool makePersistent);

	void dropObserver(MissionObserver* observer, bool removeFromDatabase);

	int getObserverCount();

	void removeAllObservers();

	MissionObserver* getObserver(int index);

	bool hasObservers();

	void activate();

	void deactivate();

	void abort();

	void complete();

	void fail();

	ManagedWeakReference<MissionObject* > getMissionObject();

	unsigned int getObjectiveType() const;

	Reference<CreatureObject* > getPlayerOwner();

	void awardFactionPoints();

	void removeMissionFromPlayer();

	void awardReward();

	void addMissionStats(TransactionLog& trx);

	Vector3 getEndPosition();

	void clearFailTask();

	bool isPlayerBounty() const;

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	MissionObjective(DummyConstructorParameter* param);

	virtual ~MissionObjective();

	friend class MissionObjectiveHelper;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObjectiveImplementation : public ManagedObjectImplementation, public Logger {
	SortedVector<ManagedReference<MissionObserver* > > observers;

protected:
	ManagedWeakReference<MissionObject* > mission;

	unsigned int objectiveType;

	Time missionStartTime;

	Reference<FailMissionAfterCertainTimeTask* > failTask;

	bool activated;

public:
	static const int MISSIONDURATION = 172800000;

	MissionObjectiveImplementation(MissionObject* parent);

	MissionObjectiveImplementation(DummyConstructorParameter* param);

	virtual void initializeTransientMembers();

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 */
	virtual void destroyObjectFromDatabase();

	virtual int notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void addObserver(MissionObserver* observer, bool makePersistent);

	void dropObserver(MissionObserver* observer, bool removeFromDatabase);

	int getObserverCount();

	void removeAllObservers();

	MissionObserver* getObserver(int index);

	bool hasObservers();

	virtual void activate();

	virtual void deactivate();

	virtual void abort();

	virtual void complete();

	virtual void fail();

	ManagedWeakReference<MissionObject* > getMissionObject();

	unsigned int getObjectiveType() const;

	Reference<CreatureObject* > getPlayerOwner();

	void awardFactionPoints();

	void removeMissionFromPlayer();

	void awardReward();

	virtual void addMissionStats(TransactionLog& trx);

	virtual Vector3 getEndPosition();

	void clearFailTask();

	virtual bool isPlayerBounty() const;

	WeakReference<MissionObjective*> _this;

	operator const MissionObjective*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	virtual void writeJSON(nlohmann::json& j);
protected:
	virtual ~MissionObjectiveImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class MissionObjective;
};

class MissionObjectiveAdapter : public ManagedObjectAdapter {
public:
	MissionObjectiveAdapter(MissionObjective* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void destroyObjectFromDatabase();

	int notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void addObserver(MissionObserver* observer, bool makePersistent);

	void dropObserver(MissionObserver* observer, bool removeFromDatabase);

	int getObserverCount();

	void removeAllObservers();

	MissionObserver* getObserver(int index);

	bool hasObservers();

	void activate();

	void deactivate();

	void abort();

	void complete();

	void fail();

	ManagedWeakReference<MissionObject* > getMissionObject();

	unsigned int getObjectiveType() const;

	Reference<CreatureObject* > getPlayerOwner();

	void awardFactionPoints();

	void removeMissionFromPlayer();

	void awardReward();

	void clearFailTask();

	bool isPlayerBounty() const;

};

class MissionObjectiveHelper : public DistributedObjectClassHelper, public Singleton<MissionObjectiveHelper> {
	static MissionObjectiveHelper* staticInitializer;

public:
	MissionObjectiveHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MissionObjectiveHelper>;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObjectivePOD : public ManagedObjectPOD {
public:
	Optional<SortedVector<ManagedReference<MissionObserverPOD* > >> observers;

	Optional<ManagedWeakReference<MissionObjectPOD* >> mission;

	Optional<unsigned int> objectiveType;

	Optional<Time> missionStartTime;

	String _className;
	MissionObjectivePOD();
	virtual void writeJSON(nlohmann::json& j);
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~MissionObjectivePOD();

};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

#endif /*MISSIONOBJECTIVEPOD_H_*/
