/*
 *	autogen/server/zone/objects/mission/PlayerBounty.cpp generated by engine3 IDL compiler 0.70
 */

#include "PlayerBounty.h"

/*
 *	PlayerBountyStub
 */

enum {RPC_SETREWARD__INT_ = 2906054437,RPC_SETONLINE__BOOL_,RPC_GETTARGETPLAYERID__,RPC_GETREWARD__,RPC_ISONLINE__,RPC_NUMBEROFACTIVEMISSIONS__,RPC_ADDBOUNTYHUNTER__LONG_,RPC_REMOVEBOUNTYHUNTER__LONG_,RPC_HASBOUNTYHUNTER__LONG_,RPC_GETLASTBOUNTYKILL__,RPC_SETLASTBOUNTYKILL__LONG_,RPC_GETLASTBOUNTYDEBUFF__,RPC_SETLASTBOUNTYDEBUFF__LONG_,RPC_CANTAKEMISSION__LONG_LONG_,RPC_ADDMISSIONCOOLDOWN__LONG_LONG_};

PlayerBounty::PlayerBounty(unsigned long long targetID, int payout) : ManagedObject(DummyConstructorParameter::instance()) {
	PlayerBountyImplementation* _implementation = new PlayerBountyImplementation(targetID, payout);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PlayerBounty");
}

PlayerBounty::PlayerBounty(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("PlayerBounty");
}

PlayerBounty::~PlayerBounty() {
}



void PlayerBounty::setReward(int amount) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARD__INT_);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else {
		_implementation->setReward(amount);
	}
}

void PlayerBounty::setOnline(bool state) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETONLINE__BOOL_);
		method.addBooleanParameter(state);

		method.executeWithVoidReturn();
	} else {
		_implementation->setOnline(state);
	}
}

unsigned long long PlayerBounty::getTargetPlayerID() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTARGETPLAYERID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getTargetPlayerID();
	}
}

int PlayerBounty::getReward() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARD__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getReward();
	}
}

bool PlayerBounty::isOnline() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONLINE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isOnline();
	}
}

int PlayerBounty::numberOfActiveMissions() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NUMBEROFACTIVEMISSIONS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->numberOfActiveMissions();
	}
}

void PlayerBounty::addBountyHunter(unsigned long long id) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBOUNTYHUNTER__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		_implementation->addBountyHunter(id);
	}
}

void PlayerBounty::removeBountyHunter(unsigned long long id) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBOUNTYHUNTER__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeBountyHunter(id);
	}
}

bool PlayerBounty::hasBountyHunter(unsigned long long id) const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASBOUNTYHUNTER__LONG_);
		method.addUnsignedLongParameter(id);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->hasBountyHunter(id);
	}
}

const SortedVector<unsigned long long>* PlayerBounty::getBountyHunters() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getBountyHunters();
	}
}

unsigned long long PlayerBounty::getLastBountyKill() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTBOUNTYKILL__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getLastBountyKill();
	}
}

void PlayerBounty::setLastBountyKill(unsigned long long newTime) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLASTBOUNTYKILL__LONG_);
		method.addUnsignedLongParameter(newTime);

		method.executeWithVoidReturn();
	} else {
		_implementation->setLastBountyKill(newTime);
	}
}

unsigned long long PlayerBounty::getLastBountyDebuff() const {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLASTBOUNTYDEBUFF__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getLastBountyDebuff();
	}
}

void PlayerBounty::setLastBountyDebuff(unsigned long long newTime) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLASTBOUNTYDEBUFF__LONG_);
		method.addUnsignedLongParameter(newTime);

		method.executeWithVoidReturn();
	} else {
		_implementation->setLastBountyDebuff(newTime);
	}
}

bool PlayerBounty::canTakeMission(unsigned long long enemyID, unsigned long long cooldownTime) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANTAKEMISSION__LONG_LONG_);
		method.addUnsignedLongParameter(enemyID);
		method.addUnsignedLongParameter(cooldownTime);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->canTakeMission(enemyID, cooldownTime);
	}
}

void PlayerBounty::addMissionCooldown(unsigned long long enemyID, unsigned long long newTime) {
	PlayerBountyImplementation* _implementation = static_cast<PlayerBountyImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMISSIONCOOLDOWN__LONG_LONG_);
		method.addUnsignedLongParameter(enemyID);
		method.addUnsignedLongParameter(newTime);

		method.executeWithVoidReturn();
	} else {
		_implementation->addMissionCooldown(enemyID, newTime);
	}
}

DistributedObjectServant* PlayerBounty::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PlayerBounty::_getImplementationForRead() const {
	return _impl;
}

void PlayerBounty::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerBountyImplementation
 */

PlayerBountyImplementation::PlayerBountyImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


PlayerBountyImplementation::~PlayerBountyImplementation() {
}


void PlayerBountyImplementation::finalize() {
}

void PlayerBountyImplementation::_initializeImplementation() {
	_setClassHelper(PlayerBountyHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PlayerBountyImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PlayerBounty*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerBountyImplementation::_getStub() {
	return _this.get();
}

PlayerBountyImplementation::operator const PlayerBounty*() {
	return _this.get();
}

void PlayerBountyImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PlayerBountyImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PlayerBountyImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PlayerBountyImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PlayerBountyImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PlayerBountyImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PlayerBountyImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PlayerBountyImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("PlayerBounty");

}

void PlayerBountyImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlayerBountyImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerBountyImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x7b0ecd32: //PlayerBounty.targetPlayerID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&targetPlayerID, stream);
		return true;

	case 0xd83be00b: //PlayerBounty.reward
		TypeInfo<int >::parseFromBinaryStream(&reward, stream);
		return true;

	case 0xe1fc5155: //PlayerBounty.online
		TypeInfo<bool >::parseFromBinaryStream(&online, stream);
		return true;

	case 0x24f268db: //PlayerBounty.lastBountyKill
		TypeInfo<unsigned long long >::parseFromBinaryStream(&lastBountyKill, stream);
		return true;

	case 0x922915b7: //PlayerBounty.lastBountyDebuff
		TypeInfo<unsigned long long >::parseFromBinaryStream(&lastBountyDebuff, stream);
		return true;

	case 0xf14c5e3d: //PlayerBounty.bountyHunterIDs
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&bountyHunterIDs, stream);
		return true;

	case 0x78f9a63f: //PlayerBounty.missionCooldownList
		TypeInfo<VectorMap<unsigned long long, unsigned long long> >::parseFromBinaryStream(&missionCooldownList, stream);
		return true;

	}

	return false;
}

void PlayerBountyImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerBountyImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerBountyImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x7b0ecd32; //PlayerBounty.targetPlayerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&targetPlayerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xd83be00b; //PlayerBounty.reward
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&reward, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xe1fc5155; //PlayerBounty.online
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&online, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x24f268db; //PlayerBounty.lastBountyKill
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&lastBountyKill, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x922915b7; //PlayerBounty.lastBountyDebuff
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&lastBountyDebuff, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xf14c5e3d; //PlayerBounty.bountyHunterIDs
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&bountyHunterIDs, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x78f9a63f; //PlayerBounty.missionCooldownList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, unsigned long long> >::toBinaryStream(&missionCooldownList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

PlayerBountyImplementation::PlayerBountyImplementation(unsigned long long targetID, int payout) {
	_initializeImplementation();
	// server/zone/objects/mission/PlayerBounty.idl():  		targetPlayerID = targetID;
	targetPlayerID = targetID;
	// server/zone/objects/mission/PlayerBounty.idl():  		reward = payout;
	reward = payout;
	// server/zone/objects/mission/PlayerBounty.idl():  		online = true;
	online = true;
	// server/zone/objects/mission/PlayerBounty.idl():  		bountyHunterIDs.setNoDuplicateInsertPlan();
	(&bountyHunterIDs)->setNoDuplicateInsertPlan();
	// server/zone/objects/mission/PlayerBounty.idl():  		missionCooldownList.setNoDuplicateInsertPlan();
	(&missionCooldownList)->setNoDuplicateInsertPlan();
	// server/zone/objects/mission/PlayerBounty.idl():  		lastBountyKill = 0;
	lastBountyKill = 0;
	// server/zone/objects/mission/PlayerBounty.idl():  		lastBountyDebuff = 0;
	lastBountyDebuff = 0;
}

void PlayerBountyImplementation::setReward(int amount) {
	// server/zone/objects/mission/PlayerBounty.idl():  		reward = amount;
	reward = amount;
}

void PlayerBountyImplementation::setOnline(bool state) {
	// server/zone/objects/mission/PlayerBounty.idl():  		online = state;
	online = state;
}

unsigned long long PlayerBountyImplementation::getTargetPlayerID() const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return targetPlayerID;
	return targetPlayerID;
}

int PlayerBountyImplementation::getReward() const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return reward;
	return reward;
}

bool PlayerBountyImplementation::isOnline() const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return online;
	return online;
}

int PlayerBountyImplementation::numberOfActiveMissions() const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return bountyHunterIDs.size();
	return (&bountyHunterIDs)->size();
}

void PlayerBountyImplementation::addBountyHunter(unsigned long long id) {
	// server/zone/objects/mission/PlayerBounty.idl():  		bountyHunterIDs.put(id);
	(&bountyHunterIDs)->put(id);
}

void PlayerBountyImplementation::removeBountyHunter(unsigned long long id) {
	// server/zone/objects/mission/PlayerBounty.idl():  		bountyHunterIDs.drop(id);
	(&bountyHunterIDs)->drop(id);
}

bool PlayerBountyImplementation::hasBountyHunter(unsigned long long id) const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return bountyHunterIDs.contains(id);
	return (&bountyHunterIDs)->contains(id);
}

const SortedVector<unsigned long long>* PlayerBountyImplementation::getBountyHunters() const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return bountyHunterIDs;
	return (&bountyHunterIDs);
}

unsigned long long PlayerBountyImplementation::getLastBountyKill() const{
	// server/zone/objects/mission/PlayerBounty.idl():  		return lastBountyKill;
	return lastBountyKill;
}

void PlayerBountyImplementation::setLastBountyKill(unsigned long long newTime) {
	// server/zone/objects/mission/PlayerBounty.idl():  		lastBountyKill = newTime;
	lastBountyKill = newTime;
}

unsigned long long PlayerBountyImplementation::getLastBountyDebuff() const{
	// server/zone/objects/mission/PlayerBounty.idl():  	 return lastBountyDebuff;
	return lastBountyDebuff;
}

void PlayerBountyImplementation::setLastBountyDebuff(unsigned long long newTime) {
	// server/zone/objects/mission/PlayerBounty.idl():  	 lastBountyDebuff = newTime;
	lastBountyDebuff = newTime;
}

void PlayerBountyImplementation::addMissionCooldown(unsigned long long enemyID, unsigned long long newTime) {
	// server/zone/objects/mission/PlayerBounty.idl():  		missionCooldownList.put(enemyID, newTime);
	(&missionCooldownList)->put(enemyID, newTime);
}

/*
 *	PlayerBountyAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PlayerBountyAdapter::PlayerBountyAdapter(PlayerBounty* obj) : ManagedObjectAdapter(obj) {
}

void PlayerBountyAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETREWARD__INT_:
		{
			int amount = inv->getSignedIntParameter();
			
			setReward(amount);
			
		}
		break;
	case RPC_SETONLINE__BOOL_:
		{
			bool state = inv->getBooleanParameter();
			
			setOnline(state);
			
		}
		break;
	case RPC_GETTARGETPLAYERID__:
		{
			
			unsigned long long _m_res = getTargetPlayerID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETREWARD__:
		{
			
			int _m_res = getReward();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISONLINE__:
		{
			
			bool _m_res = isOnline();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_NUMBEROFACTIVEMISSIONS__:
		{
			
			int _m_res = numberOfActiveMissions();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ADDBOUNTYHUNTER__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			addBountyHunter(id);
			
		}
		break;
	case RPC_REMOVEBOUNTYHUNTER__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			removeBountyHunter(id);
			
		}
		break;
	case RPC_HASBOUNTYHUNTER__LONG_:
		{
			unsigned long long id = inv->getUnsignedLongParameter();
			
			bool _m_res = hasBountyHunter(id);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETLASTBOUNTYKILL__:
		{
			
			unsigned long long _m_res = getLastBountyKill();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETLASTBOUNTYKILL__LONG_:
		{
			unsigned long long newTime = inv->getUnsignedLongParameter();
			
			setLastBountyKill(newTime);
			
		}
		break;
	case RPC_GETLASTBOUNTYDEBUFF__:
		{
			
			unsigned long long _m_res = getLastBountyDebuff();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_SETLASTBOUNTYDEBUFF__LONG_:
		{
			unsigned long long newTime = inv->getUnsignedLongParameter();
			
			setLastBountyDebuff(newTime);
			
		}
		break;
	case RPC_CANTAKEMISSION__LONG_LONG_:
		{
			unsigned long long enemyID = inv->getUnsignedLongParameter();
			unsigned long long cooldownTime = inv->getUnsignedLongParameter();
			
			bool _m_res = canTakeMission(enemyID, cooldownTime);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_ADDMISSIONCOOLDOWN__LONG_LONG_:
		{
			unsigned long long enemyID = inv->getUnsignedLongParameter();
			unsigned long long newTime = inv->getUnsignedLongParameter();
			
			addMissionCooldown(enemyID, newTime);
			
		}
		break;
	default:
		ManagedObjectAdapter::invokeMethod(methid, inv);
	}
}

void PlayerBountyAdapter::setReward(int amount) {
	(static_cast<PlayerBounty*>(stub))->setReward(amount);
}

void PlayerBountyAdapter::setOnline(bool state) {
	(static_cast<PlayerBounty*>(stub))->setOnline(state);
}

unsigned long long PlayerBountyAdapter::getTargetPlayerID() const {
	return (static_cast<PlayerBounty*>(stub))->getTargetPlayerID();
}

int PlayerBountyAdapter::getReward() const {
	return (static_cast<PlayerBounty*>(stub))->getReward();
}

bool PlayerBountyAdapter::isOnline() const {
	return (static_cast<PlayerBounty*>(stub))->isOnline();
}

int PlayerBountyAdapter::numberOfActiveMissions() const {
	return (static_cast<PlayerBounty*>(stub))->numberOfActiveMissions();
}

void PlayerBountyAdapter::addBountyHunter(unsigned long long id) {
	(static_cast<PlayerBounty*>(stub))->addBountyHunter(id);
}

void PlayerBountyAdapter::removeBountyHunter(unsigned long long id) {
	(static_cast<PlayerBounty*>(stub))->removeBountyHunter(id);
}

bool PlayerBountyAdapter::hasBountyHunter(unsigned long long id) const {
	return (static_cast<PlayerBounty*>(stub))->hasBountyHunter(id);
}

unsigned long long PlayerBountyAdapter::getLastBountyKill() const {
	return (static_cast<PlayerBounty*>(stub))->getLastBountyKill();
}

void PlayerBountyAdapter::setLastBountyKill(unsigned long long newTime) {
	(static_cast<PlayerBounty*>(stub))->setLastBountyKill(newTime);
}

unsigned long long PlayerBountyAdapter::getLastBountyDebuff() const {
	return (static_cast<PlayerBounty*>(stub))->getLastBountyDebuff();
}

void PlayerBountyAdapter::setLastBountyDebuff(unsigned long long newTime) {
	(static_cast<PlayerBounty*>(stub))->setLastBountyDebuff(newTime);
}

bool PlayerBountyAdapter::canTakeMission(unsigned long long enemyID, unsigned long long cooldownTime) {
	return (static_cast<PlayerBounty*>(stub))->canTakeMission(enemyID, cooldownTime);
}

void PlayerBountyAdapter::addMissionCooldown(unsigned long long enemyID, unsigned long long newTime) {
	(static_cast<PlayerBounty*>(stub))->addMissionCooldown(enemyID, newTime);
}

/*
 *	PlayerBountyHelper
 */

PlayerBountyHelper* PlayerBountyHelper::staticInitializer = PlayerBountyHelper::instance();

PlayerBountyHelper::PlayerBountyHelper() {
	className = "PlayerBounty";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerBountyHelper::finalizeHelper() {
	PlayerBountyHelper::finalize();
}

DistributedObject* PlayerBountyHelper::instantiateObject() {
	return new PlayerBounty(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerBountyHelper::instantiateServant() {
	return new PlayerBountyImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* PlayerBountyHelper::instantiatePOD() {
	return new PlayerBountyPOD();
}

DistributedObjectAdapter* PlayerBountyHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerBountyAdapter(static_cast<PlayerBounty*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerBountyPOD
 */

PlayerBountyPOD::~PlayerBountyPOD() {
}

PlayerBountyPOD::PlayerBountyPOD(void) {
	_className = "PlayerBounty";
}


void PlayerBountyPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerBountyPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerBountyPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (targetPlayerID) {
	_nameHashCode = 0x7b0ecd32; //PlayerBounty.targetPlayerID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&targetPlayerID.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (reward) {
	_nameHashCode = 0xd83be00b; //PlayerBounty.reward
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&reward.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (online) {
	_nameHashCode = 0xe1fc5155; //PlayerBounty.online
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&online.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lastBountyKill) {
	_nameHashCode = 0x24f268db; //PlayerBounty.lastBountyKill
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&lastBountyKill.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (lastBountyDebuff) {
	_nameHashCode = 0x922915b7; //PlayerBounty.lastBountyDebuff
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&lastBountyDebuff.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (bountyHunterIDs) {
	_nameHashCode = 0xf14c5e3d; //PlayerBounty.bountyHunterIDs
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&bountyHunterIDs.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (missionCooldownList) {
	_nameHashCode = 0x78f9a63f; //PlayerBounty.missionCooldownList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, unsigned long long> >::toBinaryStream(&missionCooldownList.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool PlayerBountyPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x7b0ecd32: //PlayerBounty.targetPlayerID
		{
			unsigned long long _mntargetPlayerID;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mntargetPlayerID, stream);
			targetPlayerID = std::move(_mntargetPlayerID);
		}
		return true;

	case 0xd83be00b: //PlayerBounty.reward
		{
			int _mnreward;
			TypeInfo<int >::parseFromBinaryStream(&_mnreward, stream);
			reward = std::move(_mnreward);
		}
		return true;

	case 0xe1fc5155: //PlayerBounty.online
		{
			bool _mnonline;
			TypeInfo<bool >::parseFromBinaryStream(&_mnonline, stream);
			online = std::move(_mnonline);
		}
		return true;

	case 0x24f268db: //PlayerBounty.lastBountyKill
		{
			unsigned long long _mnlastBountyKill;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnlastBountyKill, stream);
			lastBountyKill = std::move(_mnlastBountyKill);
		}
		return true;

	case 0x922915b7: //PlayerBounty.lastBountyDebuff
		{
			unsigned long long _mnlastBountyDebuff;
			TypeInfo<unsigned long long >::parseFromBinaryStream(&_mnlastBountyDebuff, stream);
			lastBountyDebuff = std::move(_mnlastBountyDebuff);
		}
		return true;

	case 0xf14c5e3d: //PlayerBounty.bountyHunterIDs
		{
			SortedVector<unsigned long long> _mnbountyHunterIDs;
			TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&_mnbountyHunterIDs, stream);
			bountyHunterIDs = std::move(_mnbountyHunterIDs);
		}
		return true;

	case 0x78f9a63f: //PlayerBounty.missionCooldownList
		{
			VectorMap<unsigned long long, unsigned long long> _mnmissionCooldownList;
			TypeInfo<VectorMap<unsigned long long, unsigned long long> >::parseFromBinaryStream(&_mnmissionCooldownList, stream);
			missionCooldownList = std::move(_mnmissionCooldownList);
		}
		return true;

	}

	return false;
}

void PlayerBountyPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlayerBountyPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void PlayerBountyPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ManagedObjectPOD::writeObjectCompact(stream);

	TypeInfo<unsigned long long >::toBinaryStream(&targetPlayerID.value(), stream);

	TypeInfo<int >::toBinaryStream(&reward.value(), stream);

	TypeInfo<bool >::toBinaryStream(&online.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&lastBountyKill.value(), stream);

	TypeInfo<unsigned long long >::toBinaryStream(&lastBountyDebuff.value(), stream);

	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&bountyHunterIDs.value(), stream);

	TypeInfo<VectorMap<unsigned long long, unsigned long long> >::toBinaryStream(&missionCooldownList.value(), stream);


}

