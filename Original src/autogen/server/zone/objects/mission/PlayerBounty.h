/*
 *	autogen/server/zone/objects/mission/PlayerBounty.h generated by engine3 IDL compiler 0.70
 */

#ifndef PLAYERBOUNTY_H_
#define PLAYERBOUNTY_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

#include "system/util/SortedVector.h"

#include "system/util/VectorMap.h"

#include "engine/core/ManagedObject.h"

namespace server {
namespace zone {
namespace objects {
namespace mission {

class PlayerBounty : public ManagedObject {
public:
	PlayerBounty(unsigned long long targetID, int payout);

	void setReward(int amount);

	void setOnline(bool state);

	unsigned long long getTargetPlayerID() const;

	int getReward() const;

	bool isOnline() const;

	int numberOfActiveMissions() const;

	void addBountyHunter(unsigned long long id);

	void removeBountyHunter(unsigned long long id);

	bool hasBountyHunter(unsigned long long id) const;

	const SortedVector<unsigned long long>* getBountyHunters() const;

	unsigned long long getLastBountyKill() const;

	void setLastBountyKill(unsigned long long newTime);

	unsigned long long getLastBountyDebuff() const;

	void setLastBountyDebuff(unsigned long long newTime);

	bool canTakeMission(unsigned long long enemyID, unsigned long long cooldownTime);

	void addMissionCooldown(unsigned long long enemyID, unsigned long long newTime);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerBounty(DummyConstructorParameter* param);

	virtual ~PlayerBounty();

	friend class PlayerBountyHelper;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class PlayerBountyImplementation : public ManagedObjectImplementation {
protected:
	unsigned long long targetPlayerID;

	int reward;

	bool online;

	unsigned long long lastBountyKill;

	unsigned long long lastBountyDebuff;

	SortedVector<unsigned long long> bountyHunterIDs;

	VectorMap<unsigned long long, unsigned long long> missionCooldownList;

public:
	PlayerBountyImplementation(unsigned long long targetID, int payout);

	PlayerBountyImplementation(DummyConstructorParameter* param);

	void setReward(int amount);

	void setOnline(bool state);

	unsigned long long getTargetPlayerID() const;

	int getReward() const;

	bool isOnline() const;

	int numberOfActiveMissions() const;

	void addBountyHunter(unsigned long long id);

	void removeBountyHunter(unsigned long long id);

	bool hasBountyHunter(unsigned long long id) const;

	const SortedVector<unsigned long long>* getBountyHunters() const;

	unsigned long long getLastBountyKill() const;

	void setLastBountyKill(unsigned long long newTime);

	unsigned long long getLastBountyDebuff() const;

	void setLastBountyDebuff(unsigned long long newTime);

	bool canTakeMission(unsigned long long enemyID, unsigned long long cooldownTime);

	void addMissionCooldown(unsigned long long enemyID, unsigned long long newTime);

	WeakReference<PlayerBounty*> _this;

	operator const PlayerBounty*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerBountyImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerBounty;
};

class PlayerBountyAdapter : public ManagedObjectAdapter {
public:
	PlayerBountyAdapter(PlayerBounty* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setReward(int amount);

	void setOnline(bool state);

	unsigned long long getTargetPlayerID() const;

	int getReward() const;

	bool isOnline() const;

	int numberOfActiveMissions() const;

	void addBountyHunter(unsigned long long id);

	void removeBountyHunter(unsigned long long id);

	bool hasBountyHunter(unsigned long long id) const;

	unsigned long long getLastBountyKill() const;

	void setLastBountyKill(unsigned long long newTime);

	unsigned long long getLastBountyDebuff() const;

	void setLastBountyDebuff(unsigned long long newTime);

	bool canTakeMission(unsigned long long enemyID, unsigned long long cooldownTime);

	void addMissionCooldown(unsigned long long enemyID, unsigned long long newTime);

};

class PlayerBountyHelper : public DistributedObjectClassHelper, public Singleton<PlayerBountyHelper> {
	static PlayerBountyHelper* staticInitializer;

public:
	PlayerBountyHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerBountyHelper>;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class PlayerBountyPOD : public ManagedObjectPOD {
public:
	Optional<unsigned long long> targetPlayerID;

	Optional<int> reward;

	Optional<bool> online;

	Optional<unsigned long long> lastBountyKill;

	Optional<unsigned long long> lastBountyDebuff;

	Optional<SortedVector<unsigned long long>> bountyHunterIDs;

	Optional<VectorMap<unsigned long long, unsigned long long>> missionCooldownList;

	String _className;
	PlayerBountyPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~PlayerBountyPOD();

};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

#endif /*PLAYERBOUNTYPOD_H_*/
