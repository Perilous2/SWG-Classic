/*
 *	autogen/server/zone/QuadTreeEntry.cpp generated by engine3 IDL compiler 0.70
 */

#include "QuadTreeEntry.h"

#include "server/zone/QuadTreeNode.h"

/*
 *	QuadTreeEntryStub
 */

enum {RPC_ADDINRANGEOBJECT__QUADTREEENTRY_BOOL_ = 4100280936,RPC_REMOVEINRANGEOBJECT__QUADTREEENTRY_BOOL_,RPC_REMOVEINRANGEOBJECT__INT_,RPC_REMOVEINRANGEOBJECTS__,RPC_ISINRANGE__QUADTREEENTRY_FLOAT_,RPC_GETOUTOFRANGEDISTANCE__,RPC_ISINRANGE__FLOAT_FLOAT_FLOAT_,RPC_GETDISTANCETO__QUADTREEENTRY_,RPC_GETPARENT__,RPC_GETPARENTUNSAFE__,RPC_GETROOTPARENTUNSAFE__,RPC_CONTAINSPOINT__FLOAT_FLOAT_,RPC_GETROOTPARENT__,RPC_NOTIFYINSERT__QUADTREEENTRY_,RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_,RPC_NOTIFYDISSAPEAR__QUADTREEENTRY_,RPC_GETPOSITIONX__,RPC_GETPOSITIONZ__,RPC_GETPOSITIONY__,RPC_GETPREVIOUSPOSITIONX__,RPC_GETPREVIOUSPOSITIONZ__,RPC_GETPREVIOUSPOSITIONY__,RPC_SETPOSITION__FLOAT_FLOAT_FLOAT_,RPC_INITIALIZEPOSITION__FLOAT_FLOAT_FLOAT_,RPC_COMPARETO__QUADTREEENTRY_,RPC_REGISTERTOCLOSEOBJECTSRECEIVERS__,RPC_GETRECEIVERFLAGS__,RPC_ISINQUADTREE__,RPC_GETDIRTYOBJECTID__,RPC_GETOBJECTID__,RPC_GETRADIUS__,RPC_ISBOUNDING__,RPC_SETBOUNDING__,RPC_SETRADIUS__FLOAT_,RPC_CLEARBOUNDING__,RPC_SETPARENT__QUADTREEENTRY_};

QuadTreeEntry::QuadTreeEntry(QuadTreeNode* n) : Observable(DummyConstructorParameter::instance()) {
	QuadTreeEntryImplementation* _implementation = new QuadTreeEntryImplementation(n);
	_impl = _implementation;
	_implementation->_initializeImplementation();
	_impl->_setStub(this);
	_setClassName("QuadTreeEntry");
}

QuadTreeEntry::QuadTreeEntry(DummyConstructorParameter* param) : Observable(param) {
	_setClassName("QuadTreeEntry");
}

QuadTreeEntry::~QuadTreeEntry() {
}



void QuadTreeEntry::addInRangeObject(QuadTreeEntry* obj, bool doNotifyUpdate) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDINRANGEOBJECT__QUADTREEENTRY_BOOL_);
		method.addObjectParameter(obj);
		method.addBooleanParameter(doNotifyUpdate);

		method.executeWithVoidReturn();
	} else {
		_implementation->addInRangeObject(obj, doNotifyUpdate);
	}
}

void QuadTreeEntry::removeInRangeObject(QuadTreeEntry* obj, bool notifyDisappear) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEINRANGEOBJECT__QUADTREEENTRY_BOOL_);
		method.addObjectParameter(obj);
		method.addBooleanParameter(notifyDisappear);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeInRangeObject(obj, notifyDisappear);
	}
}

void QuadTreeEntry::removeInRangeObject(int index) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEINRANGEOBJECT__INT_);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeInRangeObject(index);
	}
}

void QuadTreeEntry::removeInRangeObjects() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEINRANGEOBJECTS__);

		method.executeWithVoidReturn();
	} else {
		_implementation->removeInRangeObjects();
	}
}

bool QuadTreeEntry::isInRange(QuadTreeEntry* obj, float range) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGE__QUADTREEENTRY_FLOAT_);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInRange(obj, range);
	}
}

float QuadTreeEntry::getOutOfRangeDistance() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOUTOFRANGEDISTANCE__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getOutOfRangeDistance();
	}
}

bool QuadTreeEntry::isInRange(float x, float y, float range) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGE__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInRange(x, y, range);
	}
}

float QuadTreeEntry::getDistanceTo(QuadTreeEntry* obj) const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDISTANCETO__QUADTREEENTRY_);
		method.addObjectParameter(obj);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getDistanceTo(obj);
	}
}

CloseObjectsVector* QuadTreeEntry::getCloseObjects() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getCloseObjects();
	}
}

ManagedWeakReference<QuadTreeEntry* > QuadTreeEntry::getParent() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENT__);

		return static_cast<QuadTreeEntry*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getParent();
	}
}

QuadTreeEntry* QuadTreeEntry::getParentUnsafe() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENTUNSAFE__);

		return static_cast<QuadTreeEntry*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getParentUnsafe();
	}
}

QuadTreeEntry* QuadTreeEntry::getRootParentUnsafe() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOTPARENTUNSAFE__);

		return static_cast<QuadTreeEntry*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getRootParentUnsafe();
	}
}

bool QuadTreeEntry::containsPoint(float x, float y) const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSPOINT__FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->containsPoint(x, y);
	}
}

QuadTreeEntry* QuadTreeEntry::getRootParent() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOTPARENT__);

		return static_cast<QuadTreeEntry*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getRootParent();
	}
}

bool QuadTreeEntry::isInSWArea(QuadTreeNode* node) const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isInSWArea(node);
	}
}

bool QuadTreeEntry::isInSEArea(QuadTreeNode* node) const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isInSEArea(node);
	}
}

bool QuadTreeEntry::isInNWArea(QuadTreeNode* node) const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isInNWArea(node);
	}
}

bool QuadTreeEntry::isInArea(QuadTreeNode* node) const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->isInArea(node);
	}
}

void QuadTreeEntry::notifyInsert(QuadTreeEntry* obj) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYINSERT__QUADTREEENTRY_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyInsert(obj);
	}
}

void QuadTreeEntry::notifyPositionUpdate(QuadTreeEntry* obj) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyPositionUpdate(obj);
	}
}

void QuadTreeEntry::notifyDissapear(QuadTreeEntry* obj) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYDISSAPEAR__QUADTREEENTRY_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else {
		_implementation->notifyDissapear(obj);
	}
}

float QuadTreeEntry::getPositionX() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONX__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPositionX();
	}
}

float QuadTreeEntry::getPositionZ() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONZ__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPositionZ();
	}
}

float QuadTreeEntry::getPositionY() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPositionY();
	}
}

float QuadTreeEntry::getPreviousPositionX() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPREVIOUSPOSITIONX__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPreviousPositionX();
	}
}

float QuadTreeEntry::getPreviousPositionZ() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPREVIOUSPOSITIONZ__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPreviousPositionZ();
	}
}

float QuadTreeEntry::getPreviousPositionY() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPREVIOUSPOSITIONY__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getPreviousPositionY();
	}
}

Vector3 QuadTreeEntry::getPreviousPosition() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPreviousPosition();
	}
}

Vector3 QuadTreeEntry::getPosition() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getPosition();
	}
}

void QuadTreeEntry::setPosition(float x, float z, float y) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPOSITION__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else {
		_implementation->setPosition(x, z, y);
	}
}

void QuadTreeEntry::initializePosition(float x, float z, float y) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEPOSITION__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else {
		_implementation->initializePosition(x, z, y);
	}
}

int QuadTreeEntry::__compareTo(QuadTreeEntry* obj) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__QUADTREEENTRY_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->compareTo(obj);
	}
}

int QuadTreeEntry::registerToCloseObjectsReceivers() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTERTOCLOSEOBJECTSRECEIVERS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->registerToCloseObjectsReceivers();
	}
}

int QuadTreeEntry::getReceiverFlags() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRECEIVERFLAGS__);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->getReceiverFlags();
	}
}

bool QuadTreeEntry::isInQuadTree() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINQUADTREE__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isInQuadTree();
	}
}

Reference<QuadTreeNode* > QuadTreeEntry::getNode() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		return _implementation->getNode();
	}
}

void QuadTreeEntry::setCloseObjects(CloseObjectsVector* vec) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setCloseObjects(vec);
	}
}

unsigned long long QuadTreeEntry::__getDirtyObjectID() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRTYOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getDirtyObjectID();
	}
}

unsigned long long QuadTreeEntry::__getObjectID() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else {
		return _implementation->getObjectID();
	}
}

float QuadTreeEntry::getRadius() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRADIUS__);

		return method.executeWithFloatReturn();
	} else {
		return _implementation->getRadius();
	}
}

bool QuadTreeEntry::isBounding() const {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBOUNDING__);

		return method.executeWithBooleanReturn();
	} else {
		return _implementation->isBounding();
	}
}

void QuadTreeEntry::setNode(QuadTreeNode* n) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		throw ObjectNotLocalException(this);

	} else {
		_implementation->setNode(n);
	}
}

void QuadTreeEntry::setBounding() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBOUNDING__);

		method.executeWithVoidReturn();
	} else {
		_implementation->setBounding();
	}
}

void QuadTreeEntry::setRadius(float rad) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRADIUS__FLOAT_);
		method.addFloatParameter(rad);

		method.executeWithVoidReturn();
	} else {
		_implementation->setRadius(rad);
	}
}

void QuadTreeEntry::clearBounding() {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementation());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARBOUNDING__);

		method.executeWithVoidReturn();
	} else {
		_implementation->clearBounding();
	}
}

void QuadTreeEntry::setParent(QuadTreeEntry* par) {
	QuadTreeEntryImplementation* _implementation = static_cast<QuadTreeEntryImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPARENT__QUADTREEENTRY_);
		method.addObjectParameter(par);

		method.executeWithVoidReturn();
	} else {
		_implementation->setParent(par);
	}
}

DistributedObjectServant* QuadTreeEntry::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* QuadTreeEntry::_getImplementationForRead() const {
	return _impl;
}

void QuadTreeEntry::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	QuadTreeEntryImplementation
 */

QuadTreeEntryImplementation::QuadTreeEntryImplementation(DummyConstructorParameter* param) : ObservableImplementation(param) {
	_initializeImplementation();
}


QuadTreeEntryImplementation::~QuadTreeEntryImplementation() {
}


void QuadTreeEntryImplementation::finalize() {
}

void QuadTreeEntryImplementation::_initializeImplementation() {
	_setClassHelper(QuadTreeEntryHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void QuadTreeEntryImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<QuadTreeEntry*>(stub);
	ObservableImplementation::_setStub(stub);
}

DistributedObjectStub* QuadTreeEntryImplementation::_getStub() {
	return _this.get();
}

QuadTreeEntryImplementation::operator const QuadTreeEntry*() {
	return _this.get();
}

void QuadTreeEntryImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void QuadTreeEntryImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void QuadTreeEntryImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void QuadTreeEntryImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void QuadTreeEntryImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void QuadTreeEntryImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void QuadTreeEntryImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void QuadTreeEntryImplementation::_serializationHelperMethod() {
	ObservableImplementation::_serializationHelperMethod();

	_setClassName("QuadTreeEntry");

}

void QuadTreeEntryImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(QuadTreeEntryImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool QuadTreeEntryImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObservableImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x2970c5d9: //QuadTreeEntry.coordinates
		TypeInfo<Coordinate >::parseFromBinaryStream(&coordinates, stream);
		return true;

	case 0x5a47d37d: //QuadTreeEntry.bounding
		TypeInfo<bool >::parseFromBinaryStream(&bounding, stream);
		return true;

	case 0x5284d7c8: //QuadTreeEntry.parent
		TypeInfo<ManagedWeakReference<QuadTreeEntry* > >::parseFromBinaryStream(&parent, stream);
		return true;

	case 0xac3d85f4: //QuadTreeEntry.radius
		TypeInfo<float >::parseFromBinaryStream(&radius, stream);
		return true;

	}

	return false;
}

void QuadTreeEntryImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = QuadTreeEntryImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int QuadTreeEntryImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObservableImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x2970c5d9; //QuadTreeEntry.coordinates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Coordinate >::toBinaryStream(&coordinates, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x5a47d37d; //QuadTreeEntry.bounding
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&bounding, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0x5284d7c8; //QuadTreeEntry.parent
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<QuadTreeEntry* > >::toBinaryStream(&parent, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;

	_nameHashCode = 0xac3d85f4; //QuadTreeEntry.radius
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&radius, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

void QuadTreeEntryImplementation::writeJSON(nlohmann::json& j) {
	ObservableImplementation::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	thisObject["coordinates"] = coordinates;

	thisObject["bounding"] = bounding;

	thisObject["parent"] = parent;

	thisObject["radius"] = radius;

	j["QuadTreeEntry"] = thisObject;
}

void QuadTreeEntryImplementation::addInRangeObject(QuadTreeEntry* obj, bool doNotifyUpdate) {
	// server/zone/QuadTreeEntry.idl():  	}
	if (closeobjects->put(obj) != -1){
	// server/zone/QuadTreeEntry.idl():  			notifyInsert(obj);
	notifyInsert(obj);
}

	else 	// server/zone/QuadTreeEntry.idl():  	}
	if (doNotifyUpdate){
	// server/zone/QuadTreeEntry.idl():  			notifyPositionUpdate(obj);
	notifyPositionUpdate(obj);
}
}

void QuadTreeEntryImplementation::removeInRangeObject(QuadTreeEntry* obj, bool notifyDisappear) {
	// server/zone/QuadTreeEntry.idl():  	}
	if (closeobjects->drop(obj) && notifyDisappear){
	// server/zone/QuadTreeEntry.idl():  			notifyDissapear(obj);
	notifyDissapear(obj);
}
}

void QuadTreeEntryImplementation::removeInRangeObject(int index) {
	// server/zone/QuadTreeEntry.idl():  		closeobjects.remove(index);
	closeobjects->remove(index);
}

void QuadTreeEntryImplementation::removeInRangeObjects() {
	// server/zone/QuadTreeEntry.idl():  		closeobjects.removeAll();
	closeobjects->removeAll();
}

bool QuadTreeEntryImplementation::isInRange(QuadTreeEntry* obj, float range) {
	// server/zone/QuadTreeEntry.idl():  		return isInRange(obj.getPositionX(), obj.getPositionY(), range);
	return isInRange(obj->getPositionX(), obj->getPositionY(), range);
}

bool QuadTreeEntryImplementation::isInRange(float x, float y, float range) {
	// server/zone/QuadTreeEntry.idl():  	 	float rangesq = range * range;
	float rangesq = range * range;
	// server/zone/QuadTreeEntry.idl():  		float deltaX = x - coordinates.getPositionX();
	float deltaX = x - (&coordinates)->getPositionX();
	// server/zone/QuadTreeEntry.idl():  		float deltaY = y - coordinates.getPositionY();
	float deltaY = y - (&coordinates)->getPositionY();
	// server/zone/QuadTreeEntry.idl():  			return false;
	if (deltaX * deltaX + deltaY * deltaY <= rangesq)	// server/zone/QuadTreeEntry.idl():  			return true;
	return true;

	else 	// server/zone/QuadTreeEntry.idl():  			return false;
	return false;
}

float QuadTreeEntryImplementation::getDistanceTo(QuadTreeEntry* obj) const{
	// server/zone/QuadTreeEntry.idl():  		float x = obj.getPositionX();
	float x = obj->getPositionX();
	// server/zone/QuadTreeEntry.idl():  		float y = obj.getPositionY();
	float y = obj->getPositionY();
	// server/zone/QuadTreeEntry.idl():  		float deltaX = x - coordinates.getPositionX();
	float deltaX = x - (&coordinates)->getPositionX();
	// server/zone/QuadTreeEntry.idl():  		float deltaY = y - coordinates.getPositionY();
	float deltaY = y - (&coordinates)->getPositionY();
	// server/zone/QuadTreeEntry.idl():  		return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
	return Math::sqrt(deltaX * deltaX + deltaY * deltaY);
}

CloseObjectsVector* QuadTreeEntryImplementation::getCloseObjects() {
	// server/zone/QuadTreeEntry.idl():  		return closeobjects;
	return closeobjects;
}

ManagedWeakReference<QuadTreeEntry* > QuadTreeEntryImplementation::getParent() {
	// server/zone/QuadTreeEntry.idl():  		return parent;
	return parent;
}

void QuadTreeEntryImplementation::notifyInsert(QuadTreeEntry* obj) {
}

void QuadTreeEntryImplementation::notifyPositionUpdate(QuadTreeEntry* obj) {
}

void QuadTreeEntryImplementation::notifyDissapear(QuadTreeEntry* obj) {
}

float QuadTreeEntryImplementation::getPositionX() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPositionX();
	return (&coordinates)->getPositionX();
}

float QuadTreeEntryImplementation::getPositionZ() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPositionZ();
	return (&coordinates)->getPositionZ();
}

float QuadTreeEntryImplementation::getPositionY() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPositionY();
	return (&coordinates)->getPositionY();
}

float QuadTreeEntryImplementation::getPreviousPositionX() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPreviousPositionX();
	return (&coordinates)->getPreviousPositionX();
}

float QuadTreeEntryImplementation::getPreviousPositionZ() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPreviousPositionZ();
	return (&coordinates)->getPreviousPositionZ();
}

float QuadTreeEntryImplementation::getPreviousPositionY() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPreviousPositionY();
	return (&coordinates)->getPreviousPositionY();
}

Vector3 QuadTreeEntryImplementation::getPreviousPosition() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPreviousPosition();
	return (&coordinates)->getPreviousPosition();
}

Vector3 QuadTreeEntryImplementation::getPosition() const{
	// server/zone/QuadTreeEntry.idl():  		return coordinates.getPosition();
	return (&coordinates)->getPosition();
}

void QuadTreeEntryImplementation::setPosition(float x, float z, float y) {
	// server/zone/QuadTreeEntry.idl():  		coordinates.setPosition(x, z, y);
	(&coordinates)->setPosition(x, z, y);
}

void QuadTreeEntryImplementation::initializePosition(float x, float z, float y) {
	// server/zone/QuadTreeEntry.idl():  		coordinates.initializePosition(x, z, y);
	(&coordinates)->initializePosition(x, z, y);
}

int QuadTreeEntryImplementation::registerToCloseObjectsReceivers() {
	// server/zone/QuadTreeEntry.idl():  	 return receiverFlags;
	return receiverFlags;
}

int QuadTreeEntryImplementation::getReceiverFlags() const{
	// server/zone/QuadTreeEntry.idl():  	 return receiverFlags;
	return receiverFlags;
}

bool QuadTreeEntryImplementation::isInQuadTree() const{
	// server/zone/QuadTreeEntry.idl():  		return node;
	return node;
}

Reference<QuadTreeNode* > QuadTreeEntryImplementation::getNode() const{
	// server/zone/QuadTreeEntry.idl():  		return node;
	return node;
}

void QuadTreeEntryImplementation::setCloseObjects(CloseObjectsVector* vec) {
	// server/zone/QuadTreeEntry.idl():  		closeobjects = vec;
	closeobjects = vec;
}

float QuadTreeEntryImplementation::getRadius() const{
	// server/zone/QuadTreeEntry.idl():  		return radius;
	return radius;
}

bool QuadTreeEntryImplementation::isBounding() const{
	// server/zone/QuadTreeEntry.idl():  		return bounding;
	return bounding;
}

void QuadTreeEntryImplementation::setBounding() {
	// server/zone/QuadTreeEntry.idl():  		bounding = true;
	bounding = true;
}

void QuadTreeEntryImplementation::setRadius(float rad) {
	// server/zone/QuadTreeEntry.idl():  		radius = rad;
	radius = rad;
}

void QuadTreeEntryImplementation::clearBounding() {
	// server/zone/QuadTreeEntry.idl():  		bounding = false;
	bounding = false;
}

void QuadTreeEntryImplementation::setParent(QuadTreeEntry* par) {
	// server/zone/QuadTreeEntry.idl():  		parent = par;
	parent = par;
}

/*
 *	QuadTreeEntryAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


QuadTreeEntryAdapter::QuadTreeEntryAdapter(QuadTreeEntry* obj) : ObservableAdapter(obj) {
}

void QuadTreeEntryAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ADDINRANGEOBJECT__QUADTREEENTRY_BOOL_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			bool doNotifyUpdate = inv->getBooleanParameter();
			
			addInRangeObject(obj, doNotifyUpdate);
			
		}
		break;
	case RPC_REMOVEINRANGEOBJECT__QUADTREEENTRY_BOOL_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			bool notifyDisappear = inv->getBooleanParameter();
			
			removeInRangeObject(obj, notifyDisappear);
			
		}
		break;
	case RPC_REMOVEINRANGEOBJECT__INT_:
		{
			int index = inv->getSignedIntParameter();
			
			removeInRangeObject(index);
			
		}
		break;
	case RPC_REMOVEINRANGEOBJECTS__:
		{
			
			removeInRangeObjects();
			
		}
		break;
	case RPC_ISINRANGE__QUADTREEENTRY_FLOAT_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			float range = inv->getFloatParameter();
			
			bool _m_res = isInRange(obj, range);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETOUTOFRANGEDISTANCE__:
		{
			
			float _m_res = getOutOfRangeDistance();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_ISINRANGE__FLOAT_FLOAT_FLOAT_:
		{
			float x = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			float range = inv->getFloatParameter();
			
			bool _m_res = isInRange(x, y, range);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETDISTANCETO__QUADTREEENTRY_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			float _m_res = getDistanceTo(obj);
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETPARENT__:
		{
			
			DistributedObject* _m_res = getParent().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETPARENTUNSAFE__:
		{
			
			DistributedObject* _m_res = getParentUnsafe();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_GETROOTPARENTUNSAFE__:
		{
			
			DistributedObject* _m_res = getRootParentUnsafe();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_CONTAINSPOINT__FLOAT_FLOAT_:
		{
			float x = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			
			bool _m_res = containsPoint(x, y);
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETROOTPARENT__:
		{
			
			DistributedObject* _m_res = getRootParent();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	case RPC_NOTIFYINSERT__QUADTREEENTRY_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			notifyInsert(obj);
			
		}
		break;
	case RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			notifyPositionUpdate(obj);
			
		}
		break;
	case RPC_NOTIFYDISSAPEAR__QUADTREEENTRY_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			notifyDissapear(obj);
			
		}
		break;
	case RPC_GETPOSITIONX__:
		{
			
			float _m_res = getPositionX();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETPOSITIONZ__:
		{
			
			float _m_res = getPositionZ();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETPOSITIONY__:
		{
			
			float _m_res = getPositionY();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETPREVIOUSPOSITIONX__:
		{
			
			float _m_res = getPreviousPositionX();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETPREVIOUSPOSITIONZ__:
		{
			
			float _m_res = getPreviousPositionZ();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_GETPREVIOUSPOSITIONY__:
		{
			
			float _m_res = getPreviousPositionY();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_SETPOSITION__FLOAT_FLOAT_FLOAT_:
		{
			float x = inv->getFloatParameter();
			float z = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			
			setPosition(x, z, y);
			
		}
		break;
	case RPC_INITIALIZEPOSITION__FLOAT_FLOAT_FLOAT_:
		{
			float x = inv->getFloatParameter();
			float z = inv->getFloatParameter();
			float y = inv->getFloatParameter();
			
			initializePosition(x, z, y);
			
		}
		break;
	case RPC_COMPARETO__QUADTREEENTRY_:
		{
			QuadTreeEntry* obj = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			int _m_res = compareTo(obj);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_REGISTERTOCLOSEOBJECTSRECEIVERS__:
		{
			
			int _m_res = registerToCloseObjectsReceivers();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETRECEIVERFLAGS__:
		{
			
			int _m_res = getReceiverFlags();
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_ISINQUADTREE__:
		{
			
			bool _m_res = isInQuadTree();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_GETDIRTYOBJECTID__:
		{
			
			unsigned long long _m_res = getDirtyObjectID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETOBJECTID__:
		{
			
			unsigned long long _m_res = getObjectID();
			resp->insertLong(_m_res);
		}
		break;
	case RPC_GETRADIUS__:
		{
			
			float _m_res = getRadius();
			resp->insertFloat(_m_res);
		}
		break;
	case RPC_ISBOUNDING__:
		{
			
			bool _m_res = isBounding();
			resp->insertBoolean(_m_res);
		}
		break;
	case RPC_SETBOUNDING__:
		{
			
			setBounding();
			
		}
		break;
	case RPC_SETRADIUS__FLOAT_:
		{
			float rad = inv->getFloatParameter();
			
			setRadius(rad);
			
		}
		break;
	case RPC_CLEARBOUNDING__:
		{
			
			clearBounding();
			
		}
		break;
	case RPC_SETPARENT__QUADTREEENTRY_:
		{
			QuadTreeEntry* par = static_cast<QuadTreeEntry*>(inv->getObjectParameter());
			
			setParent(par);
			
		}
		break;
	default:
		ObservableAdapter::invokeMethod(methid, inv);
	}
}

void QuadTreeEntryAdapter::addInRangeObject(QuadTreeEntry* obj, bool doNotifyUpdate) {
	(static_cast<QuadTreeEntry*>(stub))->addInRangeObject(obj, doNotifyUpdate);
}

void QuadTreeEntryAdapter::removeInRangeObject(QuadTreeEntry* obj, bool notifyDisappear) {
	(static_cast<QuadTreeEntry*>(stub))->removeInRangeObject(obj, notifyDisappear);
}

void QuadTreeEntryAdapter::removeInRangeObject(int index) {
	(static_cast<QuadTreeEntry*>(stub))->removeInRangeObject(index);
}

void QuadTreeEntryAdapter::removeInRangeObjects() {
	(static_cast<QuadTreeEntry*>(stub))->removeInRangeObjects();
}

bool QuadTreeEntryAdapter::isInRange(QuadTreeEntry* obj, float range) {
	return (static_cast<QuadTreeEntry*>(stub))->isInRange(obj, range);
}

float QuadTreeEntryAdapter::getOutOfRangeDistance() const {
	return (static_cast<QuadTreeEntry*>(stub))->getOutOfRangeDistance();
}

bool QuadTreeEntryAdapter::isInRange(float x, float y, float range) {
	return (static_cast<QuadTreeEntry*>(stub))->isInRange(x, y, range);
}

float QuadTreeEntryAdapter::getDistanceTo(QuadTreeEntry* obj) const {
	return (static_cast<QuadTreeEntry*>(stub))->getDistanceTo(obj);
}

ManagedWeakReference<QuadTreeEntry* > QuadTreeEntryAdapter::getParent() {
	return (static_cast<QuadTreeEntry*>(stub))->getParent();
}

QuadTreeEntry* QuadTreeEntryAdapter::getParentUnsafe() {
	return (static_cast<QuadTreeEntry*>(stub))->getParentUnsafe();
}

QuadTreeEntry* QuadTreeEntryAdapter::getRootParentUnsafe() {
	return (static_cast<QuadTreeEntry*>(stub))->getRootParentUnsafe();
}

bool QuadTreeEntryAdapter::containsPoint(float x, float y) const {
	return (static_cast<QuadTreeEntry*>(stub))->containsPoint(x, y);
}

QuadTreeEntry* QuadTreeEntryAdapter::getRootParent() {
	return (static_cast<QuadTreeEntry*>(stub))->getRootParent();
}

void QuadTreeEntryAdapter::notifyInsert(QuadTreeEntry* obj) {
	(static_cast<QuadTreeEntry*>(stub))->notifyInsert(obj);
}

void QuadTreeEntryAdapter::notifyPositionUpdate(QuadTreeEntry* obj) {
	(static_cast<QuadTreeEntry*>(stub))->notifyPositionUpdate(obj);
}

void QuadTreeEntryAdapter::notifyDissapear(QuadTreeEntry* obj) {
	(static_cast<QuadTreeEntry*>(stub))->notifyDissapear(obj);
}

float QuadTreeEntryAdapter::getPositionX() const {
	return (static_cast<QuadTreeEntry*>(stub))->getPositionX();
}

float QuadTreeEntryAdapter::getPositionZ() const {
	return (static_cast<QuadTreeEntry*>(stub))->getPositionZ();
}

float QuadTreeEntryAdapter::getPositionY() const {
	return (static_cast<QuadTreeEntry*>(stub))->getPositionY();
}

float QuadTreeEntryAdapter::getPreviousPositionX() const {
	return (static_cast<QuadTreeEntry*>(stub))->getPreviousPositionX();
}

float QuadTreeEntryAdapter::getPreviousPositionZ() const {
	return (static_cast<QuadTreeEntry*>(stub))->getPreviousPositionZ();
}

float QuadTreeEntryAdapter::getPreviousPositionY() const {
	return (static_cast<QuadTreeEntry*>(stub))->getPreviousPositionY();
}

void QuadTreeEntryAdapter::setPosition(float x, float z, float y) {
	(static_cast<QuadTreeEntry*>(stub))->setPosition(x, z, y);
}

void QuadTreeEntryAdapter::initializePosition(float x, float z, float y) {
	(static_cast<QuadTreeEntry*>(stub))->initializePosition(x, z, y);
}

int QuadTreeEntryAdapter::compareTo(QuadTreeEntry* obj) {
	return (static_cast<QuadTreeEntry*>(stub))->compareTo(obj);
}

int QuadTreeEntryAdapter::registerToCloseObjectsReceivers() {
	return (static_cast<QuadTreeEntry*>(stub))->registerToCloseObjectsReceivers();
}

int QuadTreeEntryAdapter::getReceiverFlags() const {
	return (static_cast<QuadTreeEntry*>(stub))->getReceiverFlags();
}

bool QuadTreeEntryAdapter::isInQuadTree() const {
	return (static_cast<QuadTreeEntry*>(stub))->isInQuadTree();
}

unsigned long long QuadTreeEntryAdapter::getDirtyObjectID() {
	return (static_cast<QuadTreeEntry*>(stub))->getDirtyObjectID();
}

unsigned long long QuadTreeEntryAdapter::getObjectID() {
	return (static_cast<QuadTreeEntry*>(stub))->getObjectID();
}

float QuadTreeEntryAdapter::getRadius() const {
	return (static_cast<QuadTreeEntry*>(stub))->getRadius();
}

bool QuadTreeEntryAdapter::isBounding() const {
	return (static_cast<QuadTreeEntry*>(stub))->isBounding();
}

void QuadTreeEntryAdapter::setBounding() {
	(static_cast<QuadTreeEntry*>(stub))->setBounding();
}

void QuadTreeEntryAdapter::setRadius(float rad) {
	(static_cast<QuadTreeEntry*>(stub))->setRadius(rad);
}

void QuadTreeEntryAdapter::clearBounding() {
	(static_cast<QuadTreeEntry*>(stub))->clearBounding();
}

void QuadTreeEntryAdapter::setParent(QuadTreeEntry* par) {
	(static_cast<QuadTreeEntry*>(stub))->setParent(par);
}

/*
 *	QuadTreeEntryHelper
 */

QuadTreeEntryHelper* QuadTreeEntryHelper::staticInitializer = QuadTreeEntryHelper::instance();

QuadTreeEntryHelper::QuadTreeEntryHelper() {
	className = "QuadTreeEntry";

	Core::getObjectBroker()->registerClass(className, this);
}

void QuadTreeEntryHelper::finalizeHelper() {
	QuadTreeEntryHelper::finalize();
}

DistributedObject* QuadTreeEntryHelper::instantiateObject() {
	return new QuadTreeEntry(DummyConstructorParameter::instance());
}

DistributedObjectServant* QuadTreeEntryHelper::instantiateServant() {
	return new QuadTreeEntryImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* QuadTreeEntryHelper::instantiatePOD() {
	return new QuadTreeEntryPOD();
}

DistributedObjectAdapter* QuadTreeEntryHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new QuadTreeEntryAdapter(static_cast<QuadTreeEntry*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	QuadTreeEntryPOD
 */

QuadTreeEntryPOD::~QuadTreeEntryPOD() {
}

QuadTreeEntryPOD::QuadTreeEntryPOD(void) {
	_className = "QuadTreeEntry";
}


void QuadTreeEntryPOD::writeJSON(nlohmann::json& j) {
	ObservablePOD::writeJSON(j);

	nlohmann::json thisObject = nlohmann::json::object();
	if (coordinates)
		thisObject["coordinates"] = coordinates.value();

	if (bounding)
		thisObject["bounding"] = bounding.value();

	if (parent)
		thisObject["parent"] = parent.value();

	if (radius)
		thisObject["radius"] = radius.value();

	j["QuadTreeEntry"] = thisObject;
}


void QuadTreeEntryPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = QuadTreeEntryPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int QuadTreeEntryPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObservablePOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (coordinates) {
	_nameHashCode = 0x2970c5d9; //QuadTreeEntry.coordinates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Coordinate >::toBinaryStream(&coordinates.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (bounding) {
	_nameHashCode = 0x5a47d37d; //QuadTreeEntry.bounding
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&bounding.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (parent) {
	_nameHashCode = 0x5284d7c8; //QuadTreeEntry.parent
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<QuadTreeEntryPOD* > >::toBinaryStream(&parent.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}

	if (radius) {
	_nameHashCode = 0xac3d85f4; //QuadTreeEntry.radius
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&radius.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool QuadTreeEntryPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObservablePOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x2970c5d9: //QuadTreeEntry.coordinates
		{
			Coordinate _mncoordinates;
			TypeInfo<Coordinate >::parseFromBinaryStream(&_mncoordinates, stream);
			coordinates = std::move(_mncoordinates);
		}
		return true;

	case 0x5a47d37d: //QuadTreeEntry.bounding
		{
			bool _mnbounding;
			TypeInfo<bool >::parseFromBinaryStream(&_mnbounding, stream);
			bounding = std::move(_mnbounding);
		}
		return true;

	case 0x5284d7c8: //QuadTreeEntry.parent
		{
			ManagedWeakReference<QuadTreeEntryPOD* > _mnparent;
			TypeInfo<ManagedWeakReference<QuadTreeEntryPOD* > >::parseFromBinaryStream(&_mnparent, stream);
			parent = std::move(_mnparent);
		}
		return true;

	case 0xac3d85f4: //QuadTreeEntry.radius
		{
			float _mnradius;
			TypeInfo<float >::parseFromBinaryStream(&_mnradius, stream);
			radius = std::move(_mnradius);
		}
		return true;

	}

	return false;
}

void QuadTreeEntryPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(QuadTreeEntryPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void QuadTreeEntryPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObservablePOD::writeObjectCompact(stream);

	TypeInfo<Coordinate >::toBinaryStream(&coordinates.value(), stream);

	TypeInfo<bool >::toBinaryStream(&bounding.value(), stream);

	TypeInfo<ManagedWeakReference<QuadTreeEntryPOD* > >::toBinaryStream(&parent.value(), stream);

	TypeInfo<float >::toBinaryStream(&radius.value(), stream);


}

